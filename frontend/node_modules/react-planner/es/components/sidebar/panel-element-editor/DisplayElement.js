var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, {Component, Assert } from 'react';
import * as SharedStyle from '../../../shared-style';

var STYLE = {
  borderTop: '1px solid #222',
  borderBottom: '1px solid #48494E',
  userSelect: 'none'
};

var STYLE_CONTENT = {
  fontSize: '11px',
  color: SharedStyle.PRIMARY_COLOR.text_alt,
  border: '1px solid #222',
  padding: '0px',
  backgroundColor: SharedStyle.PRIMARY_COLOR.alt,
  textShadow: '-1px -1px 2px rgba(0, 0, 0, 1)'
};
//import PropTypes from 'prop-types';
//import Panel from './panel';
//import { MODE_IDLE, MODE_2D_ZOOM_IN, MODE_2D_ZOOM_OUT, MODE_2D_PAN, MODE_3D_VIEW, MODE_3D_FIRST_PERSON, MODE_WAITING_DRAWING_LINE, MODE_DRAWING_LINE, MODE_DRAWING_HOLE, MODE_DRAWING_ITEM, MODE_DRAGGING_LINE, MODE_DRAGGING_VERTEX, MODE_DRAGGING_ITEM, MODE_DRAGGING_HOLE, MODE_FITTING_IMAGE, MODE_UPLOADING_IMAGE, MODE_ROTATING_ITEM } from '../../constants';
//import * as SharedStyle from '../../shared-style';
//import { MdSearch } from 'react-icons/md';

/*var VISIBILITY_MODE = {
  MODE_IDLE: MODE_IDLE, MODE_2D_ZOOM_IN: MODE_2D_ZOOM_IN, MODE_2D_ZOOM_OUT: MODE_2D_ZOOM_OUT, MODE_2D_PAN: MODE_2D_PAN, MODE_3D_VIEW: MODE_3D_VIEW, MODE_3D_FIRST_PERSON: MODE_3D_FIRST_PERSON,
  MODE_WAITING_DRAWING_LINE: MODE_WAITING_DRAWING_LINE, MODE_DRAWING_LINE: MODE_DRAWING_LINE, MODE_DRAWING_HOLE: MODE_DRAWING_HOLE, MODE_DRAWING_ITEM: MODE_DRAWING_ITEM, MODE_DRAGGING_LINE: MODE_DRAGGING_LINE,
  MODE_DRAGGING_VERTEX: MODE_DRAGGING_VERTEX, MODE_DRAGGING_ITEM: MODE_DRAGGING_ITEM, MODE_DRAGGING_HOLE: MODE_DRAGGING_HOLE, MODE_FITTING_IMAGE: MODE_FITTING_IMAGE, MODE_UPLOADING_IMAGE: MODE_UPLOADING_IMAGE,
  MODE_ROTATING_ITEM: MODE_ROTATING_ITEM
};

var contentArea = {
  height: 'auto',
  maxHeight: '15em',
  overflowY: 'auto',
  padding: '0.25em 1.15em',
  cursor: 'pointer',
  marginBottom: '1em',
  userSelect: 'none'
};

var elementStyle = {
  width: 'auto',
  height: '2.5em',
  margin: '0.25em 0.25em 0 0',
  padding: '0.5em',
  textAlign: 'center',
  display: 'inline-block',
  border: '1px solid #CCC',
  borderRadius: '0.2em'
};

var elementSelectedStyle = _extends({}, elementStyle, {
  color: SharedStyle.SECONDARY_COLOR.main,
  borderColor: SharedStyle.SECONDARY_COLOR.main
});

var categoryDividerStyle = {
  paddingBottom: '0.5em',
  borderBottom: '1px solid #888'
};

var tableSearchStyle = { width: '100%', marginTop: '0.8em' };
var searchIconStyle = { fontSize: '1.5em' };
var searchInputStyle = { fontSize: '1em', width: '100%', height: '1em', padding: '1em 0.5em' };
*/

var DisplayElement = function (_Component) {
  _inherits(DisplayElement, _Component);

  function DisplayElement(props, context) {
    _classCallCheck(this, DisplayElement);

    var _this = _possibleConstructorReturn(this, (DisplayElement.__proto__ || Object.getPrototypeOf(DisplayElement)).call(this, props, context));

    //var layer = props.layers.get(props.selectedLayer);
    /*var elements = {
      lines: layer.lines,
      holes: layer.holes,
      items: layer.items
    };*/

    _this.state = {
      /*elements: elements,
      matchString: '',
      matchedElements: elements*/
      opened: props.hasOwnProperty('opened') ? props.opened : false,
      deleted: props.hasOwnProperty('deleted') ? props.deleted : false,
      Id:props.Id,
      products:[]
    };
    return _this;
  }

  _createClass(DisplayElement, [/*{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      if (this.state.matchString !== nextState.matchString) return true;

      var oldElements = this.state.elements;
      var newElements = nextState.elements;

      if (oldElements.lines.hashCode() !== newElements.lines.hashCode() || oldElements.holes.hashCode() !== newElements.holes.hashCode() || oldElements.items.hashCode() !== newElements.items.hashCode()) return true;

      return false;
    }
  },*/ {
    key: 'toggleOpen',
    value: function toggleOpen(products) {
      this.setState({ opened: !this.state.opened });
      this.setState({products: products})
    }
  },{
    key: 'toggleDelete',
    value: function toggleDelete() {
      this.setState({ deleted: !this.state.deleted });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      /*var layer = nextProps.layers.get(nextProps.selectedLayer);

      if (this.props.layers.hashCode() === nextProps.layers.hashCode()) return;

      var elements = {
        lines: layer.lines,
        holes: layer.holes,
        items: layer.items
      };

      if (this.state.matchString !== '') {
        var regexp = new RegExp(this.state.matchString, 'i');
        var filterCb = function filterCb(el) {
          return regexp.test(el.get('name'));
        };

        this.setState({
          matchedElements: {
            elements: elements,
            lines: elements.lines.filter(filterCb),
            holes: elements.holes.filter(filterCb),
            items: elements.items.filter(filterCb)
          }
        });
      } else {
        this.setState({ elements: elements, matchedElements: elements });
      }
    }*/
        this.setState({
            Id:nextProps.Id
        })
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;
      var _props = this.props;
      var _state = this.state,
      opened = _state.opened,
      deleted = _state.deleted
      return React.createElement(
        'div',
        { style: STYLE },
        React.createElement(
          "div",
          {
            className: "panel-buttons"
          },
          React.createElement(
            "button",
            {
              style:{color:"black",height:"30px",width:"70px",backgroundColor: "#f44336"},
              onClick: function onClick() {
                fetch('http://127.0.0.1:5000/delete', {
                    method: "post",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        Id:_props.Id
                    })
                })
                .then(res=>res.json())
                .then(data=>{
                  if(data.deleted)
                  {alert("Changes will get reflected when you reload");}
                })
              },
            },
            "Delete"
          ),
          React.createElement(
            "button",
            {
              style:{color:"black",height:"30px",width:"95px",backgroundColor: "#008CBA"},
              onClick: function onClick() {
                fetch('http://127.0.0.1:5000/items', {
                    method: "post",
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        Id:_props.Id
                    })
                })
                .then(res => res.json())
                .then(data => {
                  console.log(data);
                  if(data.present)
                  {console.log("Yes, item present");return _this2.toggleOpen(data.products);}
                  else
                  {console.log("Items absent");return _this2.toggleOpen([]);}
                });
              },
            },
            "List Items"
          ),
          opened?_state.products.map((product)=>React.createElement('p',{},product.description," :",product.unitPrice,product.currencyUnit)):null
          //opened?React.createElement('h1',{},_state.products.map((product)=>product.productId)):null
        ),
        console.log(_props.Id)
    );/*,
        React.createElement(
          'div',
          { style: _extends({}, STYLE_CONTENT, { display: opened ? 'block' : 'none' }) },
          children
        )*/
    }
  }]);

  return DisplayElement;
}(Component);

export default DisplayElement;

/*
DisplayElement.propTypes = {
  mode: PropTypes.string.isRequired,
  layers: PropTypes.object.isRequired
};

DisplayElement.contextTypes = {
  catalog: PropTypes.object.isRequired,
  translator: PropTypes.object.isRequired,
  itemsActions: PropTypes.object.isRequired,
  linesActions: PropTypes.object.isRequired,
  holesActions: PropTypes.object.isRequired,
  projectActions: PropTypes.object.isRequired
};*/