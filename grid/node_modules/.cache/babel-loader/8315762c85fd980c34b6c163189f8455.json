{"ast":null,"code":"import { Hole } from '../class/export';\nimport { history } from '../utils/export';\nimport { SELECT_TOOL_DRAWING_HOLE, UPDATE_DRAWING_HOLE, END_DRAWING_HOLE, BEGIN_DRAGGING_HOLE, UPDATE_DRAGGING_HOLE, END_DRAGGING_HOLE, SELECT_HOLE } from '../constants';\nexport default function (state, action) {\n  switch (action.type) {\n    case SELECT_TOOL_DRAWING_HOLE:\n      state = state.merge({\n        sceneHistory: history.historyPush(state.sceneHistory, state.scene)\n      });\n      return Hole.selectToolDrawingHole(state, action.sceneComponentType).updatedState;\n\n    case UPDATE_DRAWING_HOLE:\n      return Hole.updateDrawingHole(state, action.layerID, action.x, action.y).updatedState;\n\n    case END_DRAWING_HOLE:\n      state = state.merge({\n        sceneHistory: history.historyPush(state.sceneHistory, state.scene)\n      });\n      return Hole.endDrawingHole(state, action.layerID, action.x, action.y).updatedState;\n\n    case BEGIN_DRAGGING_HOLE:\n      state = state.merge({\n        sceneHistory: history.historyPush(state.sceneHistory, state.scene)\n      });\n      return Hole.beginDraggingHole(state, action.layerID, action.holeID, action.x, action.y).updatedState;\n\n    case UPDATE_DRAGGING_HOLE:\n      return Hole.updateDraggingHole(state, action.x, action.y).updatedState;\n\n    case END_DRAGGING_HOLE:\n      state = state.merge({\n        sceneHistory: history.historyPush(state.sceneHistory, state.scene)\n      });\n      return Hole.endDraggingHole(state, action.x, action.y).updatedState;\n\n    case SELECT_HOLE:\n      return Hole.select(state, action.layerID, action.holeID).updatedState;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/reducers/holes-reducer.js"],"names":["Hole","history","SELECT_TOOL_DRAWING_HOLE","UPDATE_DRAWING_HOLE","END_DRAWING_HOLE","BEGIN_DRAGGING_HOLE","UPDATE_DRAGGING_HOLE","END_DRAGGING_HOLE","SELECT_HOLE","state","action","type","merge","sceneHistory","historyPush","scene","selectToolDrawingHole","sceneComponentType","updatedState","updateDrawingHole","layerID","x","y","endDrawingHole","beginDraggingHole","holeID","updateDraggingHole","endDraggingHole","select"],"mappings":"AAAA,SAASA,IAAT,QAAqB,iBAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,wBAAT,EAAmCC,mBAAnC,EAAwDC,gBAAxD,EAA0EC,mBAA1E,EAA+FC,oBAA/F,EAAqHC,iBAArH,EAAwIC,WAAxI,QAA2J,cAA3J;AAEA,eAAe,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACtC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,wBAAL;AACEO,MAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY;AAAEC,QAAAA,YAAY,EAAEZ,OAAO,CAACa,WAAR,CAAoBL,KAAK,CAACI,YAA1B,EAAwCJ,KAAK,CAACM,KAA9C;AAAhB,OAAZ,CAAR;AACA,aAAOf,IAAI,CAACgB,qBAAL,CAA2BP,KAA3B,EAAkCC,MAAM,CAACO,kBAAzC,EAA6DC,YAApE;;AAEF,SAAKf,mBAAL;AACE,aAAOH,IAAI,CAACmB,iBAAL,CAAuBV,KAAvB,EAA8BC,MAAM,CAACU,OAArC,EAA8CV,MAAM,CAACW,CAArD,EAAwDX,MAAM,CAACY,CAA/D,EAAkEJ,YAAzE;;AAEF,SAAKd,gBAAL;AACEK,MAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY;AAAEC,QAAAA,YAAY,EAAEZ,OAAO,CAACa,WAAR,CAAoBL,KAAK,CAACI,YAA1B,EAAwCJ,KAAK,CAACM,KAA9C;AAAhB,OAAZ,CAAR;AACA,aAAOf,IAAI,CAACuB,cAAL,CAAoBd,KAApB,EAA2BC,MAAM,CAACU,OAAlC,EAA2CV,MAAM,CAACW,CAAlD,EAAqDX,MAAM,CAACY,CAA5D,EAA+DJ,YAAtE;;AAEF,SAAKb,mBAAL;AACEI,MAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY;AAAEC,QAAAA,YAAY,EAAEZ,OAAO,CAACa,WAAR,CAAoBL,KAAK,CAACI,YAA1B,EAAwCJ,KAAK,CAACM,KAA9C;AAAhB,OAAZ,CAAR;AACA,aAAOf,IAAI,CAACwB,iBAAL,CAAuBf,KAAvB,EAA8BC,MAAM,CAACU,OAArC,EAA8CV,MAAM,CAACe,MAArD,EAA6Df,MAAM,CAACW,CAApE,EAAuEX,MAAM,CAACY,CAA9E,EAAiFJ,YAAxF;;AAEF,SAAKZ,oBAAL;AACE,aAAON,IAAI,CAAC0B,kBAAL,CAAwBjB,KAAxB,EAA+BC,MAAM,CAACW,CAAtC,EAAyCX,MAAM,CAACY,CAAhD,EAAmDJ,YAA1D;;AAEF,SAAKX,iBAAL;AACEE,MAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY;AAAEC,QAAAA,YAAY,EAAEZ,OAAO,CAACa,WAAR,CAAoBL,KAAK,CAACI,YAA1B,EAAwCJ,KAAK,CAACM,KAA9C;AAAhB,OAAZ,CAAR;AACA,aAAOf,IAAI,CAAC2B,eAAL,CAAqBlB,KAArB,EAA4BC,MAAM,CAACW,CAAnC,EAAsCX,MAAM,CAACY,CAA7C,EAAgDJ,YAAvD;;AAEF,SAAKV,WAAL;AACE,aAAOR,IAAI,CAAC4B,MAAL,CAAYnB,KAAZ,EAAmBC,MAAM,CAACU,OAA1B,EAAmCV,MAAM,CAACe,MAA1C,EAAkDP,YAAzD;;AAEF;AACE,aAAOT,KAAP;AA3BJ;AA6BD","sourcesContent":["import { Hole } from '../class/export';\nimport { history } from '../utils/export';\nimport { SELECT_TOOL_DRAWING_HOLE, UPDATE_DRAWING_HOLE, END_DRAWING_HOLE, BEGIN_DRAGGING_HOLE, UPDATE_DRAGGING_HOLE, END_DRAGGING_HOLE, SELECT_HOLE } from '../constants';\n\nexport default function (state, action) {\n  switch (action.type) {\n    case SELECT_TOOL_DRAWING_HOLE:\n      state = state.merge({ sceneHistory: history.historyPush(state.sceneHistory, state.scene) });\n      return Hole.selectToolDrawingHole(state, action.sceneComponentType).updatedState;\n\n    case UPDATE_DRAWING_HOLE:\n      return Hole.updateDrawingHole(state, action.layerID, action.x, action.y).updatedState;\n\n    case END_DRAWING_HOLE:\n      state = state.merge({ sceneHistory: history.historyPush(state.sceneHistory, state.scene) });\n      return Hole.endDrawingHole(state, action.layerID, action.x, action.y).updatedState;\n\n    case BEGIN_DRAGGING_HOLE:\n      state = state.merge({ sceneHistory: history.historyPush(state.sceneHistory, state.scene) });\n      return Hole.beginDraggingHole(state, action.layerID, action.holeID, action.x, action.y).updatedState;\n\n    case UPDATE_DRAGGING_HOLE:\n      return Hole.updateDraggingHole(state, action.x, action.y).updatedState;\n\n    case END_DRAGGING_HOLE:\n      state = state.merge({ sceneHistory: history.historyPush(state.sceneHistory, state.scene) });\n      return Hole.endDraggingHole(state, action.x, action.y).updatedState;\n\n    case SELECT_HOLE:\n      return Hole.select(state, action.layerID, action.holeID).updatedState;\n\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}