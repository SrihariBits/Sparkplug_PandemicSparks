{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { Map, List, Record } from 'immutable';\nimport * as Geometry from './geometry';\nexport var SNAP_POINT = 'SNAP_POINT';\nexport var SNAP_LINE = 'SNAP_LINE';\nexport var SNAP_SEGMENT = 'SNAP_SEGMENT';\nexport var SNAP_GRID = 'SNAP_GRID';\nexport var SNAP_GUIDE = 'SNAP_GUIDE';\nexport var SNAP_MASK = new Map({\n  SNAP_POINT: true,\n  SNAP_LINE: true,\n  SNAP_SEGMENT: true,\n  SNAP_GRID: false,\n  SNAP_GUIDE: true\n});\n\nvar PointSnap = function (_Record) {\n  _inherits(PointSnap, _Record);\n\n  function PointSnap() {\n    _classCallCheck(this, PointSnap);\n\n    return _possibleConstructorReturn(this, (PointSnap.__proto__ || Object.getPrototypeOf(PointSnap)).apply(this, arguments));\n  }\n\n  _createClass(PointSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return {\n        x: this.x,\n        y: this.y,\n        distance: Geometry.pointsDistance(this.x, this.y, x, y)\n      };\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return ~(this.x - x) + 1 < distance && ~(this.y - y) + 1 < distance;\n    }\n  }]);\n\n  return PointSnap;\n}(Record({\n  type: 'point',\n  x: -1,\n  y: -1,\n  radius: 1,\n  priority: 1,\n  related: new List()\n}));\n\nvar LineSnap = function (_Record2) {\n  _inherits(LineSnap, _Record2);\n\n  function LineSnap() {\n    _classCallCheck(this, LineSnap);\n\n    return _possibleConstructorReturn(this, (LineSnap.__proto__ || Object.getPrototypeOf(LineSnap)).apply(this, arguments));\n  }\n\n  _createClass(LineSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return _extends({}, Geometry.closestPointFromLine(this.a, this.b, this.c, x, y), {\n        distance: Geometry.distancePointFromLine(this.a, this.b, this.c, x, y)\n      });\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return true;\n    }\n  }]);\n\n  return LineSnap;\n}(Record({\n  type: 'line',\n  a: -1,\n  b: -1,\n  c: -1,\n  radius: 1,\n  priority: 1,\n  related: new List()\n}));\n\nvar LineSegmentSnap = function (_Record3) {\n  _inherits(LineSegmentSnap, _Record3);\n\n  function LineSegmentSnap() {\n    _classCallCheck(this, LineSegmentSnap);\n\n    return _possibleConstructorReturn(this, (LineSegmentSnap.__proto__ || Object.getPrototypeOf(LineSegmentSnap)).apply(this, arguments));\n  }\n\n  _createClass(LineSegmentSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return _extends({}, Geometry.closestPointFromLineSegment(this.x1, this.y1, this.x2, this.y2, x, y), {\n        distance: Geometry.distancePointFromLineSegment(this.x1, this.y1, this.x2, this.y2, x, y)\n      });\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return true;\n    }\n  }]);\n\n  return LineSegmentSnap;\n}(Record({\n  type: 'line-segment',\n  x1: -1,\n  y1: -1,\n  x2: -1,\n  y2: -1,\n  radius: 1,\n  priority: 1,\n  related: new List()\n}));\n\nvar GridSnap = function (_Record4) {\n  _inherits(GridSnap, _Record4);\n\n  function GridSnap() {\n    _classCallCheck(this, GridSnap);\n\n    return _possibleConstructorReturn(this, (GridSnap.__proto__ || Object.getPrototypeOf(GridSnap)).apply(this, arguments));\n  }\n\n  _createClass(GridSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return {\n        x: this.x,\n        y: this.y,\n        distance: Geometry.pointsDistance(this.x, this.y, x, y)\n      };\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return ~(this.x - x) + 1 < distance && ~(this.y - y) + 1 < distance;\n    }\n  }]);\n\n  return GridSnap;\n}(Record({\n  type: 'grid',\n  x: -1,\n  y: -1,\n  radius: 1,\n  priority: 1,\n  related: new List()\n}));\n\nexport function nearestSnap(snapElements, x, y, snapMask) {\n  var filter = {\n    'point': snapMask.get(SNAP_POINT),\n    'line': snapMask.get(SNAP_LINE),\n    'line-segment': snapMask.get(SNAP_SEGMENT),\n    'grid': snapMask.get(SNAP_GRID)\n  };\n  return snapElements.valueSeq().filter(function (el) {\n    return filter[el.type] && el.isNear(x, y, el.radius);\n  }).map(function (snap) {\n    return {\n      snap: snap,\n      point: snap.nearestPoint(x, y)\n    };\n  }).filter(function (_ref) {\n    var radius = _ref.snap.radius,\n        distance = _ref.point.distance;\n    return distance < radius;\n  }).min(function (_ref2, _ref3) {\n    var p1 = _ref2.snap.priority,\n        d1 = _ref2.point.distance;\n    var p2 = _ref3.snap.priority,\n        d2 = _ref3.point.distance;\n    return p1 === p2 ? d1 < d2 ? -1 : 1 : p1 > p2 ? -1 : 1;\n  });\n}\nexport function addPointSnap(snapElements, x, y, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new PointSnap({\n    x: x,\n    y: y,\n    radius: radius,\n    priority: priority,\n    related: related\n  }));\n}\nexport function addLineSnap(snapElements, a, b, c, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.withMutations(function (snapElements) {\n    var alreadyPresent = snapElements.some(function (lineSnap) {\n      return lineSnap.type === 'line' && a === lineSnap.a && b === lineSnap.b && c === lineSnap.c;\n    });\n    if (alreadyPresent) return snapElements;\n    var intersections = snapElements.valueSeq().filter(function (snap) {\n      return snap.type === 'line';\n    }).map(function (snap) {\n      return Geometry.twoLinesIntersection(snap.a, snap.b, snap.c, a, b, c);\n    }).filter(function (intersection) {\n      return intersection !== undefined;\n    }).forEach(function (_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y;\n      return addPointSnap(snapElements, x, y, 20, 40);\n    });\n    snapElements.push(new LineSnap({\n      a: a,\n      b: b,\n      c: c,\n      radius: radius,\n      priority: priority,\n      related: related\n    }));\n  });\n}\nexport function addLineSegmentSnap(snapElements, x1, y1, x2, y2, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new LineSegmentSnap({\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2,\n    radius: radius,\n    priority: priority,\n    related: related\n  }));\n}\nexport function addGridSnap(snapElements, x, y, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new GridSnap({\n    x: x,\n    y: y,\n    radius: radius,\n    priority: priority,\n    related: related\n  }));\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/utils/snap.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","Map","List","Record","Geometry","SNAP_POINT","SNAP_LINE","SNAP_SEGMENT","SNAP_GRID","SNAP_GUIDE","SNAP_MASK","PointSnap","_Record","getPrototypeOf","apply","nearestPoint","x","y","distance","pointsDistance","isNear","type","radius","priority","related","LineSnap","_Record2","closestPointFromLine","a","b","c","distancePointFromLine","LineSegmentSnap","_Record3","closestPointFromLineSegment","x1","y1","x2","y2","distancePointFromLineSegment","GridSnap","_Record4","nearestSnap","snapElements","snapMask","filter","get","valueSeq","el","map","snap","point","_ref","min","_ref2","_ref3","p1","d1","p2","d2","addPointSnap","push","addLineSnap","withMutations","alreadyPresent","some","lineSnap","intersections","twoLinesIntersection","intersection","undefined","forEach","_ref4","addLineSegmentSnap","addGridSnap"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BV,MAA1B,EAAkCW,KAAlC,EAAyC;AAAE,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,KAAK,CAACR,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AAAE,UAAIW,UAAU,GAAGD,KAAK,CAACV,CAAD,CAAtB;AAA2BW,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BjB,MAAAA,MAAM,CAACkB,cAAP,CAAsBhB,MAAtB,EAA8BY,UAAU,CAACP,GAAzC,EAA8CO,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUK,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBR,gBAAgB,CAACO,WAAW,CAACX,SAAb,EAAwBY,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBT,gBAAgB,CAACO,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAASG,eAAT,CAAyBC,QAAzB,EAAmCJ,WAAnC,EAAgD;AAAE,MAAI,EAAEI,QAAQ,YAAYJ,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIK,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,0BAAT,CAAoCC,IAApC,EAA0ChB,IAA1C,EAAgD;AAAE,MAAI,CAACgB,IAAL,EAAW;AAAE,UAAM,IAAIC,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOjB,IAAI,KAAK,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAjD,CAAJ,GAAmEA,IAAnE,GAA0EgB,IAAjF;AAAwF;;AAEhP,SAASE,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIN,SAAJ,CAAc,6DAA6D,OAAOM,UAAlF,CAAN;AAAsG;;AAACD,EAAAA,QAAQ,CAACrB,SAAT,GAAqBR,MAAM,CAAC+B,MAAP,CAAcD,UAAU,IAAIA,UAAU,CAACtB,SAAvC,EAAkD;AAAEwB,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEJ,QAAT;AAAmBd,MAAAA,UAAU,EAAE,KAA/B;AAAsCE,MAAAA,QAAQ,EAAE,IAAhD;AAAsDD,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIc,UAAJ,EAAgB9B,MAAM,CAACkC,cAAP,GAAwBlC,MAAM,CAACkC,cAAP,CAAsBL,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACM,SAAT,GAAqBL,UAA3F;AAAwG;;AAE9e,SAASM,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,WAAlC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AAEA,OAAO,IAAIC,UAAU,GAAG,YAAjB;AACP,OAAO,IAAIC,SAAS,GAAG,WAAhB;AACP,OAAO,IAAIC,YAAY,GAAG,cAAnB;AACP,OAAO,IAAIC,SAAS,GAAG,WAAhB;AACP,OAAO,IAAIC,UAAU,GAAG,YAAjB;AAEP,OAAO,IAAIC,SAAS,GAAG,IAAIT,GAAJ,CAAQ;AAC7BI,EAAAA,UAAU,EAAE,IADiB;AAE7BC,EAAAA,SAAS,EAAE,IAFkB;AAG7BC,EAAAA,YAAY,EAAE,IAHe;AAI7BC,EAAAA,SAAS,EAAE,KAJkB;AAK7BC,EAAAA,UAAU,EAAE;AALiB,CAAR,CAAhB;;AAQP,IAAIE,SAAS,GAAG,UAAUC,OAAV,EAAmB;AACjCnB,EAAAA,SAAS,CAACkB,SAAD,EAAYC,OAAZ,CAAT;;AAEA,WAASD,SAAT,GAAqB;AACnBxB,IAAAA,eAAe,CAAC,IAAD,EAAOwB,SAAP,CAAf;;AAEA,WAAOrB,0BAA0B,CAAC,IAAD,EAAO,CAACqB,SAAS,CAACX,SAAV,IAAuBnC,MAAM,CAACgD,cAAP,CAAsBF,SAAtB,CAAxB,EAA0DG,KAA1D,CAAgE,IAAhE,EAAsE7C,SAAtE,CAAP,CAAjC;AACD;;AAEDO,EAAAA,YAAY,CAACmC,SAAD,EAAY,CAAC;AACvBvC,IAAAA,GAAG,EAAE,cADkB;AAEvB0B,IAAAA,KAAK,EAAE,SAASiB,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,aAAO;AACLD,QAAAA,CAAC,EAAE,KAAKA,CADH;AAELC,QAAAA,CAAC,EAAE,KAAKA,CAFH;AAGLC,QAAAA,QAAQ,EAAEd,QAAQ,CAACe,cAAT,CAAwB,KAAKH,CAA7B,EAAgC,KAAKC,CAArC,EAAwCD,CAAxC,EAA2CC,CAA3C;AAHL,OAAP;AAKD;AARsB,GAAD,EASrB;AACD7C,IAAAA,GAAG,EAAE,QADJ;AAED0B,IAAAA,KAAK,EAAE,SAASsB,MAAT,CAAgBJ,CAAhB,EAAmBC,CAAnB,EAAsBC,QAAtB,EAAgC;AACrC,aAAO,EAAE,KAAKF,CAAL,GAASA,CAAX,IAAgB,CAAhB,GAAoBE,QAApB,IAAgC,EAAE,KAAKD,CAAL,GAASA,CAAX,IAAgB,CAAhB,GAAoBC,QAA3D;AACD;AAJA,GATqB,CAAZ,CAAZ;;AAgBA,SAAOP,SAAP;AACD,CA1Be,CA0BdR,MAAM,CAAC;AACPkB,EAAAA,IAAI,EAAE,OADC;AAEPL,EAAAA,CAAC,EAAE,CAAC,CAFG;AAEAC,EAAAA,CAAC,EAAE,CAAC,CAFJ;AAGPK,EAAAA,MAAM,EAAE,CAHD;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIPC,EAAAA,OAAO,EAAE,IAAItB,IAAJ;AAJF,CAAD,CA1BQ,CAAhB;;AAiCA,IAAIuB,QAAQ,GAAG,UAAUC,QAAV,EAAoB;AACjCjC,EAAAA,SAAS,CAACgC,QAAD,EAAWC,QAAX,CAAT;;AAEA,WAASD,QAAT,GAAoB;AAClBtC,IAAAA,eAAe,CAAC,IAAD,EAAOsC,QAAP,CAAf;;AAEA,WAAOnC,0BAA0B,CAAC,IAAD,EAAO,CAACmC,QAAQ,CAACzB,SAAT,IAAsBnC,MAAM,CAACgD,cAAP,CAAsBY,QAAtB,CAAvB,EAAwDX,KAAxD,CAA8D,IAA9D,EAAoE7C,SAApE,CAAP,CAAjC;AACD;;AAEDO,EAAAA,YAAY,CAACiD,QAAD,EAAW,CAAC;AACtBrD,IAAAA,GAAG,EAAE,cADiB;AAEtB0B,IAAAA,KAAK,EAAE,SAASiB,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,aAAOrD,QAAQ,CAAC,EAAD,EAAKwC,QAAQ,CAACuB,oBAAT,CAA8B,KAAKC,CAAnC,EAAsC,KAAKC,CAA3C,EAA8C,KAAKC,CAAnD,EAAsDd,CAAtD,EAAyDC,CAAzD,CAAL,EAAkE;AAC/EC,QAAAA,QAAQ,EAAEd,QAAQ,CAAC2B,qBAAT,CAA+B,KAAKH,CAApC,EAAuC,KAAKC,CAA5C,EAA+C,KAAKC,CAApD,EAAuDd,CAAvD,EAA0DC,CAA1D;AADqE,OAAlE,CAAf;AAGD;AANqB,GAAD,EAOpB;AACD7C,IAAAA,GAAG,EAAE,QADJ;AAED0B,IAAAA,KAAK,EAAE,SAASsB,MAAT,CAAgBJ,CAAhB,EAAmBC,CAAnB,EAAsBC,QAAtB,EAAgC;AACrC,aAAO,IAAP;AACD;AAJA,GAPoB,CAAX,CAAZ;;AAcA,SAAOO,QAAP;AACD,CAxBc,CAwBbtB,MAAM,CAAC;AACPkB,EAAAA,IAAI,EAAE,MADC;AAEPO,EAAAA,CAAC,EAAE,CAAC,CAFG;AAEAC,EAAAA,CAAC,EAAE,CAAC,CAFJ;AAEOC,EAAAA,CAAC,EAAE,CAAC,CAFX;AAGPR,EAAAA,MAAM,EAAE,CAHD;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIPC,EAAAA,OAAO,EAAE,IAAItB,IAAJ;AAJF,CAAD,CAxBO,CAAf;;AA+BA,IAAI8B,eAAe,GAAG,UAAUC,QAAV,EAAoB;AACxCxC,EAAAA,SAAS,CAACuC,eAAD,EAAkBC,QAAlB,CAAT;;AAEA,WAASD,eAAT,GAA2B;AACzB7C,IAAAA,eAAe,CAAC,IAAD,EAAO6C,eAAP,CAAf;;AAEA,WAAO1C,0BAA0B,CAAC,IAAD,EAAO,CAAC0C,eAAe,CAAChC,SAAhB,IAA6BnC,MAAM,CAACgD,cAAP,CAAsBmB,eAAtB,CAA9B,EAAsElB,KAAtE,CAA4E,IAA5E,EAAkF7C,SAAlF,CAAP,CAAjC;AACD;;AAEDO,EAAAA,YAAY,CAACwD,eAAD,EAAkB,CAAC;AAC7B5D,IAAAA,GAAG,EAAE,cADwB;AAE7B0B,IAAAA,KAAK,EAAE,SAASiB,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,aAAOrD,QAAQ,CAAC,EAAD,EAAKwC,QAAQ,CAAC8B,2BAAT,CAAqC,KAAKC,EAA1C,EAA8C,KAAKC,EAAnD,EAAuD,KAAKC,EAA5D,EAAgE,KAAKC,EAArE,EAAyEtB,CAAzE,EAA4EC,CAA5E,CAAL,EAAqF;AAClGC,QAAAA,QAAQ,EAAEd,QAAQ,CAACmC,4BAAT,CAAsC,KAAKJ,EAA3C,EAA+C,KAAKC,EAApD,EAAwD,KAAKC,EAA7D,EAAiE,KAAKC,EAAtE,EAA0EtB,CAA1E,EAA6EC,CAA7E;AADwF,OAArF,CAAf;AAGD;AAN4B,GAAD,EAO3B;AACD7C,IAAAA,GAAG,EAAE,QADJ;AAED0B,IAAAA,KAAK,EAAE,SAASsB,MAAT,CAAgBJ,CAAhB,EAAmBC,CAAnB,EAAsBC,QAAtB,EAAgC;AACrC,aAAO,IAAP;AACD;AAJA,GAP2B,CAAlB,CAAZ;;AAcA,SAAOc,eAAP;AACD,CAxBqB,CAwBpB7B,MAAM,CAAC;AACPkB,EAAAA,IAAI,EAAE,cADC;AAEPc,EAAAA,EAAE,EAAE,CAAC,CAFE;AAECC,EAAAA,EAAE,EAAE,CAAC,CAFN;AAESC,EAAAA,EAAE,EAAE,CAAC,CAFd;AAEiBC,EAAAA,EAAE,EAAE,CAAC,CAFtB;AAGPhB,EAAAA,MAAM,EAAE,CAHD;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIPC,EAAAA,OAAO,EAAE,IAAItB,IAAJ;AAJF,CAAD,CAxBc,CAAtB;;AA+BA,IAAIsC,QAAQ,GAAG,UAAUC,QAAV,EAAoB;AACjChD,EAAAA,SAAS,CAAC+C,QAAD,EAAWC,QAAX,CAAT;;AAEA,WAASD,QAAT,GAAoB;AAClBrD,IAAAA,eAAe,CAAC,IAAD,EAAOqD,QAAP,CAAf;;AAEA,WAAOlD,0BAA0B,CAAC,IAAD,EAAO,CAACkD,QAAQ,CAACxC,SAAT,IAAsBnC,MAAM,CAACgD,cAAP,CAAsB2B,QAAtB,CAAvB,EAAwD1B,KAAxD,CAA8D,IAA9D,EAAoE7C,SAApE,CAAP,CAAjC;AACD;;AAEDO,EAAAA,YAAY,CAACgE,QAAD,EAAW,CAAC;AACtBpE,IAAAA,GAAG,EAAE,cADiB;AAEtB0B,IAAAA,KAAK,EAAE,SAASiB,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,aAAO;AACLD,QAAAA,CAAC,EAAE,KAAKA,CADH;AAELC,QAAAA,CAAC,EAAE,KAAKA,CAFH;AAGLC,QAAAA,QAAQ,EAAEd,QAAQ,CAACe,cAAT,CAAwB,KAAKH,CAA7B,EAAgC,KAAKC,CAArC,EAAwCD,CAAxC,EAA2CC,CAA3C;AAHL,OAAP;AAKD;AARqB,GAAD,EASpB;AACD7C,IAAAA,GAAG,EAAE,QADJ;AAED0B,IAAAA,KAAK,EAAE,SAASsB,MAAT,CAAgBJ,CAAhB,EAAmBC,CAAnB,EAAsBC,QAAtB,EAAgC;AACrC,aAAO,EAAE,KAAKF,CAAL,GAASA,CAAX,IAAgB,CAAhB,GAAoBE,QAApB,IAAgC,EAAE,KAAKD,CAAL,GAASA,CAAX,IAAgB,CAAhB,GAAoBC,QAA3D;AACD;AAJA,GAToB,CAAX,CAAZ;;AAgBA,SAAOsB,QAAP;AACD,CA1Bc,CA0BbrC,MAAM,CAAC;AACPkB,EAAAA,IAAI,EAAE,MADC;AAEPL,EAAAA,CAAC,EAAE,CAAC,CAFG;AAEAC,EAAAA,CAAC,EAAE,CAAC,CAFJ;AAGPK,EAAAA,MAAM,EAAE,CAHD;AAGIC,EAAAA,QAAQ,EAAE,CAHd;AAIPC,EAAAA,OAAO,EAAE,IAAItB,IAAJ;AAJF,CAAD,CA1BO,CAAf;;AAiCA,OAAO,SAASwC,WAAT,CAAqBC,YAArB,EAAmC3B,CAAnC,EAAsCC,CAAtC,EAAyC2B,QAAzC,EAAmD;AAExD,MAAIC,MAAM,GAAG;AACX,aAASD,QAAQ,CAACE,GAAT,CAAazC,UAAb,CADE;AAEX,YAAQuC,QAAQ,CAACE,GAAT,CAAaxC,SAAb,CAFG;AAGX,oBAAgBsC,QAAQ,CAACE,GAAT,CAAavC,YAAb,CAHL;AAIX,YAAQqC,QAAQ,CAACE,GAAT,CAAatC,SAAb;AAJG,GAAb;AAOA,SAAOmC,YAAY,CAACI,QAAb,GAAwBF,MAAxB,CAA+B,UAAUG,EAAV,EAAc;AAClD,WAAOH,MAAM,CAACG,EAAE,CAAC3B,IAAJ,CAAN,IAAmB2B,EAAE,CAAC5B,MAAH,CAAUJ,CAAV,EAAaC,CAAb,EAAgB+B,EAAE,CAAC1B,MAAnB,CAA1B;AACD,GAFM,EAEJ2B,GAFI,CAEA,UAAUC,IAAV,EAAgB;AACrB,WAAO;AAAEA,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,KAAK,EAAED,IAAI,CAACnC,YAAL,CAAkBC,CAAlB,EAAqBC,CAArB;AAArB,KAAP;AACD,GAJM,EAIJ4B,MAJI,CAIG,UAAUO,IAAV,EAAgB;AACxB,QAAI9B,MAAM,GAAG8B,IAAI,CAACF,IAAL,CAAU5B,MAAvB;AAAA,QACIJ,QAAQ,GAAGkC,IAAI,CAACD,KAAL,CAAWjC,QAD1B;AAEA,WAAOA,QAAQ,GAAGI,MAAlB;AACD,GARM,EAQJ+B,GARI,CAQA,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAC7B,QAAIC,EAAE,GAAGF,KAAK,CAACJ,IAAN,CAAW3B,QAApB;AAAA,QACIkC,EAAE,GAAGH,KAAK,CAACH,KAAN,CAAYjC,QADrB;AAEA,QAAIwC,EAAE,GAAGH,KAAK,CAACL,IAAN,CAAW3B,QAApB;AAAA,QACIoC,EAAE,GAAGJ,KAAK,CAACJ,KAAN,CAAYjC,QADrB;AAEA,WAAOsC,EAAE,KAAKE,EAAP,GAAYD,EAAE,GAAGE,EAAL,GAAU,CAAC,CAAX,GAAe,CAA3B,GAA+BH,EAAE,GAAGE,EAAL,GAAU,CAAC,CAAX,GAAe,CAArD;AACD,GAdM,CAAP;AAeD;AAED,OAAO,SAASE,YAAT,CAAsBjB,YAAtB,EAAoC3B,CAApC,EAAuCC,CAAvC,EAA0CK,MAA1C,EAAkDC,QAAlD,EAA4DC,OAA5D,EAAqE;AAC1EA,EAAAA,OAAO,GAAG,IAAItB,IAAJ,CAAS,CAACsB,OAAD,CAAT,CAAV;AACA,SAAOmB,YAAY,CAACkB,IAAb,CAAkB,IAAIlD,SAAJ,CAAc;AAAEK,IAAAA,CAAC,EAAEA,CAAL;AAAQC,IAAAA,CAAC,EAAEA,CAAX;AAAcK,IAAAA,MAAM,EAAEA,MAAtB;AAA8BC,IAAAA,QAAQ,EAAEA,QAAxC;AAAkDC,IAAAA,OAAO,EAAEA;AAA3D,GAAd,CAAlB,CAAP;AACD;AAED,OAAO,SAASsC,WAAT,CAAqBnB,YAArB,EAAmCf,CAAnC,EAAsCC,CAAtC,EAAyCC,CAAzC,EAA4CR,MAA5C,EAAoDC,QAApD,EAA8DC,OAA9D,EAAuE;AAC5EA,EAAAA,OAAO,GAAG,IAAItB,IAAJ,CAAS,CAACsB,OAAD,CAAT,CAAV;AAEA,SAAOmB,YAAY,CAACoB,aAAb,CAA2B,UAAUpB,YAAV,EAAwB;AAExD,QAAIqB,cAAc,GAAGrB,YAAY,CAACsB,IAAb,CAAkB,UAAUC,QAAV,EAAoB;AACzD,aAAOA,QAAQ,CAAC7C,IAAT,KAAkB,MAAlB,IAA4BO,CAAC,KAAKsC,QAAQ,CAACtC,CAA3C,IAAgDC,CAAC,KAAKqC,QAAQ,CAACrC,CAA/D,IAAoEC,CAAC,KAAKoC,QAAQ,CAACpC,CAA1F;AACD,KAFoB,CAArB;AAGA,QAAIkC,cAAJ,EAAoB,OAAOrB,YAAP;AAEpB,QAAIwB,aAAa,GAAGxB,YAAY,CAACI,QAAb,GAAwBF,MAAxB,CAA+B,UAAUK,IAAV,EAAgB;AACjE,aAAOA,IAAI,CAAC7B,IAAL,KAAc,MAArB;AACD,KAFmB,EAEjB4B,GAFiB,CAEb,UAAUC,IAAV,EAAgB;AACrB,aAAO9C,QAAQ,CAACgE,oBAAT,CAA8BlB,IAAI,CAACtB,CAAnC,EAAsCsB,IAAI,CAACrB,CAA3C,EAA8CqB,IAAI,CAACpB,CAAnD,EAAsDF,CAAtD,EAAyDC,CAAzD,EAA4DC,CAA5D,CAAP;AACD,KAJmB,EAIjBe,MAJiB,CAIV,UAAUwB,YAAV,EAAwB;AAChC,aAAOA,YAAY,KAAKC,SAAxB;AACD,KANmB,EAMjBC,OANiB,CAMT,UAAUC,KAAV,EAAiB;AAC1B,UAAIxD,CAAC,GAAGwD,KAAK,CAACxD,CAAd;AAAA,UACIC,CAAC,GAAGuD,KAAK,CAACvD,CADd;AAEA,aAAO2C,YAAY,CAACjB,YAAD,EAAe3B,CAAf,EAAkBC,CAAlB,EAAqB,EAArB,EAAyB,EAAzB,CAAnB;AACD,KAVmB,CAApB;AAYA0B,IAAAA,YAAY,CAACkB,IAAb,CAAkB,IAAIpC,QAAJ,CAAa;AAAEG,MAAAA,CAAC,EAAEA,CAAL;AAAQC,MAAAA,CAAC,EAAEA,CAAX;AAAcC,MAAAA,CAAC,EAAEA,CAAjB;AAAoBR,MAAAA,MAAM,EAAEA,MAA5B;AAAoCC,MAAAA,QAAQ,EAAEA,QAA9C;AAAwDC,MAAAA,OAAO,EAAEA;AAAjE,KAAb,CAAlB;AACD,GApBM,CAAP;AAqBD;AAED,OAAO,SAASiD,kBAAT,CAA4B9B,YAA5B,EAA0CR,EAA1C,EAA8CC,EAA9C,EAAkDC,EAAlD,EAAsDC,EAAtD,EAA0DhB,MAA1D,EAAkEC,QAAlE,EAA4EC,OAA5E,EAAqF;AAC1FA,EAAAA,OAAO,GAAG,IAAItB,IAAJ,CAAS,CAACsB,OAAD,CAAT,CAAV;AACA,SAAOmB,YAAY,CAACkB,IAAb,CAAkB,IAAI7B,eAAJ,CAAoB;AAAEG,IAAAA,EAAE,EAAEA,EAAN;AAAUC,IAAAA,EAAE,EAAEA,EAAd;AAAkBC,IAAAA,EAAE,EAAEA,EAAtB;AAA0BC,IAAAA,EAAE,EAAEA,EAA9B;AAAkChB,IAAAA,MAAM,EAAEA,MAA1C;AAAkDC,IAAAA,QAAQ,EAAEA,QAA5D;AAAsEC,IAAAA,OAAO,EAAEA;AAA/E,GAApB,CAAlB,CAAP;AACD;AAED,OAAO,SAASkD,WAAT,CAAqB/B,YAArB,EAAmC3B,CAAnC,EAAsCC,CAAtC,EAAyCK,MAAzC,EAAiDC,QAAjD,EAA2DC,OAA3D,EAAoE;AACzEA,EAAAA,OAAO,GAAG,IAAItB,IAAJ,CAAS,CAACsB,OAAD,CAAT,CAAV;AACA,SAAOmB,YAAY,CAACkB,IAAb,CAAkB,IAAIrB,QAAJ,CAAa;AAAExB,IAAAA,CAAC,EAAEA,CAAL;AAAQC,IAAAA,CAAC,EAAEA,CAAX;AAAcK,IAAAA,MAAM,EAAEA,MAAtB;AAA8BC,IAAAA,QAAQ,EAAEA,QAAxC;AAAkDC,IAAAA,OAAO,EAAEA;AAA3D,GAAb,CAAlB,CAAP;AACD","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport { Map, List, Record } from 'immutable';\nimport * as Geometry from './geometry';\n\nexport var SNAP_POINT = 'SNAP_POINT';\nexport var SNAP_LINE = 'SNAP_LINE';\nexport var SNAP_SEGMENT = 'SNAP_SEGMENT';\nexport var SNAP_GRID = 'SNAP_GRID';\nexport var SNAP_GUIDE = 'SNAP_GUIDE';\n\nexport var SNAP_MASK = new Map({\n  SNAP_POINT: true,\n  SNAP_LINE: true,\n  SNAP_SEGMENT: true,\n  SNAP_GRID: false,\n  SNAP_GUIDE: true\n});\n\nvar PointSnap = function (_Record) {\n  _inherits(PointSnap, _Record);\n\n  function PointSnap() {\n    _classCallCheck(this, PointSnap);\n\n    return _possibleConstructorReturn(this, (PointSnap.__proto__ || Object.getPrototypeOf(PointSnap)).apply(this, arguments));\n  }\n\n  _createClass(PointSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return {\n        x: this.x,\n        y: this.y,\n        distance: Geometry.pointsDistance(this.x, this.y, x, y)\n      };\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return ~(this.x - x) + 1 < distance && ~(this.y - y) + 1 < distance;\n    }\n  }]);\n\n  return PointSnap;\n}(Record({\n  type: 'point',\n  x: -1, y: -1,\n  radius: 1, priority: 1,\n  related: new List()\n}));\n\nvar LineSnap = function (_Record2) {\n  _inherits(LineSnap, _Record2);\n\n  function LineSnap() {\n    _classCallCheck(this, LineSnap);\n\n    return _possibleConstructorReturn(this, (LineSnap.__proto__ || Object.getPrototypeOf(LineSnap)).apply(this, arguments));\n  }\n\n  _createClass(LineSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return _extends({}, Geometry.closestPointFromLine(this.a, this.b, this.c, x, y), {\n        distance: Geometry.distancePointFromLine(this.a, this.b, this.c, x, y)\n      });\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return true;\n    }\n  }]);\n\n  return LineSnap;\n}(Record({\n  type: 'line',\n  a: -1, b: -1, c: -1,\n  radius: 1, priority: 1,\n  related: new List()\n}));\n\nvar LineSegmentSnap = function (_Record3) {\n  _inherits(LineSegmentSnap, _Record3);\n\n  function LineSegmentSnap() {\n    _classCallCheck(this, LineSegmentSnap);\n\n    return _possibleConstructorReturn(this, (LineSegmentSnap.__proto__ || Object.getPrototypeOf(LineSegmentSnap)).apply(this, arguments));\n  }\n\n  _createClass(LineSegmentSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return _extends({}, Geometry.closestPointFromLineSegment(this.x1, this.y1, this.x2, this.y2, x, y), {\n        distance: Geometry.distancePointFromLineSegment(this.x1, this.y1, this.x2, this.y2, x, y)\n      });\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return true;\n    }\n  }]);\n\n  return LineSegmentSnap;\n}(Record({\n  type: 'line-segment',\n  x1: -1, y1: -1, x2: -1, y2: -1,\n  radius: 1, priority: 1,\n  related: new List()\n}));\n\nvar GridSnap = function (_Record4) {\n  _inherits(GridSnap, _Record4);\n\n  function GridSnap() {\n    _classCallCheck(this, GridSnap);\n\n    return _possibleConstructorReturn(this, (GridSnap.__proto__ || Object.getPrototypeOf(GridSnap)).apply(this, arguments));\n  }\n\n  _createClass(GridSnap, [{\n    key: 'nearestPoint',\n    value: function nearestPoint(x, y) {\n      return {\n        x: this.x,\n        y: this.y,\n        distance: Geometry.pointsDistance(this.x, this.y, x, y)\n      };\n    }\n  }, {\n    key: 'isNear',\n    value: function isNear(x, y, distance) {\n      return ~(this.x - x) + 1 < distance && ~(this.y - y) + 1 < distance;\n    }\n  }]);\n\n  return GridSnap;\n}(Record({\n  type: 'grid',\n  x: -1, y: -1,\n  radius: 1, priority: 1,\n  related: new List()\n}));\n\nexport function nearestSnap(snapElements, x, y, snapMask) {\n\n  var filter = {\n    'point': snapMask.get(SNAP_POINT),\n    'line': snapMask.get(SNAP_LINE),\n    'line-segment': snapMask.get(SNAP_SEGMENT),\n    'grid': snapMask.get(SNAP_GRID)\n  };\n\n  return snapElements.valueSeq().filter(function (el) {\n    return filter[el.type] && el.isNear(x, y, el.radius);\n  }).map(function (snap) {\n    return { snap: snap, point: snap.nearestPoint(x, y) };\n  }).filter(function (_ref) {\n    var radius = _ref.snap.radius,\n        distance = _ref.point.distance;\n    return distance < radius;\n  }).min(function (_ref2, _ref3) {\n    var p1 = _ref2.snap.priority,\n        d1 = _ref2.point.distance;\n    var p2 = _ref3.snap.priority,\n        d2 = _ref3.point.distance;\n    return p1 === p2 ? d1 < d2 ? -1 : 1 : p1 > p2 ? -1 : 1;\n  });\n}\n\nexport function addPointSnap(snapElements, x, y, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new PointSnap({ x: x, y: y, radius: radius, priority: priority, related: related }));\n}\n\nexport function addLineSnap(snapElements, a, b, c, radius, priority, related) {\n  related = new List([related]);\n\n  return snapElements.withMutations(function (snapElements) {\n\n    var alreadyPresent = snapElements.some(function (lineSnap) {\n      return lineSnap.type === 'line' && a === lineSnap.a && b === lineSnap.b && c === lineSnap.c;\n    });\n    if (alreadyPresent) return snapElements;\n\n    var intersections = snapElements.valueSeq().filter(function (snap) {\n      return snap.type === 'line';\n    }).map(function (snap) {\n      return Geometry.twoLinesIntersection(snap.a, snap.b, snap.c, a, b, c);\n    }).filter(function (intersection) {\n      return intersection !== undefined;\n    }).forEach(function (_ref4) {\n      var x = _ref4.x,\n          y = _ref4.y;\n      return addPointSnap(snapElements, x, y, 20, 40);\n    });\n\n    snapElements.push(new LineSnap({ a: a, b: b, c: c, radius: radius, priority: priority, related: related }));\n  });\n}\n\nexport function addLineSegmentSnap(snapElements, x1, y1, x2, y2, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new LineSegmentSnap({ x1: x1, y1: y1, x2: x2, y2: y2, radius: radius, priority: priority, related: related }));\n}\n\nexport function addGridSnap(snapElements, x, y, radius, priority, related) {\n  related = new List([related]);\n  return snapElements.push(new GridSnap({ x: x, y: y, radius: radius, priority: priority, related: related }));\n}"]},"metadata":{},"sourceType":"module"}