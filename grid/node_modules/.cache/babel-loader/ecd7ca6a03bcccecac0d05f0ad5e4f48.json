{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n/** @description Determines the distance between two points\n *  @param {number} x0 Vertex 0 x\n *  @param {number} y0 Vertex 0 y\n *  @param {number} x1 Vertex 1 x\n *  @param {number} y1 Vertex 1 y\n *  @return {number}\n */\n\n\nimport { toFixedFloat, fAbs } from './math.js';\nimport { EPSILON } from '../constants';\nexport function compareVertices(v0, v1) {\n  return v0.x === v1.x ? v0.y - v1.y : v0.x - v1.x;\n}\nexport function minVertex(v0, v1) {\n  return compareVertices(v0, v1) > 0 ? v1 : v0;\n}\nexport function maxVertex(v0, v1) {\n  return compareVertices(v0, v1) > 0 ? v0 : v1;\n}\nexport function orderVertices(vertices) {\n  return vertices.sort(compareVertices);\n}\nexport function pointsDistance(x0, y0, x1, y1) {\n  var diff_x = x0 - x1;\n  var diff_y = y0 - y1;\n  return Math.sqrt(diff_x * diff_x + diff_y * diff_y);\n}\nexport function verticesDistance(v1, v2) {\n  var x0 = v1.x,\n      y0 = v1.y;\n  var x1 = v2.x,\n      y1 = v2.y;\n  return pointsDistance(x0, y0, x1, y1);\n}\nexport function horizontalLine(y) {\n  return {\n    a: 0,\n    b: 1,\n    c: -y\n  };\n}\nexport function verticalLine(x) {\n  return {\n    a: 1,\n    b: 0,\n    c: -x\n  };\n}\nexport function linePassingThroughTwoPoints(x1, y1, x2, y2) {\n  if (x1 === x2 && y1 == y2) throw new Error('Geometry error');\n  if (x1 === x2) return verticalLine(x);\n  if (y1 === y2) return horizontalLine(y1);\n  return {\n    a: y1 - y2,\n    b: x2 - x1,\n    c: y2 * x1 - x2 * y1\n  };\n}\nexport function distancePointFromLine(a, b, c, x, y) {\n  //https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n  return fAbs(a * x + b * y + c) / Math.sqrt(a * a + b * b);\n}\nexport function closestPointFromLine(a, b, c, x, y) {\n  //https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n  var denom = a * a + b * b;\n  return {\n    x: (b * (b * x - a * y) - a * c) / denom,\n    y: (a * -b * x + a * y - b * c) / denom\n  };\n}\n/** @description Get point of intersection between two lines using ax+by+c line's equation\n *  @param {number} a x coefficent of first line\n *  @param {number} b y coefficent of first line\n *  @param {number} c costant of first line\n *  @param {number} j x coefficent of second line\n *  @param {number} k y coefficent of second line\n *  @param {number} l costant of second line\n *  @return {object} {x,y} point's coordinates\n */\n\nexport function twoLinesIntersection(a, b, c, j, k, l) {\n  var angularCoefficientsDiff = b * j - a * k;\n  if (angularCoefficientsDiff === 0) return undefined; //no intersection\n\n  var y = (a * l - c * j) / angularCoefficientsDiff;\n  var x = (c * k - b * l) / angularCoefficientsDiff;\n  return {\n    x: x,\n    y: y\n  };\n}\nexport function twoLineSegmentsIntersection(p1, p2, p3, p4) {\n  //https://github.com/psalaets/line-intersect/blob/master/lib/check-intersection.js\n  var x1 = p1.x,\n      y1 = p1.y;\n  var x2 = p2.x,\n      y2 = p2.y;\n  var x3 = p3.x,\n      y3 = p3.y;\n  var x4 = p4.x,\n      y4 = p4.y;\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (fAbs(denom) <= EPSILON) {\n    if (fAbs(numA) <= EPSILON && fAbs(numB) <= EPSILON) {\n      var comparator = function comparator(pa, pb) {\n        return pa.x === pb.x ? pa.y - pb.y : pa.x - pb.x;\n      };\n\n      var line0 = [p1, p2].sort(comparator);\n      var line1 = [p3.toJS(), p4.toJS()].sort(comparator);\n\n      var _sort = [line0, line1].sort(function (lineA, lineB) {\n        return comparator(lineA[0], lineB[0]);\n      }),\n          _sort2 = _slicedToArray(_sort, 2),\n          lineSX = _sort2[0],\n          lineDX = _sort2[1];\n\n      if (lineSX[1].x === lineDX[0].x) {\n        return {\n          type: lineDX[0].y <= lineSX[1].y ? 'colinear' : 'none'\n        };\n      } else {\n        return {\n          type: lineDX[0].x <= lineSX[1].x ? 'colinear' : 'none'\n        };\n      }\n    }\n\n    return {\n      type: 'parallel'\n    };\n  }\n\n  var uA = numA / denom;\n  var uB = numB / denom;\n\n  if (uA >= 0 - EPSILON && uA <= 1 + EPSILON && uB >= 0 - EPSILON && uB <= 1 + EPSILON) {\n    var point = {\n      x: x1 + uA * (x2 - x1),\n      y: y1 + uA * (y2 - y1)\n    };\n    return {\n      type: 'intersecting',\n      point: point\n    };\n  }\n\n  return {\n    type: 'none'\n  };\n}\nexport function distancePointFromLineSegment(x1, y1, x2, y2, xp, yp) {\n  //http://stackoverflow.com/a/6853926/1398836\n  var A = xp - x1;\n  var B = yp - y1;\n  var C = x2 - x1;\n  var D = y2 - y1;\n  var dot = A * C + B * D;\n  var len_sq = C * C + D * D;\n  var param = -1;\n  if (len_sq != 0) //in case of 0 length line\n    param = dot / len_sq;\n  var xx = void 0,\n      yy = void 0;\n\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  var dx = xp - xx;\n  var dy = yp - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n/**\n *\n * @param x1 {number} x for first vertex of the segment\n * @param y1 {number} y for first vertex of the segment\n * @param x2 {number} x for second vertex of the segment\n * @param y2 {number} y for second vertex of the segment\n * @param xp {number} x for point we want to verify\n * @param yp {number} y for point we want to verify\n * @param maxDistance {number} the epsilon value used for comparisons\n * @returns {boolean} true if the point lies on the line segment false otherwise\n */\n\nexport function isPointOnLineSegment(x1, y1, x2, y2, xp, yp) {\n  var maxDistance = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : EPSILON;\n  return distancePointFromLineSegment(x1, y1, x2, y2, xp, yp) <= maxDistance;\n}\nexport function closestPointFromLineSegment(x1, y1, x2, y2, xp, yp) {\n  if (x1 === x2) return {\n    x: x1,\n    y: yp\n  };\n  if (y1 === y2) return {\n    x: xp,\n    y: y1\n  };\n  var m = (y2 - y1) / (x2 - x1);\n  var q = y1 - m * x1;\n  var mi = -1 / m;\n  var qi = yp - mi * xp;\n  var x = (qi - q) / (m - mi);\n  var y = m * x + q;\n  return {\n    x: x,\n    y: y\n  };\n}\nexport function pointPositionOnLineSegment(x1, y1, x2, y2, xp, yp) {\n  var length = pointsDistance(x1, y1, x2, y2);\n  var distance = pointsDistance(x1, y1, xp, yp);\n  var offset = distance / length;\n  if (x1 > x2) offset = mapRange(offset, 0, 1, 1, 0);\n  return offset;\n}\nexport function mapRange(value, low1, high1, low2, high2) {\n  return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\nexport function angleBetweenTwoPointsAndOrigin(x1, y1, x2, y2) {\n  return -Math.atan2(y1 - y2, x2 - x1) * 180 / Math.PI;\n}\nexport function angleBetweenTwoPoints(x1, y1, x2, y2) {\n  return Math.atan2(y2 - y1, x2 - x1);\n}\nexport function absAngleBetweenTwoPoints(x1, y1, x2, y2) {\n  return Math.atan2(Math.abs(y2 - y1), Math.abs(x2 - x1));\n}\nexport function samePoints(_ref, _ref2) {\n  var x1 = _ref.x,\n      y1 = _ref.y;\n  var x2 = _ref2.x,\n      y2 = _ref2.y;\n  return fAbs(x1 - x2) <= EPSILON && fAbs(y1 - y2) <= EPSILON;\n}\n/** @description Extend line based on coordinates and new line length\n *  @param {number} x1 Vertex 1 x\n *  @param {number} y1 Vertex 1 y\n *  @param {number} x2 Vertex 2 x\n *  @param {number} y2 Vertex 2 y\n *  @param {number} newDistance New line length\n *  @return {object}\n */\n\nexport function extendLine(x1, y1, x2, y2, newDistance) {\n  var precision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 6;\n  var rad = angleBetweenTwoPoints(x1, y1, x2, y2);\n  return {\n    x: toFixedFloat(x1 + Math.cos(rad) * newDistance, precision),\n    y: toFixedFloat(y1 + Math.sin(rad) * newDistance, precision)\n  };\n}\nexport function roundVertex(vertex) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  vertex.set('x', toFixedFloat(vertex.get('x'), precision));\n  vertex.set('y', toFixedFloat(vertex.get('y'), precision));\n  return vertex;\n} //https://github.com/MartyWallace/PolyK\n\nexport function ContainsPoint(polygon, pointX, pointY) {\n  var n = polygon.length >> 1;\n  var ax = void 0,\n      lup = void 0;\n  var ay = polygon[2 * n - 3] - pointY;\n  var bx = polygon[2 * n - 2] - pointX;\n  var by = polygon[2 * n - 1] - pointY;\n  if (bx === 0 && by === 0) return false; // point on edge\n  // let lup = by > ay;\n\n  for (var ii = 0; ii < n; ii++) {\n    ax = bx;\n    ay = by;\n    bx = polygon[2 * ii] - pointX;\n    by = polygon[2 * ii + 1] - pointY;\n    if (bx === 0 && by === 0) return false; // point on edge\n\n    if (ay === by) continue;\n    lup = by > ay;\n  }\n\n  var depth = 0;\n\n  for (var i = 0; i < n; i++) {\n    ax = bx;\n    ay = by;\n    bx = polygon[2 * i] - pointX;\n    by = polygon[2 * i + 1] - pointY;\n    if (ay < 0 && by < 0) continue; // both 'up' or both 'down'\n\n    if (ay > 0 && by > 0) continue; // both 'up' or both 'down'\n\n    if (ax < 0 && bx < 0) continue; // both points on the left\n\n    if (ay === by && Math.min(ax, bx) < 0) return true;\n    if (ay === by) continue;\n    var lx = ax + (bx - ax) * -ay / (by - ay);\n    if (lx === 0) return false; // point on edge\n\n    if (lx > 0) depth++;\n    if (ay === 0 && lup && by > ay) depth--; // hit vertex, both up\n\n    if (ay === 0 && !lup && by < ay) depth--; // hit vertex, both down\n\n    lup = by > ay;\n  }\n\n  return (depth & 1) === 1;\n}\nexport function cosWithThreshold(alpha, threshold) {\n  var cos = Math.cos(alpha);\n  return cos < threshold ? 0 : cos;\n}\nexport function sinWithThreshold(alpha, threshold) {\n  var sin = Math.sin(alpha);\n  return sin < threshold ? 0 : sin;\n}\nexport function midPoint(x1, y1, x2, y2) {\n  return {\n    x: (x1 + x2) / 2,\n    y: (y1 + y2) / 2\n  };\n}\nexport function verticesMidPoint(verticesArray) {\n  var res = verticesArray.reduce(function (incr, vertex) {\n    return {\n      x: incr.x + vertex.x,\n      y: incr.y + vertex.y\n    };\n  }, {\n    x: 0,\n    y: 0\n  });\n  return {\n    x: res.x / verticesArray.length,\n    y: res.y / verticesArray.length\n  };\n}\nexport function rotatePointAroundPoint(px, py, ox, oy, theta) {\n  var thetaRad = theta * Math.PI / 180;\n  var cos = Math.cos(thetaRad);\n  var sin = Math.sin(thetaRad);\n  var deltaX = px - ox;\n  var deltaY = py - oy;\n  return {\n    x: cos * deltaX - sin * deltaY + ox,\n    y: sin * deltaX + cos * deltaY + oy\n  };\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/utils/geometry.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","toFixedFloat","fAbs","EPSILON","compareVertices","v0","v1","x","y","minVertex","maxVertex","orderVertices","vertices","sort","pointsDistance","x0","y0","x1","y1","diff_x","diff_y","Math","sqrt","verticesDistance","v2","horizontalLine","a","b","c","verticalLine","linePassingThroughTwoPoints","x2","y2","Error","distancePointFromLine","closestPointFromLine","denom","twoLinesIntersection","j","k","l","angularCoefficientsDiff","twoLineSegmentsIntersection","p1","p2","p3","p4","x3","y3","x4","y4","numA","numB","comparator","pa","pb","line0","line1","toJS","_sort","lineA","lineB","_sort2","lineSX","lineDX","type","uA","uB","point","distancePointFromLineSegment","xp","yp","A","B","C","D","dot","len_sq","param","xx","yy","dx","dy","isPointOnLineSegment","maxDistance","arguments","closestPointFromLineSegment","m","q","mi","qi","pointPositionOnLineSegment","distance","offset","mapRange","low1","high1","low2","high2","angleBetweenTwoPointsAndOrigin","atan2","PI","angleBetweenTwoPoints","absAngleBetweenTwoPoints","abs","samePoints","_ref","_ref2","extendLine","newDistance","precision","rad","cos","sin","roundVertex","vertex","set","get","ContainsPoint","polygon","pointX","pointY","n","ax","lup","ay","bx","by","ii","depth","min","lx","cosWithThreshold","alpha","threshold","sinWithThreshold","midPoint","verticesMidPoint","verticesArray","res","reduce","incr","rotatePointAroundPoint","px","py","ox","oy","theta","thetaRad","deltaX","deltaY"],"mappings":"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","sourcesContent":["var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\n/** @description Determines the distance between two points\n *  @param {number} x0 Vertex 0 x\n *  @param {number} y0 Vertex 0 y\n *  @param {number} x1 Vertex 1 x\n *  @param {number} y1 Vertex 1 y\n *  @return {number}\n */\nimport { toFixedFloat, fAbs } from './math.js';\nimport { EPSILON } from '../constants';\n\nexport function compareVertices(v0, v1) {\n  return v0.x === v1.x ? v0.y - v1.y : v0.x - v1.x;\n}\n\nexport function minVertex(v0, v1) {\n  return compareVertices(v0, v1) > 0 ? v1 : v0;\n}\n\nexport function maxVertex(v0, v1) {\n  return compareVertices(v0, v1) > 0 ? v0 : v1;\n}\n\nexport function orderVertices(vertices) {\n  return vertices.sort(compareVertices);\n}\n\nexport function pointsDistance(x0, y0, x1, y1) {\n  var diff_x = x0 - x1;\n  var diff_y = y0 - y1;\n\n  return Math.sqrt(diff_x * diff_x + diff_y * diff_y);\n}\n\nexport function verticesDistance(v1, v2) {\n  var x0 = v1.x,\n      y0 = v1.y;\n  var x1 = v2.x,\n      y1 = v2.y;\n\n\n  return pointsDistance(x0, y0, x1, y1);\n}\n\nexport function horizontalLine(y) {\n  return { a: 0, b: 1, c: -y };\n}\n\nexport function verticalLine(x) {\n  return { a: 1, b: 0, c: -x };\n}\n\nexport function linePassingThroughTwoPoints(x1, y1, x2, y2) {\n  if (x1 === x2 && y1 == y2) throw new Error('Geometry error');\n  if (x1 === x2) return verticalLine(x);\n  if (y1 === y2) return horizontalLine(y1);\n\n  return {\n    a: y1 - y2,\n    b: x2 - x1,\n    c: y2 * x1 - x2 * y1\n  };\n}\n\nexport function distancePointFromLine(a, b, c, x, y) {\n  //https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n  return fAbs(a * x + b * y + c) / Math.sqrt(a * a + b * b);\n}\n\nexport function closestPointFromLine(a, b, c, x, y) {\n  //https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n  var denom = a * a + b * b;\n  return {\n    x: (b * (b * x - a * y) - a * c) / denom,\n    y: (a * -b * x + a * y - b * c) / denom\n  };\n}\n\n/** @description Get point of intersection between two lines using ax+by+c line's equation\n *  @param {number} a x coefficent of first line\n *  @param {number} b y coefficent of first line\n *  @param {number} c costant of first line\n *  @param {number} j x coefficent of second line\n *  @param {number} k y coefficent of second line\n *  @param {number} l costant of second line\n *  @return {object} {x,y} point's coordinates\n */\nexport function twoLinesIntersection(a, b, c, j, k, l) {\n  var angularCoefficientsDiff = b * j - a * k;\n\n  if (angularCoefficientsDiff === 0) return undefined; //no intersection\n\n  var y = (a * l - c * j) / angularCoefficientsDiff;\n  var x = (c * k - b * l) / angularCoefficientsDiff;\n  return { x: x, y: y };\n}\n\nexport function twoLineSegmentsIntersection(p1, p2, p3, p4) {\n  //https://github.com/psalaets/line-intersect/blob/master/lib/check-intersection.js\n\n  var x1 = p1.x,\n      y1 = p1.y;\n  var x2 = p2.x,\n      y2 = p2.y;\n  var x3 = p3.x,\n      y3 = p3.y;\n  var x4 = p4.x,\n      y4 = p4.y;\n\n\n  var denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\n  var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n\n  if (fAbs(denom) <= EPSILON) {\n    if (fAbs(numA) <= EPSILON && fAbs(numB) <= EPSILON) {\n\n      var comparator = function comparator(pa, pb) {\n        return pa.x === pb.x ? pa.y - pb.y : pa.x - pb.x;\n      };\n      var line0 = [p1, p2].sort(comparator);\n      var line1 = [p3.toJS(), p4.toJS()].sort(comparator);\n\n      var _sort = [line0, line1].sort(function (lineA, lineB) {\n        return comparator(lineA[0], lineB[0]);\n      }),\n          _sort2 = _slicedToArray(_sort, 2),\n          lineSX = _sort2[0],\n          lineDX = _sort2[1];\n\n      if (lineSX[1].x === lineDX[0].x) {\n        return { type: lineDX[0].y <= lineSX[1].y ? 'colinear' : 'none' };\n      } else {\n        return { type: lineDX[0].x <= lineSX[1].x ? 'colinear' : 'none' };\n      }\n    }\n    return { type: 'parallel' };\n  }\n\n  var uA = numA / denom;\n  var uB = numB / denom;\n\n  if (uA >= 0 - EPSILON && uA <= 1 + EPSILON && uB >= 0 - EPSILON && uB <= 1 + EPSILON) {\n    var point = {\n      x: x1 + uA * (x2 - x1),\n      y: y1 + uA * (y2 - y1)\n    };\n    return { type: 'intersecting', point: point };\n  }\n\n  return { type: 'none' };\n}\n\nexport function distancePointFromLineSegment(x1, y1, x2, y2, xp, yp) {\n  //http://stackoverflow.com/a/6853926/1398836\n\n  var A = xp - x1;\n  var B = yp - y1;\n  var C = x2 - x1;\n  var D = y2 - y1;\n\n  var dot = A * C + B * D;\n  var len_sq = C * C + D * D;\n  var param = -1;\n  if (len_sq != 0) //in case of 0 length line\n    param = dot / len_sq;\n\n  var xx = void 0,\n      yy = void 0;\n\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  var dx = xp - xx;\n  var dy = yp - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\n/**\n *\n * @param x1 {number} x for first vertex of the segment\n * @param y1 {number} y for first vertex of the segment\n * @param x2 {number} x for second vertex of the segment\n * @param y2 {number} y for second vertex of the segment\n * @param xp {number} x for point we want to verify\n * @param yp {number} y for point we want to verify\n * @param maxDistance {number} the epsilon value used for comparisons\n * @returns {boolean} true if the point lies on the line segment false otherwise\n */\nexport function isPointOnLineSegment(x1, y1, x2, y2, xp, yp) {\n  var maxDistance = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : EPSILON;\n\n  return distancePointFromLineSegment(x1, y1, x2, y2, xp, yp) <= maxDistance;\n}\n\nexport function closestPointFromLineSegment(x1, y1, x2, y2, xp, yp) {\n  if (x1 === x2) return { x: x1, y: yp };\n  if (y1 === y2) return { x: xp, y: y1 };\n\n  var m = (y2 - y1) / (x2 - x1);\n  var q = y1 - m * x1;\n\n  var mi = -1 / m;\n  var qi = yp - mi * xp;\n\n  var x = (qi - q) / (m - mi);\n  var y = m * x + q;\n\n  return { x: x, y: y };\n}\n\nexport function pointPositionOnLineSegment(x1, y1, x2, y2, xp, yp) {\n  var length = pointsDistance(x1, y1, x2, y2);\n  var distance = pointsDistance(x1, y1, xp, yp);\n\n  var offset = distance / length;\n  if (x1 > x2) offset = mapRange(offset, 0, 1, 1, 0);\n\n  return offset;\n}\n\nexport function mapRange(value, low1, high1, low2, high2) {\n  return low2 + (high2 - low2) * (value - low1) / (high1 - low1);\n}\n\nexport function angleBetweenTwoPointsAndOrigin(x1, y1, x2, y2) {\n  return -Math.atan2(y1 - y2, x2 - x1) * 180 / Math.PI;\n}\n\nexport function angleBetweenTwoPoints(x1, y1, x2, y2) {\n  return Math.atan2(y2 - y1, x2 - x1);\n}\n\nexport function absAngleBetweenTwoPoints(x1, y1, x2, y2) {\n  return Math.atan2(Math.abs(y2 - y1), Math.abs(x2 - x1));\n}\n\nexport function samePoints(_ref, _ref2) {\n  var x1 = _ref.x,\n      y1 = _ref.y;\n  var x2 = _ref2.x,\n      y2 = _ref2.y;\n\n  return fAbs(x1 - x2) <= EPSILON && fAbs(y1 - y2) <= EPSILON;\n}\n\n/** @description Extend line based on coordinates and new line length\n *  @param {number} x1 Vertex 1 x\n *  @param {number} y1 Vertex 1 y\n *  @param {number} x2 Vertex 2 x\n *  @param {number} y2 Vertex 2 y\n *  @param {number} newDistance New line length\n *  @return {object}\n */\nexport function extendLine(x1, y1, x2, y2, newDistance) {\n  var precision = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 6;\n\n  var rad = angleBetweenTwoPoints(x1, y1, x2, y2);\n\n  return {\n    x: toFixedFloat(x1 + Math.cos(rad) * newDistance, precision),\n    y: toFixedFloat(y1 + Math.sin(rad) * newDistance, precision)\n  };\n}\n\nexport function roundVertex(vertex) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n\n  vertex.set('x', toFixedFloat(vertex.get('x'), precision));\n  vertex.set('y', toFixedFloat(vertex.get('y'), precision));\n\n  return vertex;\n}\n\n//https://github.com/MartyWallace/PolyK\nexport function ContainsPoint(polygon, pointX, pointY) {\n  var n = polygon.length >> 1;\n\n  var ax = void 0,\n      lup = void 0;\n  var ay = polygon[2 * n - 3] - pointY;\n  var bx = polygon[2 * n - 2] - pointX;\n  var by = polygon[2 * n - 1] - pointY;\n\n  if (bx === 0 && by === 0) return false; // point on edge\n\n  // let lup = by > ay;\n  for (var ii = 0; ii < n; ii++) {\n    ax = bx;\n    ay = by;\n    bx = polygon[2 * ii] - pointX;\n    by = polygon[2 * ii + 1] - pointY;\n    if (bx === 0 && by === 0) return false; // point on edge\n    if (ay === by) continue;\n    lup = by > ay;\n  }\n\n  var depth = 0;\n  for (var i = 0; i < n; i++) {\n    ax = bx;\n    ay = by;\n    bx = polygon[2 * i] - pointX;\n    by = polygon[2 * i + 1] - pointY;\n    if (ay < 0 && by < 0) continue; // both 'up' or both 'down'\n    if (ay > 0 && by > 0) continue; // both 'up' or both 'down'\n    if (ax < 0 && bx < 0) continue; // both points on the left\n\n    if (ay === by && Math.min(ax, bx) < 0) return true;\n    if (ay === by) continue;\n\n    var lx = ax + (bx - ax) * -ay / (by - ay);\n    if (lx === 0) return false; // point on edge\n    if (lx > 0) depth++;\n    if (ay === 0 && lup && by > ay) depth--; // hit vertex, both up\n    if (ay === 0 && !lup && by < ay) depth--; // hit vertex, both down\n    lup = by > ay;\n  }\n  return (depth & 1) === 1;\n}\n\nexport function cosWithThreshold(alpha, threshold) {\n  var cos = Math.cos(alpha);\n  return cos < threshold ? 0 : cos;\n}\n\nexport function sinWithThreshold(alpha, threshold) {\n  var sin = Math.sin(alpha);\n  return sin < threshold ? 0 : sin;\n}\n\nexport function midPoint(x1, y1, x2, y2) {\n  return { x: (x1 + x2) / 2, y: (y1 + y2) / 2 };\n}\n\nexport function verticesMidPoint(verticesArray) {\n  var res = verticesArray.reduce(function (incr, vertex) {\n    return { x: incr.x + vertex.x, y: incr.y + vertex.y };\n  }, { x: 0, y: 0 });\n  return { x: res.x / verticesArray.length, y: res.y / verticesArray.length };\n}\n\nexport function rotatePointAroundPoint(px, py, ox, oy, theta) {\n\n  var thetaRad = theta * Math.PI / 180;\n\n  var cos = Math.cos(thetaRad);\n  var sin = Math.sin(thetaRad);\n\n  var deltaX = px - ox;\n  var deltaY = py - oy;\n\n  return {\n    x: cos * deltaX - sin * deltaY + ox,\n    y: sin * deltaX + cos * deltaY + oy\n  };\n}"]},"metadata":{},"sourceType":"module"}