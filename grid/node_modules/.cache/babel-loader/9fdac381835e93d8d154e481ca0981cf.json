{"ast":null,"code":"var _jsxFileName = \"/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/window/planner-element.jsx\";\nimport React from 'react';\nimport * as Three from 'three';\nimport { loadObjWithMaterial } from '../../utils/load-obj';\nimport path from 'path';\nlet cached3DWindow = null;\nexport default {\n  name: \"window\",\n  prototype: \"holes\",\n  info: {\n    title: \"window\",\n    tag: ['window'],\n    description: \"Window\",\n    image: require('./window.png')\n  },\n  properties: {\n    width: {\n      label: \"Width\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90\n      }\n    },\n    height: {\n      label: \"Height\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 100\n      }\n    },\n    altitude: {\n      label: \"Altitude\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90\n      }\n    },\n    thickness: {\n      label: \"Thickness\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 10\n      }\n    }\n  },\n  render2D: function (element, layer, scene) {\n    const STYLE_HOLE_BASE = {\n      stroke: \"#000\",\n      strokeWidth: \"3px\",\n      fill: \"#000\"\n    };\n    const STYLE_HOLE_SELECTED = {\n      stroke: \"#0096fd\",\n      strokeWidth: \"3px\",\n      fill: \"#0096fd\",\n      cursor: \"move\"\n    }; //let line = layer.lines.get(hole.line);\n    //let epsilon = line.properties.get('thickness') / 2;\n\n    let epsilon = 3;\n    let holeWidth = element.properties.get('width').get('length');\n    let holePath = `M${0} ${-epsilon}  L${holeWidth} ${-epsilon}  L${holeWidth} ${epsilon}  L${0} ${epsilon}  z`;\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let length = element.properties.get('width').get('length');\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${-length / 2}, 0)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      key: \"1\",\n      d: holePath,\n      style: holeStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      key: \"2\",\n      x1: holeWidth / 2,\n      y1: -10 - epsilon,\n      x2: holeWidth / 2,\n      y2: 10 + epsilon,\n      style: holeStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }));\n  },\n  render3D: function (element, layer, scene) {\n    let onLoadItem = object => {\n      let boundingBox = new Three.Box3().setFromObject(object);\n      let initialWidth = boundingBox.max.x - boundingBox.min.x;\n      let initialHeight = boundingBox.max.y - boundingBox.min.y;\n      let initialThickness = boundingBox.max.z - boundingBox.min.z;\n\n      if (element.selected) {\n        let box = new Three.BoxHelper(object, 0x99c3fb);\n        box.material.linewidth = 2;\n        box.material.depthTest = false;\n        box.renderOrder = 1000;\n        object.add(box);\n      }\n\n      let width = element.properties.get('width').get('length');\n      let height = element.properties.get('height').get('length');\n      let thickness = element.properties.get('thickness').get('length');\n      object.scale.set(width / initialWidth, height / initialHeight, thickness / initialThickness);\n      return object;\n    };\n\n    if (cached3DWindow) {\n      return Promise.resolve(onLoadItem(cached3DWindow.clone()));\n    }\n\n    let mtl = require('./window.mtl');\n\n    let obj = require('./window.obj');\n\n    let img = require('./texture.png');\n\n    return loadObjWithMaterial(mtl, obj, path.dirname(img) + '/').then(object => {\n      cached3DWindow = object;\n      return onLoadItem(cached3DWindow.clone());\n    });\n  }\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/window/planner-element.jsx"],"names":["React","Three","loadObjWithMaterial","path","cached3DWindow","name","prototype","info","title","tag","description","image","require","properties","width","label","type","defaultValue","length","height","altitude","thickness","render2D","element","layer","scene","STYLE_HOLE_BASE","stroke","strokeWidth","fill","STYLE_HOLE_SELECTED","cursor","epsilon","holeWidth","get","holePath","holeStyle","selected","render3D","onLoadItem","object","boundingBox","Box3","setFromObject","initialWidth","max","x","min","initialHeight","y","initialThickness","z","box","BoxHelper","material","linewidth","depthTest","renderOrder","add","scale","set","Promise","resolve","clone","mtl","obj","img","dirname","then"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Three from 'three';\nimport {loadObjWithMaterial} from '../../utils/load-obj';\nimport path from 'path';\n\nlet cached3DWindow = null;\n\nexport default {\n  name: \"window\",\n  prototype: \"holes\",\n\n  info: {\n    title: \"window\",\n    tag: ['window'],\n    description: \"Window\",\n    image: require('./window.png')\n  },\n\n  properties: {\n    width: {\n      label: \"Width\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90\n      }\n    },\n    height: {\n      label: \"Height\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 100\n      }\n    },\n    altitude: {\n      label: \"Altitude\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90\n      }\n    },\n    thickness: {\n      label: \"Thickness\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 10\n      }\n    }\n  },\n\n  render2D: function (element, layer, scene) {\n    const STYLE_HOLE_BASE = {stroke: \"#000\", strokeWidth: \"3px\", fill: \"#000\"};\n    const STYLE_HOLE_SELECTED = {stroke: \"#0096fd\", strokeWidth: \"3px\", fill: \"#0096fd\", cursor: \"move\"};\n    //let line = layer.lines.get(hole.line);\n    //let epsilon = line.properties.get('thickness') / 2;\n\n    let epsilon = 3;\n\n    let holeWidth = element.properties.get('width').get('length');\n    let holePath = `M${0} ${ -epsilon}  L${holeWidth} ${-epsilon}  L${holeWidth} ${epsilon}  L${0} ${epsilon}  z`;\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let length = element.properties.get('width').get('length');\n    return (\n      <g transform={`translate(${-length / 2}, 0)`}>\n        <path key=\"1\" d={holePath} style={holeStyle}/>\n        <line key=\"2\" x1={holeWidth / 2} y1={-10 - epsilon} x2={holeWidth / 2} y2={10 + epsilon} style={holeStyle}/>\n      </g>\n    );\n  },\n\n  render3D: function (element, layer, scene) {\n    let onLoadItem = (object) => {\n      let boundingBox = new Three.Box3().setFromObject(object);\n\n      let initialWidth = boundingBox.max.x - boundingBox.min.x;\n      let initialHeight = boundingBox.max.y - boundingBox.min.y;\n      let initialThickness = boundingBox.max.z - boundingBox.min.z;\n\n      if (element.selected) {\n        let box = new Three.BoxHelper(object, 0x99c3fb);\n        box.material.linewidth = 2;\n        box.material.depthTest = false;\n        box.renderOrder = 1000;\n        object.add(box);\n      }\n\n      let width = element.properties.get('width').get('length');\n      let height = element.properties.get('height').get('length');\n      let thickness = element.properties.get('thickness').get('length');\n\n      object.scale.set(width / initialWidth, height / initialHeight,\n        thickness / initialThickness);\n\n      return object;\n    };\n\n    if(cached3DWindow) {\n      return Promise.resolve(onLoadItem(cached3DWindow.clone()));\n    }\n\n    let mtl = require('./window.mtl');\n    let obj = require('./window.obj');\n    let img = require('./texture.png');\n\n    return loadObjWithMaterial(mtl, obj, path.dirname(img) + '/')\n      .then(object => {\n        cached3DWindow = object;\n        return onLoadItem(cached3DWindow.clone())\n      })\n  }\n};\n"]},"metadata":{},"sourceType":"module"}