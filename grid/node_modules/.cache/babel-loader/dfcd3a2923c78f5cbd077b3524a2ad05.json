{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport { buildWall, updatedWall } from './wall-factory-3d';\nimport * as SharedStyle from '../../shared-style';\nimport * as Geometry from '../../utils/geometry';\nimport Translator from '../../translator/translator';\nvar epsilon = 20;\nvar STYLE_TEXT = {\n  textAnchor: 'middle'\n};\nvar STYLE_LINE = {\n  stroke: SharedStyle.LINE_MESH_COLOR.selected\n};\nvar STYLE_RECT = {\n  strokeWidth: 1,\n  stroke: SharedStyle.LINE_MESH_COLOR.unselected,\n  fill: 'url(#diagonalFill)'\n};\n\nvar STYLE_RECT_SELECTED = _extends({}, STYLE_RECT, {\n  stroke: SharedStyle.LINE_MESH_COLOR.selected\n});\n\nvar translator = new Translator();\nexport default function WallFactory(name, info, textures) {\n  var wallElement = {\n    name: name,\n    prototype: 'lines',\n    info: info,\n    properties: {\n      height: {\n        label: translator.t('height'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 300\n        }\n      },\n      thickness: {\n        label: translator.t('thickness'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 20\n        }\n      }\n    },\n    render2D: function render2D(element, layer, scene) {\n      var _layer$vertices$get = layer.vertices.get(element.vertices.get(0)),\n          x1 = _layer$vertices$get.x,\n          y1 = _layer$vertices$get.y;\n\n      var _layer$vertices$get2 = layer.vertices.get(element.vertices.get(1)),\n          x2 = _layer$vertices$get2.x,\n          y2 = _layer$vertices$get2.y;\n\n      var length = Geometry.pointsDistance(x1, y1, x2, y2);\n      var length_5 = length / 5;\n      var thickness = element.getIn(['properties', 'thickness', 'length']);\n      var half_thickness = thickness / 2;\n      var half_thickness_eps = half_thickness + epsilon;\n      var char_height = 11;\n      var extra_epsilon = 5;\n      var textDistance = half_thickness + epsilon + extra_epsilon;\n      return element.selected ? React.createElement('g', null, React.createElement('rect', {\n        x: '0',\n        y: -half_thickness,\n        width: length,\n        height: thickness,\n        style: STYLE_RECT_SELECTED\n      }), React.createElement('line', {\n        x1: length_5,\n        y1: -half_thickness_eps,\n        x2: length_5,\n        y2: half_thickness_eps,\n        style: STYLE_LINE\n      }), React.createElement('text', {\n        x: length_5,\n        y: textDistance + char_height,\n        style: STYLE_TEXT\n      }, 'A'), React.createElement('text', {\n        x: length_5,\n        y: -textDistance,\n        style: STYLE_TEXT\n      }, 'B')) : React.createElement('rect', {\n        x: '0',\n        y: -half_thickness,\n        width: length,\n        height: thickness,\n        style: STYLE_RECT\n      });\n    },\n    render3D: function render3D(element, layer, scene) {\n      return buildWall(element, layer, scene, textures);\n    },\n    updateRender3D: function updateRender3D(element, layer, scene, mesh, oldElement, differences, selfDestroy, selfBuild) {\n      return updatedWall(element, layer, scene, textures, mesh, oldElement, differences, selfDestroy, selfBuild);\n    }\n  };\n\n  if (textures && textures !== {}) {\n    var textureValues = {\n      'none': 'None'\n    };\n\n    for (var textureName in textures) {\n      textureValues[textureName] = textures[textureName].name;\n    }\n\n    wallElement.properties.textureA = {\n      label: translator.t('texture') + ' A',\n      type: 'enum',\n      defaultValue: textureValues.bricks ? 'bricks' : 'none',\n      values: textureValues\n    };\n    wallElement.properties.textureB = {\n      label: translator.t('texture') + ' B',\n      type: 'enum',\n      defaultValue: textureValues.bricks ? 'bricks' : 'none',\n      values: textureValues\n    };\n  }\n\n  return wallElement;\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/catalog/factories/wall-factory.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","React","buildWall","updatedWall","SharedStyle","Geometry","Translator","epsilon","STYLE_TEXT","textAnchor","STYLE_LINE","stroke","LINE_MESH_COLOR","selected","STYLE_RECT","strokeWidth","unselected","fill","STYLE_RECT_SELECTED","translator","WallFactory","name","info","textures","wallElement","properties","height","label","t","type","defaultValue","thickness","render2D","element","layer","scene","_layer$vertices$get","vertices","get","x1","x","y1","y","_layer$vertices$get2","x2","y2","pointsDistance","length_5","getIn","half_thickness","half_thickness_eps","char_height","extra_epsilon","textDistance","createElement","width","style","render3D","updateRender3D","mesh","oldElement","differences","selfDestroy","selfBuild","textureValues","textureName","textureA","bricks","values","textureB"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport React from 'react';\nimport { buildWall, updatedWall } from './wall-factory-3d';\nimport * as SharedStyle from '../../shared-style';\nimport * as Geometry from '../../utils/geometry';\nimport Translator from '../../translator/translator';\n\nvar epsilon = 20;\nvar STYLE_TEXT = { textAnchor: 'middle' };\nvar STYLE_LINE = { stroke: SharedStyle.LINE_MESH_COLOR.selected };\nvar STYLE_RECT = { strokeWidth: 1, stroke: SharedStyle.LINE_MESH_COLOR.unselected, fill: 'url(#diagonalFill)' };\nvar STYLE_RECT_SELECTED = _extends({}, STYLE_RECT, { stroke: SharedStyle.LINE_MESH_COLOR.selected });\n\nvar translator = new Translator();\n\nexport default function WallFactory(name, info, textures) {\n\n  var wallElement = {\n    name: name,\n    prototype: 'lines',\n    info: info,\n    properties: {\n      height: {\n        label: translator.t('height'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 300\n        }\n      },\n      thickness: {\n        label: translator.t('thickness'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 20\n        }\n      }\n    },\n\n    render2D: function render2D(element, layer, scene) {\n      var _layer$vertices$get = layer.vertices.get(element.vertices.get(0)),\n          x1 = _layer$vertices$get.x,\n          y1 = _layer$vertices$get.y;\n\n      var _layer$vertices$get2 = layer.vertices.get(element.vertices.get(1)),\n          x2 = _layer$vertices$get2.x,\n          y2 = _layer$vertices$get2.y;\n\n      var length = Geometry.pointsDistance(x1, y1, x2, y2);\n      var length_5 = length / 5;\n\n      var thickness = element.getIn(['properties', 'thickness', 'length']);\n      var half_thickness = thickness / 2;\n      var half_thickness_eps = half_thickness + epsilon;\n      var char_height = 11;\n      var extra_epsilon = 5;\n      var textDistance = half_thickness + epsilon + extra_epsilon;\n\n      return element.selected ? React.createElement(\n        'g',\n        null,\n        React.createElement('rect', { x: '0', y: -half_thickness, width: length, height: thickness, style: STYLE_RECT_SELECTED }),\n        React.createElement('line', { x1: length_5, y1: -half_thickness_eps, x2: length_5, y2: half_thickness_eps, style: STYLE_LINE }),\n        React.createElement(\n          'text',\n          { x: length_5, y: textDistance + char_height, style: STYLE_TEXT },\n          'A'\n        ),\n        React.createElement(\n          'text',\n          { x: length_5, y: -textDistance, style: STYLE_TEXT },\n          'B'\n        )\n      ) : React.createElement('rect', { x: '0', y: -half_thickness, width: length, height: thickness, style: STYLE_RECT });\n    },\n\n    render3D: function render3D(element, layer, scene) {\n      return buildWall(element, layer, scene, textures);\n    },\n\n    updateRender3D: function updateRender3D(element, layer, scene, mesh, oldElement, differences, selfDestroy, selfBuild) {\n      return updatedWall(element, layer, scene, textures, mesh, oldElement, differences, selfDestroy, selfBuild);\n    }\n\n  };\n\n  if (textures && textures !== {}) {\n\n    var textureValues = { 'none': 'None' };\n\n    for (var textureName in textures) {\n      textureValues[textureName] = textures[textureName].name;\n    }\n\n    wallElement.properties.textureA = {\n      label: translator.t('texture') + ' A',\n      type: 'enum',\n      defaultValue: textureValues.bricks ? 'bricks' : 'none',\n      values: textureValues\n    };\n\n    wallElement.properties.textureB = {\n      label: translator.t('texture') + ' B',\n      type: 'enum',\n      defaultValue: textureValues.bricks ? 'bricks' : 'none',\n      values: textureValues\n    };\n  }\n\n  return wallElement;\n}"]},"metadata":{},"sourceType":"module"}