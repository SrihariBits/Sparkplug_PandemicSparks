{"ast":null,"code":"var _jsxFileName = \"/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/sliding-door/planner-element.jsx\";\nimport React from 'react';\nimport * as Three from 'three';\nconst grey = new Three.MeshLambertMaterial({\n  color: 0x3f3f3f\n});\nconst white = new Three.MeshLambertMaterial({\n  color: 0xffffff,\n  transparent: true,\n  opacity: 0.5\n});\nconst black = new Three.MeshLambertMaterial({\n  color: 0x000000\n});\n\nfunction makeDoor(handleSide) {\n  let slidingDoor = new Three.Mesh();\n  let doorShape = new Three.Shape();\n  doorShape.moveTo(1, 2);\n  doorShape.lineTo(0, 2);\n  doorShape.lineTo(0, 0);\n  doorShape.lineTo(1, 0);\n  let doorHole = new Three.Path();\n  doorHole.moveTo(.65, 1.75);\n  doorHole.lineTo(.35, 1.75);\n  doorHole.lineTo(.35, 1.25);\n  doorHole.lineTo(.65, 1.25);\n  doorShape.holes.push(doorHole);\n  let extrudeSettings = {\n    steps: 2,\n    depth: 0.05,\n    bevelEnabled: false,\n    bevelThickness: 1,\n    bevelSize: 1,\n    bevelSegments: 1\n  };\n  let geometry = new Three.ExtrudeGeometry(doorShape, extrudeSettings);\n  let door = new Three.Mesh(geometry, grey);\n  if (handleSide === 'right') door.position.set(-1, 0, 0);else door.position.set(0, 0, 0);\n  slidingDoor.add(door);\n  let doorGeometry = new Three.BoxGeometry(1, 2, 0.05);\n  let door2 = new Three.Mesh(doorGeometry, grey);\n  if (handleSide === 'right') door2.position.set(1.5, 1, 0.065);else door2.position.set(-.5, 1, 0.065);\n  door.add(door2);\n  let barGeometry = new Three.BoxGeometry(2, 0.1, 0.1);\n  let doorBar = new Three.Mesh(barGeometry, grey);\n  doorBar.position.set(-0, 2.07, 0.05);\n  slidingDoor.add(doorBar);\n  let glassGeometry = new Three.BoxGeometry(0.3, 0.5, 0.05);\n  let glass = new Three.Mesh(glassGeometry, white);\n  glass.position.set(0.5, 1.5, 0.025);\n  door.add(glass);\n  let HandleGeometry1 = new Three.CylinderGeometry(0.051, 0.051, 0.0625, 80, 80, true);\n  black.side = Three.DoubleSide;\n  let handle_p1 = new Three.Mesh(HandleGeometry1, black);\n  handle_p1.position.set(0.2, 1, 0.025);\n  handle_p1.rotation.x = Math.PI / 2;\n  door.add(handle_p1);\n  let HandleGeometry2 = new Three.BoxGeometry(0.1, 0.02, 0.0625);\n  let handle_p2 = new Three.Mesh(HandleGeometry2, black);\n  handle_p2.position.set(0.2, 1, 0.025);\n  door.add(handle_p2);\n\n  if (handleSide === 'left') {\n    handle_p1.position.x = 0.8;\n    handle_p2.position.x = 0.8;\n  }\n\n  return slidingDoor;\n}\n\nexport default {\n  name: 'sliding door',\n  prototype: 'holes',\n  info: {\n    tag: ['door'],\n    title: 'sliding door',\n    description: 'iron door',\n    image: require('./slidingDoor.png')\n  },\n  properties: {\n    width: {\n      label: 'width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 200,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: 'height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 215,\n        unit: 'cm'\n      }\n    },\n    thickness: {\n      label: 'thickness',\n      type: 'length-measure',\n      defaultValue: {\n        length: 30,\n        unit: 'cm'\n      }\n    },\n    altitude: {\n      label: 'altitude',\n      type: 'length-measure',\n      defaultValue: {\n        length: 0,\n        unit: 'cm'\n      }\n    },\n    flip_horizontal: {\n      label: 'horizontal flip',\n      type: 'checkbox',\n      defaultValue: 'none',\n      values: {\n        'none': 'none',\n        'yes': 'yes'\n      }\n    },\n    flip_vertical: {\n      label: 'vertical flip',\n      type: 'checkbox',\n      defaultValue: 'right',\n      values: {\n        'right': 'right',\n        'left': 'left'\n      }\n    }\n  },\n  render2D: function (element, layer, scene) {\n    const STYLE_HOLE_BASE = {\n      stroke: '#000',\n      strokeWidth: '14px',\n      fill: '#000'\n    };\n    const STYLE_HOLE_BASE2 = {\n      stroke: '#000',\n      strokeWidth: '16px',\n      fill: '#000'\n    };\n    const STYLE_HOLE_SELECTED = {\n      stroke: '#0096fd',\n      strokeWidth: '14px',\n      fill: '#0096fd',\n      cursor: 'move'\n    };\n    let epsilon = 3;\n    let flip = element.properties.get('flip_horizontal');\n    let handleSide = element.properties.get('flip_vertical');\n    let holeWidth = element.properties.get('width').get('length');\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let holeStyle2 = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE2;\n    let length = element.properties.get('width').get('length');\n    let scaleX, scaleY;\n    let scaleX2, scaleY2;\n    let pX1, pX2;\n    flip ? flip = 'yes' : flip = 'none';\n    handleSide ? handleSide = 'right' : handleSide = 'left';\n\n    if (flip === 'yes') {\n      scaleX = 1;\n\n      if (handleSide === 'right') {\n        pX1 = 0;\n        pX2 = holeWidth / 2;\n        scaleY = -1;\n      } else {\n        pX1 = holeWidth / 2;\n        pX2 = holeWidth;\n        scaleY = -1;\n      }\n    } else {\n      scaleX = 1;\n\n      if (handleSide === 'right') {\n        pX1 = holeWidth / 2;\n        pX2 = holeWidth;\n        scaleY = 1;\n      } else {\n        pX1 = 0;\n        pX2 = holeWidth / 2;\n        scaleY = 1;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${-element.properties.get('width').get('length') / 2}, 0)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"line\", {\n      key: \"1\",\n      x1: \"0\",\n      y1: 0 - epsilon,\n      x2: holeWidth,\n      y2: 0 - epsilon,\n      style: holeStyle,\n      transform: `scale(${scaleX},${scaleY})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      key: \"2\",\n      x1: pX1,\n      y1: 5 - epsilon,\n      x2: pX2,\n      y2: 5 - epsilon,\n      style: holeStyle2,\n      transform: `scale(${scaleX},${scaleY})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      key: \"3\",\n      x1: holeWidth,\n      y1: 0 - epsilon,\n      x2: holeWidth,\n      y2: 15 + epsilon,\n      style: holeStyle2,\n      transform: `scale(${scaleX},${scaleY})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"line\", {\n      key: \"4\",\n      x1: \"0\",\n      y1: 0 - epsilon,\n      x2: \"0\",\n      y2: 15 + epsilon,\n      style: holeStyle2,\n      transform: `scale(${scaleX},${scaleY})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }\n    }));\n  },\n  render3D: function (element, layer, scene) {\n    let flip = element.properties.get('flip_horizontal');\n    let handleSide = element.properties.get('flip_vertical');\n    let width = element.properties.get('width').get('length');\n    let height = element.properties.get('height').get('length');\n    let thickness = element.properties.get('thickness').get('length');\n    let newAltitude = element.properties.get('altitude').get('length');\n    flip ? flip = 'yes' : flip = 'none';\n    handleSide ? handleSide = 'right' : handleSide = 'left';\n    let slidingDoor = new Three.Object3D();\n    slidingDoor.add(makeDoor(handleSide).clone());\n    let valuePosition = new Three.Box3().setFromObject(slidingDoor);\n    let deltaX = Math.abs(valuePosition.max.x - valuePosition.min.x);\n    let deltaY = Math.abs(valuePosition.max.y - valuePosition.min.y);\n    let deltaZ = Math.abs(valuePosition.max.z - valuePosition.min.z);\n\n    if (element.selected) {\n      let boundingBox = new Three.BoxHelper(slidingDoor, 0x99c3fb);\n      boundingBox.material.linewidth = 5;\n      boundingBox.renderOrder = 1000;\n      boundingBox.material.depthTest = false;\n      slidingDoor.add(boundingBox);\n    }\n\n    if (flip === 'yes') slidingDoor.rotation.y += Math.PI;\n    slidingDoor.position.y += newAltitude;\n    slidingDoor.scale.set(width / deltaX, height / deltaY, thickness / deltaZ);\n    return Promise.resolve(slidingDoor);\n  }\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/sliding-door/planner-element.jsx"],"names":["React","Three","grey","MeshLambertMaterial","color","white","transparent","opacity","black","makeDoor","handleSide","slidingDoor","Mesh","doorShape","Shape","moveTo","lineTo","doorHole","Path","holes","push","extrudeSettings","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelSegments","geometry","ExtrudeGeometry","door","position","set","add","doorGeometry","BoxGeometry","door2","barGeometry","doorBar","glassGeometry","glass","HandleGeometry1","CylinderGeometry","side","DoubleSide","handle_p1","rotation","x","Math","PI","HandleGeometry2","handle_p2","name","prototype","info","tag","title","description","image","require","properties","width","label","type","defaultValue","length","unit","height","thickness","altitude","flip_horizontal","values","flip_vertical","render2D","element","layer","scene","STYLE_HOLE_BASE","stroke","strokeWidth","fill","STYLE_HOLE_BASE2","STYLE_HOLE_SELECTED","cursor","epsilon","flip","get","holeWidth","holeStyle","selected","holeStyle2","scaleX","scaleY","scaleX2","scaleY2","pX1","pX2","render3D","newAltitude","Object3D","clone","valuePosition","Box3","setFromObject","deltaX","abs","max","min","deltaY","y","deltaZ","z","boundingBox","BoxHelper","material","linewidth","renderOrder","depthTest","scale","Promise","resolve"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Three from 'three';\n\nconst grey = new Three.MeshLambertMaterial({color: 0x3f3f3f});\nconst white = new Three.MeshLambertMaterial({color: 0xffffff, transparent:true, opacity:0.5});\nconst black = new Three.MeshLambertMaterial({color: 0x000000});\n\nfunction makeDoor(handleSide) {\n\n  let slidingDoor = new Three.Mesh();\n\n  let doorShape = new Three.Shape();\n  doorShape.moveTo( 1, 2 );\n  doorShape.lineTo( 0, 2);\n  doorShape.lineTo( 0, 0);\n  doorShape.lineTo( 1, 0);\n\n  let doorHole = new Three.Path();\n  doorHole.moveTo(.65, 1.75 );\n  doorHole.lineTo(.35, 1.75);\n  doorHole.lineTo(.35, 1.25);\n  doorHole.lineTo(.65, 1.25);\n  doorShape.holes.push( doorHole );\n\n  let extrudeSettings = {\n    steps: 2,\n    depth: 0.05,\n    bevelEnabled: false,\n    bevelThickness: 1,\n    bevelSize: 1,\n    bevelSegments: 1\n  };\n\n  let geometry = new Three.ExtrudeGeometry( doorShape, extrudeSettings );\n  let door = new Three.Mesh( geometry, grey ) ;\n  if(handleSide === 'right')\n    door.position.set(-1,0,0);\n  else\n    door.position.set(0,0,0);\n  slidingDoor.add(door);\n\n  let doorGeometry = new Three.BoxGeometry(1,2,0.05);\n  let door2 = new Three.Mesh(doorGeometry,grey);\n  if (handleSide === 'right')\n    door2.position.set(1.5,1,0.065);\n  else\n    door2.position.set(-.5,1,0.065);\n  door.add(door2);\n\n  let barGeometry = new Three.BoxGeometry(2,0.1,0.1);\n  let doorBar = new Three.Mesh(barGeometry,grey);\n  doorBar.position.set(-0,2.07,0.05);\n  slidingDoor.add(doorBar);\n\n  let glassGeometry = new Three.BoxGeometry(0.3,0.5,0.05);\n  let glass = new Three.Mesh(glassGeometry,white);\n  glass.position.set(0.5,1.5,0.025);\n  door.add(glass);\n\n  let HandleGeometry1 = new Three.CylinderGeometry(0.051,0.051,0.0625,80,80,true);\n  black.side=Three.DoubleSide;\n  let handle_p1 = new Three.Mesh(HandleGeometry1,black);\n  handle_p1.position.set(0.2,1,0.025);\n  handle_p1.rotation.x=Math.PI/2;\n  door.add(handle_p1);\n\n  let HandleGeometry2 = new Three.BoxGeometry(0.1,0.02,0.0625);\n  let handle_p2 = new Three.Mesh( HandleGeometry2,black  );\n  handle_p2.position.set(0.2,1,0.025);\n  door.add(handle_p2);\n\n  if (handleSide === 'left'){\n    handle_p1.position.x=0.8;\n    handle_p2.position.x=0.8;\n  }\n\n  return slidingDoor\n}\n\nexport default {\n  name: 'sliding door',\n  prototype: 'holes',\n\n  info: {\n    tag: ['door'],\n    title: 'sliding door',\n    description: 'iron door',\n    image: require('./slidingDoor.png')\n  },\n\n  properties: {\n    width: {\n      label: 'width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 200,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: 'height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 215,\n        unit: 'cm'\n      }\n    },\n    thickness: {\n      label: 'thickness',\n      type: 'length-measure',\n      defaultValue: {\n        length: 30,\n        unit: 'cm'\n      }\n    },\n    altitude: {\n      label: 'altitude',\n      type: 'length-measure',\n      defaultValue: {\n        length: 0,\n        unit: 'cm'\n      }\n    },\n    flip_horizontal: {\n      label: 'horizontal flip',\n      type: 'checkbox',\n      defaultValue: 'none',\n      values: {\n        'none': 'none',\n        'yes':  'yes'\n      }\n    },\n    flip_vertical: {\n      label: 'vertical flip',\n      type: 'checkbox',\n      defaultValue: 'right',\n      values: {\n        'right': 'right',\n        'left':  'left'\n      }\n    }\n  },\n\n  render2D: function (element, layer, scene) {\n\n    const STYLE_HOLE_BASE = {stroke: '#000', strokeWidth: '14px', fill: '#000'};\n    const STYLE_HOLE_BASE2 = {stroke: '#000', strokeWidth: '16px', fill: '#000'};\n    const STYLE_HOLE_SELECTED = {stroke: '#0096fd', strokeWidth: '14px', fill: '#0096fd', cursor: 'move'};\n\n    let epsilon = 3;\n    let flip = element.properties.get('flip_horizontal');\n    let handleSide = element.properties.get('flip_vertical');\n    let holeWidth = element.properties.get('width').get('length');\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let holeStyle2 = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE2;\n    let length = element.properties.get('width').get('length');\n\n    let scaleX, scaleY;\n    let scaleX2, scaleY2;\n    let pX1, pX2;\n\n    flip ? flip = 'yes' : flip = 'none';\n    handleSide ? handleSide = 'right' : handleSide = 'left';\n\n    if(flip === 'yes') {\n      scaleX = 1;\n      if (handleSide === 'right') {\n        pX1 = 0;\n        pX2 = holeWidth/2;\n        scaleY = -1;\n      }\n      else {\n        pX1 = holeWidth/2;\n        pX2 = holeWidth;\n        scaleY = -1;\n      }\n    }\n    else {\n      scaleX = 1;\n      if (handleSide === 'right') {\n        pX1 = holeWidth/2;\n        pX2 = holeWidth;\n        scaleY = 1;\n      }\n      else {\n        pX1 = 0;\n        pX2 = holeWidth/2;\n        scaleY = 1;\n      }\n\n    }\n      return (\n        <g transform={`translate(${-element.properties.get('width').get('length') / 2}, 0)`}>\n          <line key='1' x1='0' y1={0 - epsilon} x2={holeWidth} y2={0 - epsilon} style={holeStyle}\n                transform={`scale(${scaleX},${scaleY})`}/>\n          <line key='2' x1={pX1} y1={5 - epsilon} x2={pX2} y2={5 - epsilon} style={holeStyle2}\n                transform={`scale(${scaleX},${scaleY})`}/>\n          <line key='3' x1={holeWidth} y1={0 - epsilon} x2={holeWidth} y2={15 + epsilon} style={holeStyle2}\n                transform={`scale(${scaleX},${scaleY})`}/>\n          <line key='4' x1='0' y1={0 - epsilon} x2='0' y2={15 + epsilon} style={holeStyle2}\n                transform={`scale(${scaleX},${scaleY})`}/>\n        </g>\n      )\n  },\n\n  render3D: function (element, layer, scene) {\n\n    let flip = element.properties.get('flip_horizontal');\n    let handleSide = element.properties.get('flip_vertical');\n    let width = element.properties.get('width').get('length');\n    let height = element.properties.get('height').get('length');\n    let thickness = element.properties.get('thickness').get('length');\n    let newAltitude = element.properties.get('altitude').get('length');\n\n    flip ? flip = 'yes' : flip = 'none';\n    handleSide ? handleSide = 'right' : handleSide = 'left';\n\n    let slidingDoor = new Three.Object3D();\n    slidingDoor.add(makeDoor(handleSide).clone());\n\n    let valuePosition = new Three.Box3().setFromObject(slidingDoor);\n\n    let deltaX = Math.abs(valuePosition.max.x - valuePosition.min.x);\n    let deltaY = Math.abs(valuePosition.max.y - valuePosition.min.y);\n    let deltaZ = Math.abs(valuePosition.max.z - valuePosition.min.z);\n\n    if (element.selected) {\n      let boundingBox = new Three.BoxHelper(slidingDoor, 0x99c3fb);\n      boundingBox.material.linewidth = 5;\n      boundingBox.renderOrder = 1000;\n      boundingBox.material.depthTest = false;\n      slidingDoor.add(boundingBox);\n    }\n\n    if(flip === 'yes')\n      slidingDoor.rotation.y += Math.PI;\n\n    slidingDoor.position.y+= newAltitude;\n    slidingDoor.scale.set(width / deltaX, height / deltaY, thickness / deltaZ);\n\n    return Promise.resolve(slidingDoor);\n\n  }\n};\n"]},"metadata":{},"sourceType":"module"}