{"ast":null,"code":"import * as Three from 'three';\nimport createGrid from './grid-creator';\nimport { disposeObject } from './three-memory-cleaner';\nexport function parseData(sceneData, actions, catalog) {\n  var planData = {};\n  planData.sceneGraph = {\n    unit: sceneData.unit,\n    layers: {},\n    busyResources: {\n      layers: {}\n    },\n    width: sceneData.width,\n    height: sceneData.height,\n    LODs: {}\n  };\n  planData.plan = new Three.Object3D();\n  planData.plan.name = 'plan'; // Add a grid to the plan\n\n  planData.grid = createGrid(sceneData);\n  planData.grid.name = 'grid';\n  planData.boundingBox = new Three.Box3().setFromObject(planData.grid);\n  planData.boundingBox.name = 'boundingBox';\n  var promises = [];\n  sceneData.layers.forEach(function (layer) {\n    if (layer.id === sceneData.selectedLayer || layer.visible) {\n      promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n    }\n  });\n  Promise.all(promises).then(function (value) {\n    return updateBoundingBox(planData);\n  });\n  return planData;\n}\n\nfunction createLayerObjects(layer, planData, sceneData, actions, catalog) {\n  var promises = [];\n  planData.sceneGraph.layers[layer.id] = {\n    id: layer.id,\n    lines: {},\n    holes: {},\n    areas: {},\n    items: {},\n    visible: layer.visible,\n    altitude: layer.altitude\n  };\n  planData.sceneGraph.busyResources.layers[layer.id] = {\n    id: layer.id,\n    lines: {},\n    holes: {},\n    areas: {},\n    items: {}\n  }; // Import lines\n\n  layer.lines.forEach(function (line) {\n    promises.push(addLine(sceneData, planData, layer, line.id, catalog, actions.linesActions));\n    line.holes.forEach(function (holeID) {\n      promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n    });\n  }); // Import areas\n\n  layer.areas.forEach(function (area) {\n    promises.push(addArea(sceneData, planData, layer, area.id, catalog, actions.areaActions));\n  }); // Import items\n\n  layer.items.forEach(function (item) {\n    promises.push(addItem(sceneData, planData, layer, item.id, catalog, actions.itemsActions));\n  });\n  return promises;\n}\n\nexport function updateScene(planData, sceneData, oldSceneData, diffArray, actions, catalog) {\n  var splitted = diffArray.map(function (el) {\n    return {\n      op: el.op,\n      path: el.path.split('/'),\n      value: el.value\n    };\n  });\n  var filteredDiffs = filterDiffs(splitted, sceneData, oldSceneData); //***testing additional filter***\n\n  filteredDiffs = filteredDiffs.filter(function (_ref) {\n    var path = _ref.path;\n    return path[3] !== 'selected';\n  });\n  filteredDiffs = filteredDiffs.filter(function (_ref2) {\n    var path = _ref2.path;\n    return path[1] !== 'groups';\n  }); //*******************************\n\n  filteredDiffs.forEach(function (_ref3) {\n    var op = _ref3.op,\n        path = _ref3.path,\n        value = _ref3.value;\n    /* First of all I need to find the object I need to update */\n\n    if (path[1] === 'layers') {\n      var layer = sceneData.getIn(['layers', path[2]]);\n\n      if (path.length === 3 && op === 'remove') {\n        removeLayer(path[2], planData);\n      } else if (path.length > 3) {\n        switch (op) {\n          case 'replace':\n            replaceObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n\n          case 'add':\n            addObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n\n          case 'remove':\n            removeObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n        }\n      }\n    } else if (path[1] === 'selectedLayer') {\n      var layerSelectedID = value;\n      var layerSelected = sceneData.getIn(['layers', layerSelectedID]); // First of all I check if the new selected layer is not visible\n\n      if (!layerSelected.visible) {\n        // I need to create the objects for this layer\n        var promises = createLayerObjects(layerSelected, planData, sceneData, actions, catalog);\n        Promise.all(promises).then(function () {\n          return updateBoundingBox(planData);\n        });\n      }\n\n      var layerGraph = planData.sceneGraph.layers[oldSceneData.selectedLayer];\n\n      if (layerGraph) {\n        if (!layerGraph.visible) {\n          // I need to remove the objects for this layer\n          for (var lineID in layerGraph.lines) {\n            removeLine(planData, layerGraph.id, lineID);\n          }\n\n          for (var areaID in layerGraph.areas) {\n            removeArea(planData, layerGraph.id, areaID);\n          }\n\n          for (var itemID in layerGraph.items) {\n            removeItem(planData, layerGraph.id, itemID);\n          }\n\n          for (var holeID in layerGraph.holes) {\n            removeHole(planData, layerGraph.id, holeID);\n          }\n        }\n      }\n    }\n  });\n  return planData;\n}\n\nfunction replaceObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n  var promises = [];\n\n  switch (modifiedPath[3]) {\n    case 'vertices':\n      if (modifiedPath[5] !== 'selected') {\n        var vertex = layer.getIn(['vertices', modifiedPath[4]]);\n\n        if (modifiedPath[5] === 'x' || modifiedPath[5] === 'y') {\n          vertex.lines.forEach(function (lineID) {\n            var lineHoles = oldSceneData.getIn(['layers', layer.id, 'lines', lineID, 'holes']);\n            if (lineHoles) lineHoles.forEach(function (holeID) {\n              replaceObject([0, 0, 0, 'holes', holeID, 'selected'], layer, planData, actions, sceneData, oldSceneData, catalog);\n            });\n            return replaceObject([0, 0, 0, 'lines', lineID], layer, planData, actions, sceneData, oldSceneData, catalog);\n          });\n          vertex.areas.forEach(function (areaID) {\n            return replaceObject([0, 0, 0, 'areas', areaID], layer, planData, actions, sceneData, oldSceneData, catalog);\n          });\n        }\n\n        if (modifiedPath[5] === 'areas') {\n          var areaID = vertex.getIn(['areas', ~~modifiedPath[6]]);\n          replaceObject([0, 0, 0, 'areas', areaID], layer, planData, actions, sceneData, oldSceneData, catalog);\n        }\n      }\n\n      break;\n\n    case 'holes':\n      var newHoleData = layer.getIn(['holes', modifiedPath[4]]);\n\n      if (catalog.getElement(newHoleData.type).updateRender3D) {\n        promises.push(updateHole(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.holesActions, function () {\n          return removeHole(planData, layer.id, newHoleData.id);\n        }, function () {\n          return addHole(sceneData, planData, layer, newHoleData.id, catalog, actions.holesActions);\n        }));\n      } else {\n        var lineID = newHoleData.line;\n\n        if (modifiedPath[5] === 'selected') {\n          // I remove only the hole without removing the wall\n          removeHole(planData, layer.id, newHoleData.id);\n          promises.push(addHole(sceneData, planData, layer, newHoleData.id, catalog, actions.holesActions));\n        } else {\n          layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n            removeHole(planData, layer.id, holeID);\n          });\n          removeLine(planData, layer.id, lineID);\n          promises.push(addLine(sceneData, planData, layer, lineID, catalog, actions.linesActions));\n          layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n            promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n          });\n        }\n      }\n\n      break;\n\n    case 'lines':\n      var line = layer.getIn(['lines', modifiedPath[4]]);\n\n      if (catalog.getElement(line.type).updateRender3D) {\n        promises.push(updateLine(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.linesActions, function () {\n          return removeLine(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addLine(sceneData, planData, layer, modifiedPath[4], catalog, actions.linesActions);\n        }));\n      } else {\n        removeLine(planData, layer.id, modifiedPath[4]);\n        promises.push(addLine(sceneData, planData, layer, modifiedPath[4], catalog, actions.linesActions));\n      }\n\n      break;\n\n    case 'areas':\n      var area = layer.getIn(['areas', modifiedPath[4]]);\n\n      if (catalog.getElement(area.type).updateRender3D) {\n        promises.push(updateArea(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.areaActions, function () {\n          return removeArea(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addArea(sceneData, planData, layer, modifiedPath[4], catalog, actions.areaActions);\n        }));\n      } else {\n        if (planData.sceneGraph.layers[layer.id].areas[modifiedPath[4]]) {\n          removeArea(planData, layer.id, modifiedPath[4]);\n        }\n\n        promises.push(addArea(sceneData, planData, layer, modifiedPath[4], catalog, actions.areaActions));\n      }\n\n      break;\n\n    case 'items':\n      var item = layer.getIn(['items', modifiedPath[4]]);\n\n      if (catalog.getElement(item.type).updateRender3D) {\n        promises.push(updateItem(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.itemsActions, function () {\n          return removeItem(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addItem(sceneData, planData, layer, modifiedPath[4], catalog, actions.itemsActions);\n        }));\n      } else {\n        removeItem(planData, layer.id, modifiedPath[4]);\n        promises.push(addItem(sceneData, planData, layer, modifiedPath[4], catalog, actions.itemsActions));\n      }\n\n      break;\n\n    case 'visible':\n      if (!layer.visible) {\n        var _layerGraph = planData.sceneGraph.layers[layer.id];\n\n        for (var _lineID in _layerGraph.lines) {\n          removeLine(planData, layer.id, _lineID);\n        }\n\n        for (var _areaID in _layerGraph.areas) {\n          removeArea(planData, layer.id, _areaID);\n        }\n\n        for (var itemID in _layerGraph.items) {\n          removeItem(planData, layer.id, itemID);\n        }\n\n        for (var holeID in _layerGraph.holes) {\n          removeHole(planData, layer.id, holeID);\n        }\n      } else {\n        promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n      }\n\n      break;\n\n    case 'opacity':\n    case 'altitude':\n      var layerGraph = planData.sceneGraph.layers[layer.id];\n\n      for (var _lineID2 in layerGraph.lines) {\n        removeLine(planData, layer.id, _lineID2);\n      }\n\n      for (var _areaID2 in layerGraph.areas) {\n        removeArea(planData, layer.id, _areaID2);\n      }\n\n      for (var _itemID in layerGraph.items) {\n        removeItem(planData, layer.id, _itemID);\n      }\n\n      for (var _holeID in layerGraph.holes) {\n        removeHole(planData, layer.id, _holeID);\n      }\n\n      promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n  }\n\n  Promise.all(promises).then(function (values) {\n    return updateBoundingBox(planData);\n  });\n}\n\nfunction removeObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n  var promises = [];\n\n  switch (modifiedPath[3]) {\n    case 'lines':\n      // Here I remove the line with all its holes\n      var lineID = modifiedPath[4];\n      oldSceneData.getIn(['layers', layer.id, 'lines', lineID, 'holes']).forEach(function (holeID) {\n        removeHole(planData, layer.id, holeID);\n      });\n      removeLine(planData, layer.id, lineID);\n\n      if (modifiedPath.length > 5) {\n        // I removed an hole, so I should add the new line\n        promises.push(addLine(sceneData, planData, layer, lineID, catalog, actions.linesActions));\n        layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n          promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n        });\n      }\n\n      break;\n\n    case 'areas':\n      if (modifiedPath.length === 5) {\n        // I am removing an entire area\n        removeArea(planData, layer.id, modifiedPath[4]);\n      }\n\n      break;\n\n    case 'items':\n      if (modifiedPath.length === 5) {\n        // I am removing an item\n        removeItem(planData, layer.id, modifiedPath[4]);\n      }\n\n      break;\n  }\n\n  Promise.all(promises).then(function (values) {\n    return updateBoundingBox(planData);\n  });\n}\n\nfunction removeLayer(layerId, planData) {\n  var layerGraph = planData.sceneGraph.layers[layerId];\n\n  for (var lineID in layerGraph.lines) {\n    removeLine(planData, layerId, lineID);\n  }\n\n  for (var areaID in layerGraph.areas) {\n    removeArea(planData, layerId, areaID);\n  }\n\n  for (var itemID in layerGraph.items) {\n    removeItem(planData, layerId, itemID);\n  }\n\n  for (var holeID in layerGraph.holes) {\n    removeHole(planData, layerId, holeID);\n  }\n\n  delete planData.sceneGraph.layers[layerId];\n}\n\nfunction removeHole(planData, layerId, holeID) {\n  if (planData.sceneGraph.busyResources.layers[layerId].holes[holeID]) {\n    setTimeout(function () {\n      return removeHole(planData, layerId, holeID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].holes[holeID] = true;\n  var hole3D = planData.sceneGraph.layers[layerId].holes[holeID];\n\n  if (hole3D) {\n    planData.plan.remove(hole3D);\n    disposeObject(hole3D);\n    delete planData.sceneGraph.layers[layerId].holes[holeID];\n    delete planData.sceneGraph.LODs[holeID];\n    hole3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].holes[holeID] = false;\n}\n\nfunction removeLine(planData, layerId, lineID) {\n  if (planData.sceneGraph.busyResources.layers[layerId].lines[lineID]) {\n    setTimeout(function () {\n      return removeLine(planData, layerId, lineID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].lines[lineID] = true;\n  var line3D = planData.sceneGraph.layers[layerId].lines[lineID];\n\n  if (line3D) {\n    planData.plan.remove(line3D);\n    disposeObject(line3D);\n    delete planData.sceneGraph.layers[layerId].lines[lineID];\n    delete planData.sceneGraph.LODs[lineID];\n    line3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].lines[lineID] = false;\n}\n\nfunction removeArea(planData, layerId, areaID) {\n  if (planData.sceneGraph.busyResources.layers[layerId].areas[areaID]) {\n    setTimeout(function () {\n      return removeArea(planData, layerId, areaID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].areas[areaID] = true;\n  var area3D = planData.sceneGraph.layers[layerId].areas[areaID];\n\n  if (area3D) {\n    planData.plan.remove(area3D);\n    disposeObject(area3D);\n    delete planData.sceneGraph.layers[layerId].areas[areaID];\n    delete planData.sceneGraph.LODs[areaID];\n    area3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].areas[areaID] = false;\n}\n\nfunction removeItem(planData, layerId, itemID) {\n  if (planData.sceneGraph.busyResources.layers[layerId].items[itemID]) {\n    setTimeout(function () {\n      return removeItem(planData, layerId, itemID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].items[itemID] = true;\n  var item3D = planData.sceneGraph.layers[layerId].items[itemID];\n\n  if (item3D) {\n    planData.plan.remove(item3D);\n    disposeObject(item3D);\n    delete planData.sceneGraph.layers[layerId].items[itemID];\n    delete planData.sceneGraph.LODs[itemID];\n    item3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].items[itemID] = false;\n} //TODO generate an area's replace if vertex has been changed\n\n\nfunction addObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n  if (modifiedPath.length === 5) {\n    var addPromise = null,\n        addAction = null;\n\n    switch (modifiedPath[3]) {\n      case 'lines':\n        addPromise = addLine;\n        addAction = actions.linesActions;\n        break;\n\n      case 'areas':\n        addPromise = addArea;\n        addAction = actions.areaActions;\n        break;\n\n      case 'items':\n        addPromise = addItem;\n        addAction = actions.itemsActions;\n        break;\n\n      case 'holes':\n        addPromise = addHole;\n        addAction = actions.holesActions;\n        break;\n    }\n\n    if (addPromise) addPromise(sceneData, planData, layer, modifiedPath[4], catalog, addAction).then(function () {\n      return updateBoundingBox(planData);\n    });\n  }\n}\n\nfunction addHole(sceneData, planData, layer, holeID, catalog, holesActions) {\n  var holeData = layer.getIn(['holes', holeID]); // Create the hole object\n\n  return catalog.getElement(holeData.type).render3D(holeData, layer, sceneData).then(function (object) {\n    if (object instanceof Three.LOD) {\n      planData.sceneGraph.LODs[holeID] = object;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(object);\n    var line = layer.getIn(['lines', holeData.line]); // First of all I need to find the vertices of this line\n\n    var vertex0 = layer.vertices.get(line.vertices.get(0));\n    var vertex1 = layer.vertices.get(line.vertices.get(1));\n    var offset = holeData.offset;\n\n    if (vertex0.x > vertex1.x) {\n      var tmp = vertex0;\n      vertex0 = vertex1;\n      vertex1 = tmp;\n      offset = 1 - offset;\n    }\n\n    var distance = Math.sqrt(Math.pow(vertex0.x - vertex1.x, 2) + Math.pow(vertex0.y - vertex1.y, 2));\n    var alpha = Math.asin((vertex1.y - vertex0.y) / distance);\n    var boundingBox = new Three.Box3().setFromObject(pivot);\n    var center = [(boundingBox.max.x - boundingBox.min.x) / 2 + boundingBox.min.x, (boundingBox.max.y - boundingBox.min.y) / 2 + boundingBox.min.y, (boundingBox.max.z - boundingBox.min.z) / 2 + boundingBox.min.z];\n    var holeAltitude = holeData.properties.getIn(['altitude', 'length']);\n    var holeHeight = holeData.properties.getIn(['height', 'length']);\n    pivot.rotation.y = alpha;\n    pivot.position.x = vertex0.x + distance * offset * Math.cos(alpha) - center[2] * Math.sin(alpha);\n    pivot.position.y = holeAltitude + holeHeight / 2 - center[1] + layer.altitude;\n    pivot.position.z = -vertex0.y - distance * offset * Math.sin(alpha) - center[2] * Math.cos(alpha);\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].holes[holeData.id] = pivot;\n    applyInteract(pivot, function () {\n      return holesActions.selectHole(layer.id, holeData.id);\n    });\n    var opacity = layer.opacity;\n\n    if (holeData.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n  });\n}\n\nfunction updateHole(sceneData, oldSceneData, planData, layer, holeID, differences, catalog, holesActions, selfDestroy, selfBuild) {\n  var hole = layer.getIn(['holes', holeID]);\n  var oldHole = oldSceneData.getIn(['layers', layer.id, 'holes', holeID]);\n  var mesh = planData.sceneGraph.layers[layer.id].holes[holeID];\n  if (!mesh) return null;\n  return catalog.getElement(hole.type).updateRender3D(hole, layer, sceneData, mesh, oldHole, differences, selfDestroy, selfBuild);\n}\n\nfunction addLine(sceneData, planData, layer, lineID, catalog, linesActions) {\n  if (planData.sceneGraph.busyResources.layers[layer.id].lines[lineID]) {\n    setTimeout(function () {\n      return addLine(sceneData, planData, layer, lineID, catalog, linesActions);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layer.id].lines[lineID] = true;\n  var line = layer.getIn(['lines', lineID]); // First of all I need to find the vertices of this line\n\n  var vertex0 = layer.vertices.get(line.vertices.get(0));\n  var vertex1 = layer.vertices.get(line.vertices.get(1));\n\n  if (vertex0.x > vertex1.x) {\n    var tmp = vertex0;\n    vertex0 = vertex1;\n    vertex1 = tmp;\n  }\n\n  return catalog.getElement(line.type).render3D(line, layer, sceneData).then(function (line3D) {\n    if (line3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[line.id] = line3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(line3D);\n    pivot.position.x = vertex0.x;\n    pivot.position.y = layer.altitude;\n    pivot.position.z = -vertex0.y;\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].lines[lineID] = pivot;\n    applyInteract(pivot, function () {\n      return linesActions.selectLine(layer.id, line.id);\n    });\n    var opacity = layer.opacity;\n\n    if (line.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n    planData.sceneGraph.busyResources.layers[layer.id].lines[lineID] = false;\n  });\n}\n\nfunction updateLine(sceneData, oldSceneData, planData, layer, lineID, differences, catalog, linesActions, selfDestroy, selfBuild) {\n  var line = layer.getIn(['lines', lineID]);\n  var oldLine = oldSceneData.getIn(['layers', layer.id, 'lines', lineID]);\n  var mesh = planData.sceneGraph.layers[layer.id].lines[lineID];\n  if (!mesh) return null;\n  return catalog.getElement(line.type).updateRender3D(line, layer, sceneData, mesh, oldLine, differences, selfDestroy, selfBuild);\n}\n\nfunction addArea(sceneData, planData, layer, areaID, catalog, areaActions) {\n  if (planData.sceneGraph.busyResources.layers[layer.id].areas[areaID]) {\n    setTimeout(function () {\n      return addArea(sceneData, planData, layer, areaID, catalog, areaActions);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layer.id].areas[areaID] = true;\n  var area = layer.getIn(['areas', areaID]);\n\n  var interactFunction = function interactFunction() {\n    return areaActions.selectArea(layer.id, areaID);\n  };\n\n  return catalog.getElement(area.type).render3D(area, layer, sceneData).then(function (area3D) {\n    if (area3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[areaID] = area3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(area3D);\n    pivot.position.y = layer.altitude;\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].areas[areaID] = pivot;\n    applyInteract(pivot, interactFunction);\n    var opacity = layer.opacity;\n\n    if (area.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n    planData.sceneGraph.busyResources.layers[layer.id].areas[areaID] = false;\n  });\n}\n\nfunction updateArea(sceneData, oldSceneData, planData, layer, areaID, differences, catalog, areaActions, selfDestroy, selfBuild) {\n  var area = layer.getIn(['areas', areaID]);\n  var oldArea = oldSceneData.getIn(['layers', layer.id, 'areas', areaID]);\n  var mesh = planData.sceneGraph.layers[layer.id].areas[areaID];\n  if (!mesh) return null;\n  return catalog.getElement(area.type).updateRender3D(area, layer, sceneData, mesh, oldArea, differences, selfDestroy, selfBuild);\n}\n\nfunction addItem(sceneData, planData, layer, itemID, catalog, itemsActions) {\n  var item = layer.getIn(['items', itemID]);\n  return catalog.getElement(item.type).render3D(item, layer, sceneData).then(function (item3D) {\n    if (item3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[itemID] = item3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(item3D);\n    pivot.rotation.y = item.rotation * Math.PI / 180;\n    pivot.position.x = item.x;\n    pivot.position.y = layer.altitude;\n    pivot.position.z = -item.y;\n    applyInteract(item3D, function () {\n      itemsActions.selectItem(layer.id, item.id);\n    });\n    var opacity = layer.opacity;\n\n    if (item.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].items[item.id] = pivot;\n  });\n}\n\nfunction updateItem(sceneData, oldSceneData, planData, layer, itemID, differences, catalog, itemsActions, selfDestroy, selfBuild) {\n  var item = layer.getIn(['items', itemID]);\n  var oldItem = oldSceneData.getIn(['layers', layer.id, 'items', itemID]);\n  var mesh = planData.sceneGraph.layers[layer.id].items[itemID];\n  if (!mesh) return null;\n  return catalog.getElement(item.type).updateRender3D(item, layer, sceneData, mesh, oldItem, differences, selfDestroy, selfBuild);\n} // Apply interact function to children of an Object3D\n\n\nfunction applyInteract(object, interactFunction) {\n  object.traverse(function (child) {\n    if (child instanceof Three.Mesh) {\n      child.interact = interactFunction;\n    }\n  });\n} // Apply opacity to children of an Object3D\n\n\nfunction applyOpacity(object, opacity) {\n  object.traverse(function (child) {\n    if (child instanceof Three.Mesh) {\n      if (child.material instanceof Three.MultiMaterial) {\n        child.material.materials.forEach(function (materialChild) {\n          materialChild.transparent = true;\n\n          if (materialChild.maxOpacity) {\n            materialChild.opacity = Math.min(materialChild.maxOpacity, opacity);\n          } else if (materialChild.opacity && materialChild.opacity > opacity) {\n            materialChild.maxOpacity = materialChild.opacity;\n            materialChild.opacity = opacity;\n          }\n        });\n      } else if (child.material instanceof Array) {\n        child.material.forEach(function (material) {\n          material.transparent = true;\n\n          if (material.maxOpacity) {\n            material.opacity = Math.min(material.maxOpacity, opacity);\n          } else if (material.opacity && material.opacity > opacity) {\n            material.maxOpacity = material.opacity;\n            material.opacity = opacity;\n          }\n        });\n      } else {\n        child.material.transparent = true;\n\n        if (child.material.maxOpacity) {\n          child.material.opacity = Math.min(child.material.maxOpacity, opacity);\n        } else if (child.material.opacity && child.material.opacity > opacity) {\n          child.material.maxOpacity = child.material.opacity;\n          child.material.opacity = opacity;\n        }\n      }\n    }\n  });\n}\n\nfunction updateBoundingBox(planData) {\n  var newBoundingBox = new Three.Box3().setFromObject(planData.plan);\n\n  if (isFinite(newBoundingBox.max.x) && isFinite(newBoundingBox.min.x) && isFinite(newBoundingBox.max.y) && isFinite(newBoundingBox.min.y) && isFinite(newBoundingBox.max.z) && isFinite(newBoundingBox.min.z)) {\n    var newCenter = new Three.Vector3((newBoundingBox.max.x - newBoundingBox.min.x) / 2 + newBoundingBox.min.x, (newBoundingBox.max.y - newBoundingBox.min.y) / 2 + newBoundingBox.min.y, (newBoundingBox.max.z - newBoundingBox.min.z) / 2 + newBoundingBox.min.z);\n    planData.plan.position.sub(newCenter);\n    planData.grid.position.sub(newCenter);\n    newBoundingBox.min.sub(newCenter);\n    newBoundingBox.max.sub(newCenter);\n    planData.boundingBox = newBoundingBox;\n  }\n}\n/**\n * Filter the array of diffs\n * @param diffArray\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\n\n\nfunction filterDiffs(diffArray, sceneData, oldSceneData) {\n  return minimizeRemoveDiffsWhenSwitchingLayers(minimizeChangePropertiesAfterSelectionsDiffs(minimizeChangePropertiesDiffs(diffArray, sceneData, oldSceneData), sceneData, oldSceneData), sceneData, oldSceneData);\n}\n/**\n * Reduces the number of remove diffs when switching an hidden layer\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\n\n\nfunction minimizeRemoveDiffsWhenSwitchingLayers(diffArray, sceneData, oldSceneData) {\n  var foundDiff = void 0;\n  var i = void 0;\n\n  for (i = 0; i < diffArray.length && !foundDiff; i++) {\n    if (diffArray[i].path[1] === 'selectedLayer') {\n      foundDiff = diffArray[i];\n    }\n  }\n\n  if (foundDiff) {\n    if (!sceneData.getIn(['layers', oldSceneData.selectedLayer, 'visible'])) {\n      return diffArray.filter(function (_ref4) {\n        var op = _ref4.op,\n            path = _ref4.path;\n        return !(path[path.length - 1] === 'selected' && path[1] === 'layers' && path[2] === oldSceneData.selectedLayer) && !(op === 'remove' && path.indexOf(oldSceneData.selectedLayer) !== -1);\n      });\n    }\n  }\n\n  return diffArray;\n}\n/**\n * Reduces the number of change properties diffs for selected elements\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\n\n\nfunction minimizeChangePropertiesAfterSelectionsDiffs(diffArray, sceneData, oldSceneData) {\n  var idsFound = {};\n  diffArray.forEach(function (_ref5) {\n    var path = _ref5.path;\n\n    if (path[5] === 'selected') {\n      idsFound[path[4]] = path[4];\n    }\n  });\n  return diffArray.filter(function (_ref6) {\n    var path = _ref6.path;\n\n    if (path[5] === 'properties') {\n      return idsFound[path[4]] ? false : true;\n    }\n\n    return true;\n  });\n}\n/**\n * Reduces the number of change properties diffs\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\n\n\nfunction minimizeChangePropertiesDiffs(diffArray, sceneData, oldSceneData) {\n  var idsFound = {};\n  return diffArray.filter(function (_ref7) {\n    var path = _ref7.path;\n\n    if (path[5] === 'properties') {\n      return idsFound[path[4]] ? false : idsFound[path[4]] = true;\n    } else if (path[5] === 'misc') {\n      // Remove misc changes\n      return false;\n    }\n\n    return true;\n  });\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/components/viewer3d/scene-creator.js"],"names":["Three","createGrid","disposeObject","parseData","sceneData","actions","catalog","planData","sceneGraph","unit","layers","busyResources","width","height","LODs","plan","Object3D","name","grid","boundingBox","Box3","setFromObject","promises","forEach","layer","id","selectedLayer","visible","concat","createLayerObjects","Promise","all","then","value","updateBoundingBox","lines","holes","areas","items","altitude","line","push","addLine","linesActions","holeID","addHole","holesActions","area","addArea","areaActions","item","addItem","itemsActions","updateScene","oldSceneData","diffArray","splitted","map","el","op","path","split","filteredDiffs","filterDiffs","filter","_ref","_ref2","_ref3","getIn","length","removeLayer","replaceObject","addObject","removeObject","layerSelectedID","layerSelected","layerGraph","lineID","removeLine","areaID","removeArea","itemID","removeItem","removeHole","modifiedPath","vertex","lineHoles","newHoleData","getElement","type","updateRender3D","updateHole","slice","updateLine","updateArea","updateItem","_layerGraph","_lineID","_areaID","_lineID2","_areaID2","_itemID","_holeID","values","layerId","setTimeout","hole3D","remove","line3D","area3D","item3D","addPromise","addAction","holeData","render3D","object","LOD","pivot","add","vertex0","vertices","get","vertex1","offset","x","tmp","distance","Math","sqrt","pow","y","alpha","asin","center","max","min","z","holeAltitude","properties","holeHeight","rotation","position","cos","sin","applyInteract","selectHole","opacity","selected","applyOpacity","differences","selfDestroy","selfBuild","hole","oldHole","mesh","selectLine","oldLine","interactFunction","selectArea","oldArea","PI","selectItem","oldItem","traverse","child","Mesh","interact","material","MultiMaterial","materials","materialChild","transparent","maxOpacity","Array","newBoundingBox","isFinite","newCenter","Vector3","sub","minimizeRemoveDiffsWhenSwitchingLayers","minimizeChangePropertiesAfterSelectionsDiffs","minimizeChangePropertiesDiffs","foundDiff","i","_ref4","indexOf","idsFound","_ref5","_ref6","_ref7"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAEA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgD;AAErD,MAAIC,QAAQ,GAAG,EAAf;AAEAA,EAAAA,QAAQ,CAACC,UAAT,GAAsB;AACpBC,IAAAA,IAAI,EAAEL,SAAS,CAACK,IADI;AAEpBC,IAAAA,MAAM,EAAE,EAFY;AAGpBC,IAAAA,aAAa,EAAE;AAAED,MAAAA,MAAM,EAAE;AAAV,KAHK;AAIpBE,IAAAA,KAAK,EAAER,SAAS,CAACQ,KAJG;AAKpBC,IAAAA,MAAM,EAAET,SAAS,CAACS,MALE;AAMpBC,IAAAA,IAAI,EAAE;AANc,GAAtB;AASAP,EAAAA,QAAQ,CAACQ,IAAT,GAAgB,IAAIf,KAAK,CAACgB,QAAV,EAAhB;AACAT,EAAAA,QAAQ,CAACQ,IAAT,CAAcE,IAAd,GAAqB,MAArB,CAdqD,CAgBrD;;AACAV,EAAAA,QAAQ,CAACW,IAAT,GAAgBjB,UAAU,CAACG,SAAD,CAA1B;AACAG,EAAAA,QAAQ,CAACW,IAAT,CAAcD,IAAd,GAAqB,MAArB;AAEAV,EAAAA,QAAQ,CAACY,WAAT,GAAuB,IAAInB,KAAK,CAACoB,IAAV,GAAiBC,aAAjB,CAA+Bd,QAAQ,CAACW,IAAxC,CAAvB;AACAX,EAAAA,QAAQ,CAACY,WAAT,CAAqBF,IAArB,GAA4B,aAA5B;AAEA,MAAIK,QAAQ,GAAG,EAAf;AAEAlB,EAAAA,SAAS,CAACM,MAAV,CAAiBa,OAAjB,CAAyB,UAAUC,KAAV,EAAiB;AAExC,QAAIA,KAAK,CAACC,EAAN,KAAarB,SAAS,CAACsB,aAAvB,IAAwCF,KAAK,CAACG,OAAlD,EAA2D;AACzDL,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgBC,kBAAkB,CAACL,KAAD,EAAQjB,QAAR,EAAkBH,SAAlB,EAA6BC,OAA7B,EAAsCC,OAAtC,CAAlC,CAAX;AACD;AACF,GALD;AAOAwB,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBU,IAAtB,CAA2B,UAAUC,KAAV,EAAiB;AAC1C,WAAOC,iBAAiB,CAAC3B,QAAD,CAAxB;AACD,GAFD;AAIA,SAAOA,QAAP;AACD;;AAED,SAASsB,kBAAT,CAA4BL,KAA5B,EAAmCjB,QAAnC,EAA6CH,SAA7C,EAAwDC,OAAxD,EAAiEC,OAAjE,EAA0E;AAExE,MAAIgB,QAAQ,GAAG,EAAf;AAEAf,EAAAA,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,IAAuC;AACrCA,IAAAA,EAAE,EAAED,KAAK,CAACC,EAD2B;AAErCU,IAAAA,KAAK,EAAE,EAF8B;AAGrCC,IAAAA,KAAK,EAAE,EAH8B;AAIrCC,IAAAA,KAAK,EAAE,EAJ8B;AAKrCC,IAAAA,KAAK,EAAE,EAL8B;AAMrCX,IAAAA,OAAO,EAAEH,KAAK,CAACG,OANsB;AAOrCY,IAAAA,QAAQ,EAAEf,KAAK,CAACe;AAPqB,GAAvC;AAUAhC,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,IAAqD;AACnDA,IAAAA,EAAE,EAAED,KAAK,CAACC,EADyC;AAEnDU,IAAAA,KAAK,EAAE,EAF4C;AAGnDC,IAAAA,KAAK,EAAE,EAH4C;AAInDC,IAAAA,KAAK,EAAE,EAJ4C;AAKnDC,IAAAA,KAAK,EAAE;AAL4C,GAArD,CAdwE,CAsBxE;;AACAd,EAAAA,KAAK,CAACW,KAAN,CAAYZ,OAAZ,CAAoB,UAAUiB,IAAV,EAAgB;AAClClB,IAAAA,QAAQ,CAACmB,IAAT,CAAcC,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BgB,IAAI,CAACf,EAAlC,EAAsCnB,OAAtC,EAA+CD,OAAO,CAACsC,YAAvD,CAArB;AACAH,IAAAA,IAAI,CAACJ,KAAL,CAAWb,OAAX,CAAmB,UAAUqB,MAAV,EAAkB;AACnCtB,MAAAA,QAAQ,CAACmB,IAAT,CAAcI,OAAO,CAACzC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BoB,MAA7B,EAAqCtC,OAArC,EAA8CD,OAAO,CAACyC,YAAtD,CAArB;AACD,KAFD;AAGD,GALD,EAvBwE,CA8BxE;;AACAtB,EAAAA,KAAK,CAACa,KAAN,CAAYd,OAAZ,CAAoB,UAAUwB,IAAV,EAAgB;AAClCzB,IAAAA,QAAQ,CAACmB,IAAT,CAAcO,OAAO,CAAC5C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BuB,IAAI,CAACtB,EAAlC,EAAsCnB,OAAtC,EAA+CD,OAAO,CAAC4C,WAAvD,CAArB;AACD,GAFD,EA/BwE,CAmCxE;;AACAzB,EAAAA,KAAK,CAACc,KAAN,CAAYf,OAAZ,CAAoB,UAAU2B,IAAV,EAAgB;AAClC5B,IAAAA,QAAQ,CAACmB,IAAT,CAAcU,OAAO,CAAC/C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B0B,IAAI,CAACzB,EAAlC,EAAsCnB,OAAtC,EAA+CD,OAAO,CAAC+C,YAAvD,CAArB;AACD,GAFD;AAIA,SAAO9B,QAAP;AACD;;AAED,OAAO,SAAS+B,WAAT,CAAqB9C,QAArB,EAA+BH,SAA/B,EAA0CkD,YAA1C,EAAwDC,SAAxD,EAAmElD,OAAnE,EAA4EC,OAA5E,EAAqF;AAE1F,MAAIkD,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAc,UAAUC,EAAV,EAAc;AACzC,WAAO;AAAEC,MAAAA,EAAE,EAAED,EAAE,CAACC,EAAT;AAAaC,MAAAA,IAAI,EAAEF,EAAE,CAACE,IAAH,CAAQC,KAAR,CAAc,GAAd,CAAnB;AAAuC5B,MAAAA,KAAK,EAAEyB,EAAE,CAACzB;AAAjD,KAAP;AACD,GAFc,CAAf;AAGA,MAAI6B,aAAa,GAAGC,WAAW,CAACP,QAAD,EAAWpD,SAAX,EAAsBkD,YAAtB,CAA/B,CAL0F,CAO1F;;AACAQ,EAAAA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAqB,UAAUC,IAAV,EAAgB;AACnD,QAAIL,IAAI,GAAGK,IAAI,CAACL,IAAhB;AACA,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAY,UAAnB;AACD,GAHe,CAAhB;AAIAE,EAAAA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAqB,UAAUE,KAAV,EAAiB;AACpD,QAAIN,IAAI,GAAGM,KAAK,CAACN,IAAjB;AACA,WAAOA,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAnB;AACD,GAHe,CAAhB,CAZ0F,CAgB1F;;AAEAE,EAAAA,aAAa,CAACvC,OAAd,CAAsB,UAAU4C,KAAV,EAAiB;AACrC,QAAIR,EAAE,GAAGQ,KAAK,CAACR,EAAf;AAAA,QACIC,IAAI,GAAGO,KAAK,CAACP,IADjB;AAAA,QAEI3B,KAAK,GAAGkC,KAAK,CAAClC,KAFlB;AAIA;;AACA,QAAI2B,IAAI,CAAC,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AAExB,UAAIpC,KAAK,GAAGpB,SAAS,CAACgE,KAAV,CAAgB,CAAC,QAAD,EAAWR,IAAI,CAAC,CAAD,CAAf,CAAhB,CAAZ;;AAEA,UAAIA,IAAI,CAACS,MAAL,KAAgB,CAAhB,IAAqBV,EAAE,KAAK,QAAhC,EAA0C;AACxCW,QAAAA,WAAW,CAACV,IAAI,CAAC,CAAD,CAAL,EAAUrD,QAAV,CAAX;AACD,OAFD,MAEO,IAAIqD,IAAI,CAACS,MAAL,GAAc,CAAlB,EAAqB;AAC1B,gBAAQV,EAAR;AACE,eAAK,SAAL;AACEY,YAAAA,aAAa,CAACX,IAAD,EAAOpC,KAAP,EAAcjB,QAAd,EAAwBF,OAAxB,EAAiCD,SAAjC,EAA4CkD,YAA5C,EAA0DhD,OAA1D,CAAb;AACA;;AACF,eAAK,KAAL;AACEkE,YAAAA,SAAS,CAACZ,IAAD,EAAOpC,KAAP,EAAcjB,QAAd,EAAwBF,OAAxB,EAAiCD,SAAjC,EAA4CkD,YAA5C,EAA0DhD,OAA1D,CAAT;AACA;;AACF,eAAK,QAAL;AACEmE,YAAAA,YAAY,CAACb,IAAD,EAAOpC,KAAP,EAAcjB,QAAd,EAAwBF,OAAxB,EAAiCD,SAAjC,EAA4CkD,YAA5C,EAA0DhD,OAA1D,CAAZ;AACA;AATJ;AAWD;AACF,KAnBD,MAmBO,IAAIsD,IAAI,CAAC,CAAD,CAAJ,KAAY,eAAhB,EAAiC;AACtC,UAAIc,eAAe,GAAGzC,KAAtB;AACA,UAAI0C,aAAa,GAAGvE,SAAS,CAACgE,KAAV,CAAgB,CAAC,QAAD,EAAWM,eAAX,CAAhB,CAApB,CAFsC,CAGtC;;AACA,UAAI,CAACC,aAAa,CAAChD,OAAnB,EAA4B;AAC1B;AACA,YAAIL,QAAQ,GAAGO,kBAAkB,CAAC8C,aAAD,EAAgBpE,QAAhB,EAA0BH,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,CAAjC;AACAwB,QAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBU,IAAtB,CAA2B,YAAY;AACrC,iBAAOE,iBAAiB,CAAC3B,QAAD,CAAxB;AACD,SAFD;AAGD;;AAED,UAAIqE,UAAU,GAAGrE,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B4C,YAAY,CAAC5B,aAAxC,CAAjB;;AAEA,UAAIkD,UAAJ,EAAgB;AACd,YAAI,CAACA,UAAU,CAACjD,OAAhB,EAAyB;AACvB;AACA,eAAK,IAAIkD,MAAT,IAAmBD,UAAU,CAACzC,KAA9B,EAAqC;AACnC2C,YAAAA,UAAU,CAACvE,QAAD,EAAWqE,UAAU,CAACnD,EAAtB,EAA0BoD,MAA1B,CAAV;AACD;;AAAA,eAAK,IAAIE,MAAT,IAAmBH,UAAU,CAACvC,KAA9B,EAAqC;AACpC2C,YAAAA,UAAU,CAACzE,QAAD,EAAWqE,UAAU,CAACnD,EAAtB,EAA0BsD,MAA1B,CAAV;AACD;;AAAA,eAAK,IAAIE,MAAT,IAAmBL,UAAU,CAACtC,KAA9B,EAAqC;AACpC4C,YAAAA,UAAU,CAAC3E,QAAD,EAAWqE,UAAU,CAACnD,EAAtB,EAA0BwD,MAA1B,CAAV;AACD;;AAAA,eAAK,IAAIrC,MAAT,IAAmBgC,UAAU,CAACxC,KAA9B,EAAqC;AACpC+C,YAAAA,UAAU,CAAC5E,QAAD,EAAWqE,UAAU,CAACnD,EAAtB,EAA0BmB,MAA1B,CAAV;AACD;AACF;AACF;AACF;AACF,GAtDD;AAuDA,SAAOrC,QAAP;AACD;;AAED,SAASgE,aAAT,CAAuBa,YAAvB,EAAqC5D,KAArC,EAA4CjB,QAA5C,EAAsDF,OAAtD,EAA+DD,SAA/D,EAA0EkD,YAA1E,EAAwFhD,OAAxF,EAAiG;AAE/F,MAAIgB,QAAQ,GAAG,EAAf;;AAEA,UAAQ8D,YAAY,CAAC,CAAD,CAApB;AACE,SAAK,UAAL;AACE,UAAIA,YAAY,CAAC,CAAD,CAAZ,KAAoB,UAAxB,EAAoC;AAClC,YAAIC,MAAM,GAAG7D,KAAK,CAAC4C,KAAN,CAAY,CAAC,UAAD,EAAagB,YAAY,CAAC,CAAD,CAAzB,CAAZ,CAAb;;AAEA,YAAIA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAApB,IAA2BA,YAAY,CAAC,CAAD,CAAZ,KAAoB,GAAnD,EAAwD;AACtDC,UAAAA,MAAM,CAAClD,KAAP,CAAaZ,OAAb,CAAqB,UAAUsD,MAAV,EAAkB;AACrC,gBAAIS,SAAS,GAAGhC,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BoD,MAA9B,EAAsC,OAAtC,CAAnB,CAAhB;AACA,gBAAIS,SAAJ,EAAeA,SAAS,CAAC/D,OAAV,CAAkB,UAAUqB,MAAV,EAAkB;AACjD2B,cAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,OAAV,EAAmB3B,MAAnB,EAA2B,UAA3B,CAAD,EAAyCpB,KAAzC,EAAgDjB,QAAhD,EAA0DF,OAA1D,EAAmED,SAAnE,EAA8EkD,YAA9E,EAA4FhD,OAA5F,CAAb;AACD,aAFc;AAGf,mBAAOiE,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,OAAV,EAAmBM,MAAnB,CAAD,EAA6BrD,KAA7B,EAAoCjB,QAApC,EAA8CF,OAA9C,EAAuDD,SAAvD,EAAkEkD,YAAlE,EAAgFhD,OAAhF,CAApB;AACD,WAND;AAOA+E,UAAAA,MAAM,CAAChD,KAAP,CAAad,OAAb,CAAqB,UAAUwD,MAAV,EAAkB;AACrC,mBAAOR,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,OAAV,EAAmBQ,MAAnB,CAAD,EAA6BvD,KAA7B,EAAoCjB,QAApC,EAA8CF,OAA9C,EAAuDD,SAAvD,EAAkEkD,YAAlE,EAAgFhD,OAAhF,CAApB;AACD,WAFD;AAGD;;AAED,YAAI8E,YAAY,CAAC,CAAD,CAAZ,KAAoB,OAAxB,EAAiC;AAC/B,cAAIL,MAAM,GAAGM,MAAM,CAACjB,KAAP,CAAa,CAAC,OAAD,EAAU,CAAC,CAACgB,YAAY,CAAC,CAAD,CAAxB,CAAb,CAAb;AACAb,UAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,OAAV,EAAmBQ,MAAnB,CAAD,EAA6BvD,KAA7B,EAAoCjB,QAApC,EAA8CF,OAA9C,EAAuDD,SAAvD,EAAkEkD,YAAlE,EAAgFhD,OAAhF,CAAb;AACD;AACF;;AACD;;AACF,SAAK,OAAL;AACE,UAAIiF,WAAW,GAAG/D,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUgB,YAAY,CAAC,CAAD,CAAtB,CAAZ,CAAlB;;AAEA,UAAI9E,OAAO,CAACkF,UAAR,CAAmBD,WAAW,CAACE,IAA/B,EAAqCC,cAAzC,EAAyD;AACvDpE,QAAAA,QAAQ,CAACmB,IAAT,CAAckD,UAAU,CAACvF,SAAD,EAAYkD,YAAZ,EAA0B/C,QAA1B,EAAoCiB,KAApC,EAA2C4D,YAAY,CAAC,CAAD,CAAvD,EAA4DA,YAAY,CAACQ,KAAb,CAAmB,CAAnB,CAA5D,EAAmFtF,OAAnF,EAA4FD,OAAO,CAACyC,YAApG,EAAkH,YAAY;AACpJ,iBAAOqC,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB8D,WAAW,CAAC9D,EAAjC,CAAjB;AACD,SAFuB,EAErB,YAAY;AACb,iBAAOoB,OAAO,CAACzC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B+D,WAAW,CAAC9D,EAAzC,EAA6CnB,OAA7C,EAAsDD,OAAO,CAACyC,YAA9D,CAAd;AACD,SAJuB,CAAxB;AAKD,OAND,MAMO;AACL,YAAI+B,MAAM,GAAGU,WAAW,CAAC/C,IAAzB;;AACA,YAAI4C,YAAY,CAAC,CAAD,CAAZ,KAAoB,UAAxB,EAAoC;AAClC;AACAD,UAAAA,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB8D,WAAW,CAAC9D,EAAjC,CAAV;AACAH,UAAAA,QAAQ,CAACmB,IAAT,CAAcI,OAAO,CAACzC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B+D,WAAW,CAAC9D,EAAzC,EAA6CnB,OAA7C,EAAsDD,OAAO,CAACyC,YAA9D,CAArB;AACD,SAJD,MAIO;AACLtB,UAAAA,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUS,MAAV,EAAkB,OAAlB,CAAZ,EAAwCtD,OAAxC,CAAgD,UAAUqB,MAAV,EAAkB;AAChEuC,YAAAA,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBmB,MAArB,CAAV;AACD,WAFD;AAGAkC,UAAAA,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBoD,MAArB,CAAV;AACAvD,UAAAA,QAAQ,CAACmB,IAAT,CAAcC,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BqD,MAA7B,EAAqCvE,OAArC,EAA8CD,OAAO,CAACsC,YAAtD,CAArB;AACAnB,UAAAA,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUS,MAAV,EAAkB,OAAlB,CAAZ,EAAwCtD,OAAxC,CAAgD,UAAUqB,MAAV,EAAkB;AAChEtB,YAAAA,QAAQ,CAACmB,IAAT,CAAcI,OAAO,CAACzC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BoB,MAA7B,EAAqCtC,OAArC,EAA8CD,OAAO,CAACyC,YAAtD,CAArB;AACD,WAFD;AAGD;AACF;;AACD;;AACF,SAAK,OAAL;AACE,UAAIN,IAAI,GAAGhB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUgB,YAAY,CAAC,CAAD,CAAtB,CAAZ,CAAX;;AAEA,UAAI9E,OAAO,CAACkF,UAAR,CAAmBhD,IAAI,CAACiD,IAAxB,EAA8BC,cAAlC,EAAkD;AAChDpE,QAAAA,QAAQ,CAACmB,IAAT,CAAcoD,UAAU,CAACzF,SAAD,EAAYkD,YAAZ,EAA0B/C,QAA1B,EAAoCiB,KAApC,EAA2C4D,YAAY,CAAC,CAAD,CAAvD,EAA4DA,YAAY,CAACQ,KAAb,CAAmB,CAAnB,CAA5D,EAAmFtF,OAAnF,EAA4FD,OAAO,CAACsC,YAApG,EAAkH,YAAY;AACpJ,iBAAOmC,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAjB;AACD,SAFuB,EAErB,YAAY;AACb,iBAAO1C,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAACsC,YAA/D,CAAd;AACD,SAJuB,CAAxB;AAKD,OAND,MAMO;AACLmC,QAAAA,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAV;AACA9D,QAAAA,QAAQ,CAACmB,IAAT,CAAcC,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAACsC,YAA/D,CAArB;AACD;;AACD;;AACF,SAAK,OAAL;AACE,UAAII,IAAI,GAAGvB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUgB,YAAY,CAAC,CAAD,CAAtB,CAAZ,CAAX;;AAEA,UAAI9E,OAAO,CAACkF,UAAR,CAAmBzC,IAAI,CAAC0C,IAAxB,EAA8BC,cAAlC,EAAkD;AAChDpE,QAAAA,QAAQ,CAACmB,IAAT,CAAcqD,UAAU,CAAC1F,SAAD,EAAYkD,YAAZ,EAA0B/C,QAA1B,EAAoCiB,KAApC,EAA2C4D,YAAY,CAAC,CAAD,CAAvD,EAA4DA,YAAY,CAACQ,KAAb,CAAmB,CAAnB,CAA5D,EAAmFtF,OAAnF,EAA4FD,OAAO,CAAC4C,WAApG,EAAiH,YAAY;AACnJ,iBAAO+B,UAAU,CAACzE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAjB;AACD,SAFuB,EAErB,YAAY;AACb,iBAAOpC,OAAO,CAAC5C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAAC4C,WAA/D,CAAd;AACD,SAJuB,CAAxB;AAKD,OAND,MAMO;AACL,YAAI1C,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCY,KAArC,CAA2C+C,YAAY,CAAC,CAAD,CAAvD,CAAJ,EAAiE;AAC/DJ,UAAAA,UAAU,CAACzE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAV;AACD;;AACD9D,QAAAA,QAAQ,CAACmB,IAAT,CAAcO,OAAO,CAAC5C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAAC4C,WAA/D,CAArB;AACD;;AACD;;AACF,SAAK,OAAL;AACE,UAAIC,IAAI,GAAG1B,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUgB,YAAY,CAAC,CAAD,CAAtB,CAAZ,CAAX;;AAEA,UAAI9E,OAAO,CAACkF,UAAR,CAAmBtC,IAAI,CAACuC,IAAxB,EAA8BC,cAAlC,EAAkD;AAChDpE,QAAAA,QAAQ,CAACmB,IAAT,CAAcsD,UAAU,CAAC3F,SAAD,EAAYkD,YAAZ,EAA0B/C,QAA1B,EAAoCiB,KAApC,EAA2C4D,YAAY,CAAC,CAAD,CAAvD,EAA4DA,YAAY,CAACQ,KAAb,CAAmB,CAAnB,CAA5D,EAAmFtF,OAAnF,EAA4FD,OAAO,CAAC+C,YAApG,EAAkH,YAAY;AACpJ,iBAAO8B,UAAU,CAAC3E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAjB;AACD,SAFuB,EAErB,YAAY;AACb,iBAAOjC,OAAO,CAAC/C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAAC+C,YAA/D,CAAd;AACD,SAJuB,CAAxB;AAKD,OAND,MAMO;AACL8B,QAAAA,UAAU,CAAC3E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAV;AACA9D,QAAAA,QAAQ,CAACmB,IAAT,CAAcU,OAAO,CAAC/C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuDD,OAAO,CAAC+C,YAA/D,CAArB;AACD;;AACD;;AAEF,SAAK,SAAL;AACE,UAAI,CAAC5B,KAAK,CAACG,OAAX,EAAoB;AAClB,YAAIqE,WAAW,GAAGzF,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,CAAlB;;AAEA,aAAK,IAAIwE,OAAT,IAAoBD,WAAW,CAAC7D,KAAhC,EAAuC;AACrC2C,UAAAA,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBwE,OAArB,CAAV;AACD;;AAAA,aAAK,IAAIC,OAAT,IAAoBF,WAAW,CAAC3D,KAAhC,EAAuC;AACtC2C,UAAAA,UAAU,CAACzE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqByE,OAArB,CAAV;AACD;;AAAA,aAAK,IAAIjB,MAAT,IAAmBe,WAAW,CAAC1D,KAA/B,EAAsC;AACrC4C,UAAAA,UAAU,CAAC3E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBwD,MAArB,CAAV;AACD;;AAAA,aAAK,IAAIrC,MAAT,IAAmBoD,WAAW,CAAC5D,KAA/B,EAAsC;AACrC+C,UAAAA,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBmB,MAArB,CAAV;AACD;AACF,OAZD,MAYO;AACLtB,QAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgBC,kBAAkB,CAACL,KAAD,EAAQjB,QAAR,EAAkBH,SAAlB,EAA6BC,OAA7B,EAAsCC,OAAtC,CAAlC,CAAX;AACD;;AAED;;AAEF,SAAK,SAAL;AACA,SAAK,UAAL;AACE,UAAIsE,UAAU,GAAGrE,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,CAAjB;;AACA,WAAK,IAAI0E,QAAT,IAAqBvB,UAAU,CAACzC,KAAhC,EAAuC;AACrC2C,QAAAA,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB0E,QAArB,CAAV;AACD;;AAAA,WAAK,IAAIC,QAAT,IAAqBxB,UAAU,CAACvC,KAAhC,EAAuC;AACtC2C,QAAAA,UAAU,CAACzE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2E,QAArB,CAAV;AACD;;AAAA,WAAK,IAAIC,OAAT,IAAoBzB,UAAU,CAACtC,KAA/B,EAAsC;AACrC4C,QAAAA,UAAU,CAAC3E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB4E,OAArB,CAAV;AACD;;AAAA,WAAK,IAAIC,OAAT,IAAoB1B,UAAU,CAACxC,KAA/B,EAAsC;AACrC+C,QAAAA,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB6E,OAArB,CAAV;AACD;;AAAAhF,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,MAAT,CAAgBC,kBAAkB,CAACL,KAAD,EAAQjB,QAAR,EAAkBH,SAAlB,EAA6BC,OAA7B,EAAsCC,OAAtC,CAAlC,CAAX;AA9HL;;AAiIAwB,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBU,IAAtB,CAA2B,UAAUuE,MAAV,EAAkB;AAC3C,WAAOrE,iBAAiB,CAAC3B,QAAD,CAAxB;AACD,GAFD;AAGD;;AAED,SAASkE,YAAT,CAAsBW,YAAtB,EAAoC5D,KAApC,EAA2CjB,QAA3C,EAAqDF,OAArD,EAA8DD,SAA9D,EAAyEkD,YAAzE,EAAuFhD,OAAvF,EAAgG;AAE9F,MAAIgB,QAAQ,GAAG,EAAf;;AACA,UAAQ8D,YAAY,CAAC,CAAD,CAApB;AACE,SAAK,OAAL;AACE;AACA,UAAIP,MAAM,GAAGO,YAAY,CAAC,CAAD,CAAzB;AACA9B,MAAAA,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BoD,MAA9B,EAAsC,OAAtC,CAAnB,EAAmEtD,OAAnE,CAA2E,UAAUqB,MAAV,EAAkB;AAC3FuC,QAAAA,UAAU,CAAC5E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBmB,MAArB,CAAV;AACD,OAFD;AAGAkC,MAAAA,UAAU,CAACvE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqBoD,MAArB,CAAV;;AACA,UAAIO,YAAY,CAACf,MAAb,GAAsB,CAA1B,EAA6B;AAC3B;AACA/C,QAAAA,QAAQ,CAACmB,IAAT,CAAcC,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BqD,MAA7B,EAAqCvE,OAArC,EAA8CD,OAAO,CAACsC,YAAtD,CAArB;AACAnB,QAAAA,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUS,MAAV,EAAkB,OAAlB,CAAZ,EAAwCtD,OAAxC,CAAgD,UAAUqB,MAAV,EAAkB;AAChEtB,UAAAA,QAAQ,CAACmB,IAAT,CAAcI,OAAO,CAACzC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BoB,MAA7B,EAAqCtC,OAArC,EAA8CD,OAAO,CAACyC,YAAtD,CAArB;AACD,SAFD;AAGD;;AACD;;AACF,SAAK,OAAL;AACE,UAAIsC,YAAY,CAACf,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACAW,QAAAA,UAAU,CAACzE,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAV;AACD;;AACD;;AACF,SAAK,OAAL;AACE,UAAIA,YAAY,CAACf,MAAb,KAAwB,CAA5B,EAA+B;AAC7B;AACAa,QAAAA,UAAU,CAAC3E,QAAD,EAAWiB,KAAK,CAACC,EAAjB,EAAqB2D,YAAY,CAAC,CAAD,CAAjC,CAAV;AACD;;AACD;AA3BJ;;AA8BAtD,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAsBU,IAAtB,CAA2B,UAAUuE,MAAV,EAAkB;AAC3C,WAAOrE,iBAAiB,CAAC3B,QAAD,CAAxB;AACD,GAFD;AAGD;;AAED,SAAS+D,WAAT,CAAqBkC,OAArB,EAA8BjG,QAA9B,EAAwC;AACtC,MAAIqE,UAAU,GAAGrE,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,CAAjB;;AAEA,OAAK,IAAI3B,MAAT,IAAmBD,UAAU,CAACzC,KAA9B,EAAqC;AACnC2C,IAAAA,UAAU,CAACvE,QAAD,EAAWiG,OAAX,EAAoB3B,MAApB,CAAV;AACD;;AAAA,OAAK,IAAIE,MAAT,IAAmBH,UAAU,CAACvC,KAA9B,EAAqC;AACpC2C,IAAAA,UAAU,CAACzE,QAAD,EAAWiG,OAAX,EAAoBzB,MAApB,CAAV;AACD;;AAAA,OAAK,IAAIE,MAAT,IAAmBL,UAAU,CAACtC,KAA9B,EAAqC;AACpC4C,IAAAA,UAAU,CAAC3E,QAAD,EAAWiG,OAAX,EAAoBvB,MAApB,CAAV;AACD;;AAAA,OAAK,IAAIrC,MAAT,IAAmBgC,UAAU,CAACxC,KAA9B,EAAqC;AACpC+C,IAAAA,UAAU,CAAC5E,QAAD,EAAWiG,OAAX,EAAoB5D,MAApB,CAAV;AACD;;AAAA,SAAOrC,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,CAAP;AACF;;AAED,SAASrB,UAAT,CAAoB5E,QAApB,EAA8BiG,OAA9B,EAAuC5D,MAAvC,EAA+C;AAE7C,MAAIrC,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDpE,KAAlD,CAAwDQ,MAAxD,CAAJ,EAAqE;AACnE6D,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAOtB,UAAU,CAAC5E,QAAD,EAAWiG,OAAX,EAAoB5D,MAApB,CAAjB;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAEDrC,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDpE,KAAlD,CAAwDQ,MAAxD,IAAkE,IAAlE;AAEA,MAAI8D,MAAM,GAAGnG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCpE,KAApC,CAA0CQ,MAA1C,CAAb;;AAEA,MAAI8D,MAAJ,EAAY;AACVnG,IAAAA,QAAQ,CAACQ,IAAT,CAAc4F,MAAd,CAAqBD,MAArB;AACAxG,IAAAA,aAAa,CAACwG,MAAD,CAAb;AACA,WAAOnG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCpE,KAApC,CAA0CQ,MAA1C,CAAP;AACA,WAAOrC,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyB8B,MAAzB,CAAP;AACA8D,IAAAA,MAAM,GAAG,IAAT;AACAxE,IAAAA,iBAAiB,CAAC3B,QAAD,CAAjB;AACD;;AAEDA,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDpE,KAAlD,CAAwDQ,MAAxD,IAAkE,KAAlE;AACD;;AAED,SAASkC,UAAT,CAAoBvE,QAApB,EAA8BiG,OAA9B,EAAuC3B,MAAvC,EAA+C;AAE7C,MAAItE,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDrE,KAAlD,CAAwD0C,MAAxD,CAAJ,EAAqE;AACnE4B,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAO3B,UAAU,CAACvE,QAAD,EAAWiG,OAAX,EAAoB3B,MAApB,CAAjB;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAEDtE,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDrE,KAAlD,CAAwD0C,MAAxD,IAAkE,IAAlE;AAEA,MAAI+B,MAAM,GAAGrG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCrE,KAApC,CAA0C0C,MAA1C,CAAb;;AAEA,MAAI+B,MAAJ,EAAY;AACVrG,IAAAA,QAAQ,CAACQ,IAAT,CAAc4F,MAAd,CAAqBC,MAArB;AACA1G,IAAAA,aAAa,CAAC0G,MAAD,CAAb;AACA,WAAOrG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCrE,KAApC,CAA0C0C,MAA1C,CAAP;AACA,WAAOtE,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyB+D,MAAzB,CAAP;AACA+B,IAAAA,MAAM,GAAG,IAAT;AACA1E,IAAAA,iBAAiB,CAAC3B,QAAD,CAAjB;AACD;;AAEDA,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDrE,KAAlD,CAAwD0C,MAAxD,IAAkE,KAAlE;AACD;;AAED,SAASG,UAAT,CAAoBzE,QAApB,EAA8BiG,OAA9B,EAAuCzB,MAAvC,EAA+C;AAE7C,MAAIxE,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDnE,KAAlD,CAAwD0C,MAAxD,CAAJ,EAAqE;AACnE0B,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAOzB,UAAU,CAACzE,QAAD,EAAWiG,OAAX,EAAoBzB,MAApB,CAAjB;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAEDxE,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDnE,KAAlD,CAAwD0C,MAAxD,IAAkE,IAAlE;AAEA,MAAI8B,MAAM,GAAGtG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCnE,KAApC,CAA0C0C,MAA1C,CAAb;;AAEA,MAAI8B,MAAJ,EAAY;AACVtG,IAAAA,QAAQ,CAACQ,IAAT,CAAc4F,MAAd,CAAqBE,MAArB;AACA3G,IAAAA,aAAa,CAAC2G,MAAD,CAAb;AACA,WAAOtG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoCnE,KAApC,CAA0C0C,MAA1C,CAAP;AACA,WAAOxE,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyBiE,MAAzB,CAAP;AACA8B,IAAAA,MAAM,GAAG,IAAT;AACA3E,IAAAA,iBAAiB,CAAC3B,QAAD,CAAjB;AACD;;AAEDA,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDnE,KAAlD,CAAwD0C,MAAxD,IAAkE,KAAlE;AACD;;AAED,SAASG,UAAT,CAAoB3E,QAApB,EAA8BiG,OAA9B,EAAuCvB,MAAvC,EAA+C;AAE7C,MAAI1E,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDlE,KAAlD,CAAwD2C,MAAxD,CAAJ,EAAqE;AACnEwB,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAOvB,UAAU,CAAC3E,QAAD,EAAWiG,OAAX,EAAoBvB,MAApB,CAAjB;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAED1E,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDlE,KAAlD,CAAwD2C,MAAxD,IAAkE,IAAlE;AAEA,MAAI6B,MAAM,GAAGvG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoClE,KAApC,CAA0C2C,MAA1C,CAAb;;AAEA,MAAI6B,MAAJ,EAAY;AACVvG,IAAAA,QAAQ,CAACQ,IAAT,CAAc4F,MAAd,CAAqBG,MAArB;AACA5G,IAAAA,aAAa,CAAC4G,MAAD,CAAb;AACA,WAAOvG,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2B8F,OAA3B,EAAoClE,KAApC,CAA0C2C,MAA1C,CAAP;AACA,WAAO1E,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyBmE,MAAzB,CAAP;AACA6B,IAAAA,MAAM,GAAG,IAAT;AACA5E,IAAAA,iBAAiB,CAAC3B,QAAD,CAAjB;AACD;;AAEDA,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyC8F,OAAzC,EAAkDlE,KAAlD,CAAwD2C,MAAxD,IAAkE,KAAlE;AACD,C,CAED;;;AACA,SAAST,SAAT,CAAmBY,YAAnB,EAAiC5D,KAAjC,EAAwCjB,QAAxC,EAAkDF,OAAlD,EAA2DD,SAA3D,EAAsEkD,YAAtE,EAAoFhD,OAApF,EAA6F;AAC3F,MAAI8E,YAAY,CAACf,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,QAAI0C,UAAU,GAAG,IAAjB;AAAA,QACIC,SAAS,GAAG,IADhB;;AAGA,YAAQ5B,YAAY,CAAC,CAAD,CAApB;AACE,WAAK,OAAL;AACE2B,QAAAA,UAAU,GAAGrE,OAAb;AAAqBsE,QAAAA,SAAS,GAAG3G,OAAO,CAACsC,YAApB;AAAiC;;AACxD,WAAK,OAAL;AACEoE,QAAAA,UAAU,GAAG/D,OAAb;AAAqBgE,QAAAA,SAAS,GAAG3G,OAAO,CAAC4C,WAApB;AAAgC;;AACvD,WAAK,OAAL;AACE8D,QAAAA,UAAU,GAAG5D,OAAb;AAAqB6D,QAAAA,SAAS,GAAG3G,OAAO,CAAC+C,YAApB;AAAiC;;AACxD,WAAK,OAAL;AACE2D,QAAAA,UAAU,GAAGlE,OAAb;AAAqBmE,QAAAA,SAAS,GAAG3G,OAAO,CAACyC,YAApB;AAAiC;AAR1D;;AAWA,QAAIiE,UAAJ,EAAgBA,UAAU,CAAC3G,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6B4D,YAAY,CAAC,CAAD,CAAzC,EAA8C9E,OAA9C,EAAuD0G,SAAvD,CAAV,CAA4EhF,IAA5E,CAAiF,YAAY;AAC3G,aAAOE,iBAAiB,CAAC3B,QAAD,CAAxB;AACD,KAFe;AAGjB;AACF;;AAED,SAASsC,OAAT,CAAiBzC,SAAjB,EAA4BG,QAA5B,EAAsCiB,KAAtC,EAA6CoB,MAA7C,EAAqDtC,OAArD,EAA8DwC,YAA9D,EAA4E;AAC1E,MAAImE,QAAQ,GAAGzF,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUxB,MAAV,CAAZ,CAAf,CAD0E,CAG1E;;AACA,SAAOtC,OAAO,CAACkF,UAAR,CAAmByB,QAAQ,CAACxB,IAA5B,EAAkCyB,QAAlC,CAA2CD,QAA3C,EAAqDzF,KAArD,EAA4DpB,SAA5D,EAAuE4B,IAAvE,CAA4E,UAAUmF,MAAV,EAAkB;AAEnG,QAAIA,MAAM,YAAYnH,KAAK,CAACoH,GAA5B,EAAiC;AAC/B7G,MAAAA,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyB8B,MAAzB,IAAmCuE,MAAnC;AACD;;AAED,QAAIE,KAAK,GAAG,IAAIrH,KAAK,CAACgB,QAAV,EAAZ;AACAqG,IAAAA,KAAK,CAACpG,IAAN,GAAa,OAAb;AACAoG,IAAAA,KAAK,CAACC,GAAN,CAAUH,MAAV;AAEA,QAAI3E,IAAI,GAAGhB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAU6C,QAAQ,CAACzE,IAAnB,CAAZ,CAAX,CAVmG,CAYnG;;AACA,QAAI+E,OAAO,GAAG/F,KAAK,CAACgG,QAAN,CAAeC,GAAf,CAAmBjF,IAAI,CAACgF,QAAL,CAAcC,GAAd,CAAkB,CAAlB,CAAnB,CAAd;AACA,QAAIC,OAAO,GAAGlG,KAAK,CAACgG,QAAN,CAAeC,GAAf,CAAmBjF,IAAI,CAACgF,QAAL,CAAcC,GAAd,CAAkB,CAAlB,CAAnB,CAAd;AACA,QAAIE,MAAM,GAAGV,QAAQ,CAACU,MAAtB;;AAEA,QAAIJ,OAAO,CAACK,CAAR,GAAYF,OAAO,CAACE,CAAxB,EAA2B;AACzB,UAAIC,GAAG,GAAGN,OAAV;AACAA,MAAAA,OAAO,GAAGG,OAAV;AACAA,MAAAA,OAAO,GAAGG,GAAV;AACAF,MAAAA,MAAM,GAAG,IAAIA,MAAb;AACD;;AAED,QAAIG,QAAQ,GAAGC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASV,OAAO,CAACK,CAAR,GAAYF,OAAO,CAACE,CAA7B,EAAgC,CAAhC,IAAqCG,IAAI,CAACE,GAAL,CAASV,OAAO,CAACW,CAAR,GAAYR,OAAO,CAACQ,CAA7B,EAAgC,CAAhC,CAA/C,CAAf;AACA,QAAIC,KAAK,GAAGJ,IAAI,CAACK,IAAL,CAAU,CAACV,OAAO,CAACQ,CAAR,GAAYX,OAAO,CAACW,CAArB,IAA0BJ,QAApC,CAAZ;AAEA,QAAI3G,WAAW,GAAG,IAAInB,KAAK,CAACoB,IAAV,GAAiBC,aAAjB,CAA+BgG,KAA/B,CAAlB;AACA,QAAIgB,MAAM,GAAG,CAAC,CAAClH,WAAW,CAACmH,GAAZ,CAAgBV,CAAhB,GAAoBzG,WAAW,CAACoH,GAAZ,CAAgBX,CAArC,IAA0C,CAA1C,GAA8CzG,WAAW,CAACoH,GAAZ,CAAgBX,CAA/D,EAAkE,CAACzG,WAAW,CAACmH,GAAZ,CAAgBJ,CAAhB,GAAoB/G,WAAW,CAACoH,GAAZ,CAAgBL,CAArC,IAA0C,CAA1C,GAA8C/G,WAAW,CAACoH,GAAZ,CAAgBL,CAAhI,EAAmI,CAAC/G,WAAW,CAACmH,GAAZ,CAAgBE,CAAhB,GAAoBrH,WAAW,CAACoH,GAAZ,CAAgBC,CAArC,IAA0C,CAA1C,GAA8CrH,WAAW,CAACoH,GAAZ,CAAgBC,CAAjM,CAAb;AAEA,QAAIC,YAAY,GAAGxB,QAAQ,CAACyB,UAAT,CAAoBtE,KAApB,CAA0B,CAAC,UAAD,EAAa,QAAb,CAA1B,CAAnB;AACA,QAAIuE,UAAU,GAAG1B,QAAQ,CAACyB,UAAT,CAAoBtE,KAApB,CAA0B,CAAC,QAAD,EAAW,QAAX,CAA1B,CAAjB;AAEAiD,IAAAA,KAAK,CAACuB,QAAN,CAAeV,CAAf,GAAmBC,KAAnB;AACAd,IAAAA,KAAK,CAACwB,QAAN,CAAejB,CAAf,GAAmBL,OAAO,CAACK,CAAR,GAAYE,QAAQ,GAAGH,MAAX,GAAoBI,IAAI,CAACe,GAAL,CAASX,KAAT,CAAhC,GAAkDE,MAAM,CAAC,CAAD,CAAN,GAAYN,IAAI,CAACgB,GAAL,CAASZ,KAAT,CAAjF;AACAd,IAAAA,KAAK,CAACwB,QAAN,CAAeX,CAAf,GAAmBO,YAAY,GAAGE,UAAU,GAAG,CAA5B,GAAgCN,MAAM,CAAC,CAAD,CAAtC,GAA4C7G,KAAK,CAACe,QAArE;AACA8E,IAAAA,KAAK,CAACwB,QAAN,CAAeL,CAAf,GAAmB,CAACjB,OAAO,CAACW,CAAT,GAAaJ,QAAQ,GAAGH,MAAX,GAAoBI,IAAI,CAACgB,GAAL,CAASZ,KAAT,CAAjC,GAAmDE,MAAM,CAAC,CAAD,CAAN,GAAYN,IAAI,CAACe,GAAL,CAASX,KAAT,CAAlF;AAEA5H,IAAAA,QAAQ,CAACQ,IAAT,CAAcuG,GAAd,CAAkBD,KAAlB;AACA9G,IAAAA,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCW,KAArC,CAA2C6E,QAAQ,CAACxF,EAApD,IAA0D4F,KAA1D;AAEA2B,IAAAA,aAAa,CAAC3B,KAAD,EAAQ,YAAY;AAC/B,aAAOvE,YAAY,CAACmG,UAAb,CAAwBzH,KAAK,CAACC,EAA9B,EAAkCwF,QAAQ,CAACxF,EAA3C,CAAP;AACD,KAFY,CAAb;AAIA,QAAIyH,OAAO,GAAG1H,KAAK,CAAC0H,OAApB;;AACA,QAAIjC,QAAQ,CAACkC,QAAb,EAAuB;AACrBD,MAAAA,OAAO,GAAG,CAAV;AACD;;AACDE,IAAAA,YAAY,CAAC/B,KAAD,EAAQ6B,OAAR,CAAZ;AACD,GAlDM,CAAP;AAmDD;;AAED,SAASvD,UAAT,CAAoBvF,SAApB,EAA+BkD,YAA/B,EAA6C/C,QAA7C,EAAuDiB,KAAvD,EAA8DoB,MAA9D,EAAsEyG,WAAtE,EAAmF/I,OAAnF,EAA4FwC,YAA5F,EAA0GwG,WAA1G,EAAuHC,SAAvH,EAAkI;AAChI,MAAIC,IAAI,GAAGhI,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUxB,MAAV,CAAZ,CAAX;AACA,MAAI6G,OAAO,GAAGnG,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BmB,MAA9B,CAAnB,CAAd;AACA,MAAI8G,IAAI,GAAGnJ,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCW,KAArC,CAA2CQ,MAA3C,CAAX;AAEA,MAAI,CAAC8G,IAAL,EAAW,OAAO,IAAP;AAEX,SAAOpJ,OAAO,CAACkF,UAAR,CAAmBgE,IAAI,CAAC/D,IAAxB,EAA8BC,cAA9B,CAA6C8D,IAA7C,EAAmDhI,KAAnD,EAA0DpB,SAA1D,EAAqEsJ,IAArE,EAA2ED,OAA3E,EAAoFJ,WAApF,EAAiGC,WAAjG,EAA8GC,SAA9G,CAAP;AACD;;AAED,SAAS7G,OAAT,CAAiBtC,SAAjB,EAA4BG,QAA5B,EAAsCiB,KAAtC,EAA6CqD,MAA7C,EAAqDvE,OAArD,EAA8DqC,YAA9D,EAA4E;AAE1E,MAAIpC,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDU,KAAnD,CAAyD0C,MAAzD,CAAJ,EAAsE;AACpE4B,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAO/D,OAAO,CAACtC,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BqD,MAA7B,EAAqCvE,OAArC,EAA8CqC,YAA9C,CAAd;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAEDpC,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDU,KAAnD,CAAyD0C,MAAzD,IAAmE,IAAnE;AAEA,MAAIrC,IAAI,GAAGhB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUS,MAAV,CAAZ,CAAX,CAX0E,CAa1E;;AACA,MAAI0C,OAAO,GAAG/F,KAAK,CAACgG,QAAN,CAAeC,GAAf,CAAmBjF,IAAI,CAACgF,QAAL,CAAcC,GAAd,CAAkB,CAAlB,CAAnB,CAAd;AACA,MAAIC,OAAO,GAAGlG,KAAK,CAACgG,QAAN,CAAeC,GAAf,CAAmBjF,IAAI,CAACgF,QAAL,CAAcC,GAAd,CAAkB,CAAlB,CAAnB,CAAd;;AAEA,MAAIF,OAAO,CAACK,CAAR,GAAYF,OAAO,CAACE,CAAxB,EAA2B;AACzB,QAAIC,GAAG,GAAGN,OAAV;AACAA,IAAAA,OAAO,GAAGG,OAAV;AACAA,IAAAA,OAAO,GAAGG,GAAV;AACD;;AAED,SAAOvH,OAAO,CAACkF,UAAR,CAAmBhD,IAAI,CAACiD,IAAxB,EAA8ByB,QAA9B,CAAuC1E,IAAvC,EAA6ChB,KAA7C,EAAoDpB,SAApD,EAA+D4B,IAA/D,CAAoE,UAAU4E,MAAV,EAAkB;AAE3F,QAAIA,MAAM,YAAY5G,KAAK,CAACoH,GAA5B,EAAiC;AAC/B7G,MAAAA,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyB0B,IAAI,CAACf,EAA9B,IAAoCmF,MAApC;AACD;;AAED,QAAIS,KAAK,GAAG,IAAIrH,KAAK,CAACgB,QAAV,EAAZ;AACAqG,IAAAA,KAAK,CAACpG,IAAN,GAAa,OAAb;AACAoG,IAAAA,KAAK,CAACC,GAAN,CAAUV,MAAV;AAEAS,IAAAA,KAAK,CAACwB,QAAN,CAAejB,CAAf,GAAmBL,OAAO,CAACK,CAA3B;AACAP,IAAAA,KAAK,CAACwB,QAAN,CAAeX,CAAf,GAAmB1G,KAAK,CAACe,QAAzB;AACA8E,IAAAA,KAAK,CAACwB,QAAN,CAAeL,CAAf,GAAmB,CAACjB,OAAO,CAACW,CAA5B;AAEA3H,IAAAA,QAAQ,CAACQ,IAAT,CAAcuG,GAAd,CAAkBD,KAAlB;AACA9G,IAAAA,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCU,KAArC,CAA2C0C,MAA3C,IAAqDwC,KAArD;AAEA2B,IAAAA,aAAa,CAAC3B,KAAD,EAAQ,YAAY;AAC/B,aAAO1E,YAAY,CAACgH,UAAb,CAAwBnI,KAAK,CAACC,EAA9B,EAAkCe,IAAI,CAACf,EAAvC,CAAP;AACD,KAFY,CAAb;AAIA,QAAIyH,OAAO,GAAG1H,KAAK,CAAC0H,OAApB;;AACA,QAAI1G,IAAI,CAAC2G,QAAT,EAAmB;AACjBD,MAAAA,OAAO,GAAG,CAAV;AACD;;AACDE,IAAAA,YAAY,CAAC/B,KAAD,EAAQ6B,OAAR,CAAZ;AACA3I,IAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDU,KAAnD,CAAyD0C,MAAzD,IAAmE,KAAnE;AACD,GA3BM,CAAP;AA4BD;;AAED,SAASgB,UAAT,CAAoBzF,SAApB,EAA+BkD,YAA/B,EAA6C/C,QAA7C,EAAuDiB,KAAvD,EAA8DqD,MAA9D,EAAsEwE,WAAtE,EAAmF/I,OAAnF,EAA4FqC,YAA5F,EAA0G2G,WAA1G,EAAuHC,SAAvH,EAAkI;AAChI,MAAI/G,IAAI,GAAGhB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUS,MAAV,CAAZ,CAAX;AACA,MAAI+E,OAAO,GAAGtG,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BoD,MAA9B,CAAnB,CAAd;AACA,MAAI6E,IAAI,GAAGnJ,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCU,KAArC,CAA2C0C,MAA3C,CAAX;AAEA,MAAI,CAAC6E,IAAL,EAAW,OAAO,IAAP;AAEX,SAAOpJ,OAAO,CAACkF,UAAR,CAAmBhD,IAAI,CAACiD,IAAxB,EAA8BC,cAA9B,CAA6ClD,IAA7C,EAAmDhB,KAAnD,EAA0DpB,SAA1D,EAAqEsJ,IAArE,EAA2EE,OAA3E,EAAoFP,WAApF,EAAiGC,WAAjG,EAA8GC,SAA9G,CAAP;AACD;;AAED,SAASvG,OAAT,CAAiB5C,SAAjB,EAA4BG,QAA5B,EAAsCiB,KAAtC,EAA6CuD,MAA7C,EAAqDzE,OAArD,EAA8D2C,WAA9D,EAA2E;AAEzE,MAAI1C,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDY,KAAnD,CAAyD0C,MAAzD,CAAJ,EAAsE;AACpE0B,IAAAA,UAAU,CAAC,YAAY;AACrB,aAAOzD,OAAO,CAAC5C,SAAD,EAAYG,QAAZ,EAAsBiB,KAAtB,EAA6BuD,MAA7B,EAAqCzE,OAArC,EAA8C2C,WAA9C,CAAd;AACD,KAFS,EAEP,GAFO,CAAV;AAGA;AACD;;AAED1C,EAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDY,KAAnD,CAAyD0C,MAAzD,IAAmE,IAAnE;AAEA,MAAIhC,IAAI,GAAGvB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUW,MAAV,CAAZ,CAAX;;AACA,MAAI8E,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACjD,WAAO5G,WAAW,CAAC6G,UAAZ,CAAuBtI,KAAK,CAACC,EAA7B,EAAiCsD,MAAjC,CAAP;AACD,GAFD;;AAIA,SAAOzE,OAAO,CAACkF,UAAR,CAAmBzC,IAAI,CAAC0C,IAAxB,EAA8ByB,QAA9B,CAAuCnE,IAAvC,EAA6CvB,KAA7C,EAAoDpB,SAApD,EAA+D4B,IAA/D,CAAoE,UAAU6E,MAAV,EAAkB;AAE3F,QAAIA,MAAM,YAAY7G,KAAK,CAACoH,GAA5B,EAAiC;AAC/B7G,MAAAA,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyBiE,MAAzB,IAAmC8B,MAAnC;AACD;;AAED,QAAIQ,KAAK,GAAG,IAAIrH,KAAK,CAACgB,QAAV,EAAZ;AACAqG,IAAAA,KAAK,CAACpG,IAAN,GAAa,OAAb;AACAoG,IAAAA,KAAK,CAACC,GAAN,CAAUT,MAAV;AACAQ,IAAAA,KAAK,CAACwB,QAAN,CAAeX,CAAf,GAAmB1G,KAAK,CAACe,QAAzB;AACAhC,IAAAA,QAAQ,CAACQ,IAAT,CAAcuG,GAAd,CAAkBD,KAAlB;AACA9G,IAAAA,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCY,KAArC,CAA2C0C,MAA3C,IAAqDsC,KAArD;AAEA2B,IAAAA,aAAa,CAAC3B,KAAD,EAAQwC,gBAAR,CAAb;AAEA,QAAIX,OAAO,GAAG1H,KAAK,CAAC0H,OAApB;;AACA,QAAInG,IAAI,CAACoG,QAAT,EAAmB;AACjBD,MAAAA,OAAO,GAAG,CAAV;AACD;;AAEDE,IAAAA,YAAY,CAAC/B,KAAD,EAAQ6B,OAAR,CAAZ;AACA3I,IAAAA,QAAQ,CAACC,UAAT,CAAoBG,aAApB,CAAkCD,MAAlC,CAAyCc,KAAK,CAACC,EAA/C,EAAmDY,KAAnD,CAAyD0C,MAAzD,IAAmE,KAAnE;AACD,GAtBM,CAAP;AAuBD;;AAED,SAASe,UAAT,CAAoB1F,SAApB,EAA+BkD,YAA/B,EAA6C/C,QAA7C,EAAuDiB,KAAvD,EAA8DuD,MAA9D,EAAsEsE,WAAtE,EAAmF/I,OAAnF,EAA4F2C,WAA5F,EAAyGqG,WAAzG,EAAsHC,SAAtH,EAAiI;AAC/H,MAAIxG,IAAI,GAAGvB,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUW,MAAV,CAAZ,CAAX;AACA,MAAIgF,OAAO,GAAGzG,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BsD,MAA9B,CAAnB,CAAd;AACA,MAAI2E,IAAI,GAAGnJ,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCY,KAArC,CAA2C0C,MAA3C,CAAX;AAEA,MAAI,CAAC2E,IAAL,EAAW,OAAO,IAAP;AAEX,SAAOpJ,OAAO,CAACkF,UAAR,CAAmBzC,IAAI,CAAC0C,IAAxB,EAA8BC,cAA9B,CAA6C3C,IAA7C,EAAmDvB,KAAnD,EAA0DpB,SAA1D,EAAqEsJ,IAArE,EAA2EK,OAA3E,EAAoFV,WAApF,EAAiGC,WAAjG,EAA8GC,SAA9G,CAAP;AACD;;AAED,SAASpG,OAAT,CAAiB/C,SAAjB,EAA4BG,QAA5B,EAAsCiB,KAAtC,EAA6CyD,MAA7C,EAAqD3E,OAArD,EAA8D8C,YAA9D,EAA4E;AAE1E,MAAIF,IAAI,GAAG1B,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUa,MAAV,CAAZ,CAAX;AAEA,SAAO3E,OAAO,CAACkF,UAAR,CAAmBtC,IAAI,CAACuC,IAAxB,EAA8ByB,QAA9B,CAAuChE,IAAvC,EAA6C1B,KAA7C,EAAoDpB,SAApD,EAA+D4B,IAA/D,CAAoE,UAAU8E,MAAV,EAAkB;AAE3F,QAAIA,MAAM,YAAY9G,KAAK,CAACoH,GAA5B,EAAiC;AAC/B7G,MAAAA,QAAQ,CAACC,UAAT,CAAoBM,IAApB,CAAyBmE,MAAzB,IAAmC6B,MAAnC;AACD;;AAED,QAAIO,KAAK,GAAG,IAAIrH,KAAK,CAACgB,QAAV,EAAZ;AACAqG,IAAAA,KAAK,CAACpG,IAAN,GAAa,OAAb;AACAoG,IAAAA,KAAK,CAACC,GAAN,CAAUR,MAAV;AAEAO,IAAAA,KAAK,CAACuB,QAAN,CAAeV,CAAf,GAAmBhF,IAAI,CAAC0F,QAAL,GAAgBb,IAAI,CAACiC,EAArB,GAA0B,GAA7C;AACA3C,IAAAA,KAAK,CAACwB,QAAN,CAAejB,CAAf,GAAmB1E,IAAI,CAAC0E,CAAxB;AACAP,IAAAA,KAAK,CAACwB,QAAN,CAAeX,CAAf,GAAmB1G,KAAK,CAACe,QAAzB;AACA8E,IAAAA,KAAK,CAACwB,QAAN,CAAeL,CAAf,GAAmB,CAACtF,IAAI,CAACgF,CAAzB;AAEAc,IAAAA,aAAa,CAAClC,MAAD,EAAS,YAAY;AAChC1D,MAAAA,YAAY,CAAC6G,UAAb,CAAwBzI,KAAK,CAACC,EAA9B,EAAkCyB,IAAI,CAACzB,EAAvC;AACD,KAFY,CAAb;AAIA,QAAIyH,OAAO,GAAG1H,KAAK,CAAC0H,OAApB;;AACA,QAAIhG,IAAI,CAACiG,QAAT,EAAmB;AACjBD,MAAAA,OAAO,GAAG,CAAV;AACD;;AAEDE,IAAAA,YAAY,CAAC/B,KAAD,EAAQ6B,OAAR,CAAZ;AAEA3I,IAAAA,QAAQ,CAACQ,IAAT,CAAcuG,GAAd,CAAkBD,KAAlB;AACA9G,IAAAA,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCa,KAArC,CAA2CY,IAAI,CAACzB,EAAhD,IAAsD4F,KAAtD;AACD,GA5BM,CAAP;AA6BD;;AAED,SAAStB,UAAT,CAAoB3F,SAApB,EAA+BkD,YAA/B,EAA6C/C,QAA7C,EAAuDiB,KAAvD,EAA8DyD,MAA9D,EAAsEoE,WAAtE,EAAmF/I,OAAnF,EAA4F8C,YAA5F,EAA0GkG,WAA1G,EAAuHC,SAAvH,EAAkI;AAChI,MAAIrG,IAAI,GAAG1B,KAAK,CAAC4C,KAAN,CAAY,CAAC,OAAD,EAAUa,MAAV,CAAZ,CAAX;AACA,MAAIiF,OAAO,GAAG5G,YAAY,CAACc,KAAb,CAAmB,CAAC,QAAD,EAAW5C,KAAK,CAACC,EAAjB,EAAqB,OAArB,EAA8BwD,MAA9B,CAAnB,CAAd;AACA,MAAIyE,IAAI,GAAGnJ,QAAQ,CAACC,UAAT,CAAoBE,MAApB,CAA2Bc,KAAK,CAACC,EAAjC,EAAqCa,KAArC,CAA2C2C,MAA3C,CAAX;AAEA,MAAI,CAACyE,IAAL,EAAW,OAAO,IAAP;AAEX,SAAOpJ,OAAO,CAACkF,UAAR,CAAmBtC,IAAI,CAACuC,IAAxB,EAA8BC,cAA9B,CAA6CxC,IAA7C,EAAmD1B,KAAnD,EAA0DpB,SAA1D,EAAqEsJ,IAArE,EAA2EQ,OAA3E,EAAoFb,WAApF,EAAiGC,WAAjG,EAA8GC,SAA9G,CAAP;AACD,C,CAED;;;AACA,SAASP,aAAT,CAAuB7B,MAAvB,EAA+B0C,gBAA/B,EAAiD;AAC/C1C,EAAAA,MAAM,CAACgD,QAAP,CAAgB,UAAUC,KAAV,EAAiB;AAC/B,QAAIA,KAAK,YAAYpK,KAAK,CAACqK,IAA3B,EAAiC;AAC/BD,MAAAA,KAAK,CAACE,QAAN,GAAiBT,gBAAjB;AACD;AACF,GAJD;AAKD,C,CAED;;;AACA,SAAST,YAAT,CAAsBjC,MAAtB,EAA8B+B,OAA9B,EAAuC;AACrC/B,EAAAA,MAAM,CAACgD,QAAP,CAAgB,UAAUC,KAAV,EAAiB;AAE/B,QAAIA,KAAK,YAAYpK,KAAK,CAACqK,IAA3B,EAAiC;AAC/B,UAAID,KAAK,CAACG,QAAN,YAA0BvK,KAAK,CAACwK,aAApC,EAAmD;AACjDJ,QAAAA,KAAK,CAACG,QAAN,CAAeE,SAAf,CAAyBlJ,OAAzB,CAAiC,UAAUmJ,aAAV,EAAyB;AACxDA,UAAAA,aAAa,CAACC,WAAd,GAA4B,IAA5B;;AACA,cAAID,aAAa,CAACE,UAAlB,EAA8B;AAC5BF,YAAAA,aAAa,CAACxB,OAAd,GAAwBnB,IAAI,CAACQ,GAAL,CAASmC,aAAa,CAACE,UAAvB,EAAmC1B,OAAnC,CAAxB;AACD,WAFD,MAEO,IAAIwB,aAAa,CAACxB,OAAd,IAAyBwB,aAAa,CAACxB,OAAd,GAAwBA,OAArD,EAA8D;AACnEwB,YAAAA,aAAa,CAACE,UAAd,GAA2BF,aAAa,CAACxB,OAAzC;AACAwB,YAAAA,aAAa,CAACxB,OAAd,GAAwBA,OAAxB;AACD;AACF,SARD;AASD,OAVD,MAUO,IAAIkB,KAAK,CAACG,QAAN,YAA0BM,KAA9B,EAAqC;AAC1CT,QAAAA,KAAK,CAACG,QAAN,CAAehJ,OAAf,CAAuB,UAAUgJ,QAAV,EAAoB;AACzCA,UAAAA,QAAQ,CAACI,WAAT,GAAuB,IAAvB;;AACA,cAAIJ,QAAQ,CAACK,UAAb,EAAyB;AACvBL,YAAAA,QAAQ,CAACrB,OAAT,GAAmBnB,IAAI,CAACQ,GAAL,CAASgC,QAAQ,CAACK,UAAlB,EAA8B1B,OAA9B,CAAnB;AACD,WAFD,MAEO,IAAIqB,QAAQ,CAACrB,OAAT,IAAoBqB,QAAQ,CAACrB,OAAT,GAAmBA,OAA3C,EAAoD;AACzDqB,YAAAA,QAAQ,CAACK,UAAT,GAAsBL,QAAQ,CAACrB,OAA/B;AACAqB,YAAAA,QAAQ,CAACrB,OAAT,GAAmBA,OAAnB;AACD;AACF,SARD;AASD,OAVM,MAUA;AACLkB,QAAAA,KAAK,CAACG,QAAN,CAAeI,WAAf,GAA6B,IAA7B;;AACA,YAAIP,KAAK,CAACG,QAAN,CAAeK,UAAnB,EAA+B;AAC7BR,UAAAA,KAAK,CAACG,QAAN,CAAerB,OAAf,GAAyBnB,IAAI,CAACQ,GAAL,CAAS6B,KAAK,CAACG,QAAN,CAAeK,UAAxB,EAAoC1B,OAApC,CAAzB;AACD,SAFD,MAEO,IAAIkB,KAAK,CAACG,QAAN,CAAerB,OAAf,IAA0BkB,KAAK,CAACG,QAAN,CAAerB,OAAf,GAAyBA,OAAvD,EAAgE;AACrEkB,UAAAA,KAAK,CAACG,QAAN,CAAeK,UAAf,GAA4BR,KAAK,CAACG,QAAN,CAAerB,OAA3C;AACAkB,UAAAA,KAAK,CAACG,QAAN,CAAerB,OAAf,GAAyBA,OAAzB;AACD;AACF;AACF;AACF,GAjCD;AAkCD;;AAED,SAAShH,iBAAT,CAA2B3B,QAA3B,EAAqC;AACnC,MAAIuK,cAAc,GAAG,IAAI9K,KAAK,CAACoB,IAAV,GAAiBC,aAAjB,CAA+Bd,QAAQ,CAACQ,IAAxC,CAArB;;AACA,MAAIgK,QAAQ,CAACD,cAAc,CAACxC,GAAf,CAAmBV,CAApB,CAAR,IAAkCmD,QAAQ,CAACD,cAAc,CAACvC,GAAf,CAAmBX,CAApB,CAA1C,IAAoEmD,QAAQ,CAACD,cAAc,CAACxC,GAAf,CAAmBJ,CAApB,CAA5E,IAAsG6C,QAAQ,CAACD,cAAc,CAACvC,GAAf,CAAmBL,CAApB,CAA9G,IAAwI6C,QAAQ,CAACD,cAAc,CAACxC,GAAf,CAAmBE,CAApB,CAAhJ,IAA0KuC,QAAQ,CAACD,cAAc,CAACvC,GAAf,CAAmBC,CAApB,CAAtL,EAA8M;AAE5M,QAAIwC,SAAS,GAAG,IAAIhL,KAAK,CAACiL,OAAV,CAAkB,CAACH,cAAc,CAACxC,GAAf,CAAmBV,CAAnB,GAAuBkD,cAAc,CAACvC,GAAf,CAAmBX,CAA3C,IAAgD,CAAhD,GAAoDkD,cAAc,CAACvC,GAAf,CAAmBX,CAAzF,EAA4F,CAACkD,cAAc,CAACxC,GAAf,CAAmBJ,CAAnB,GAAuB4C,cAAc,CAACvC,GAAf,CAAmBL,CAA3C,IAAgD,CAAhD,GAAoD4C,cAAc,CAACvC,GAAf,CAAmBL,CAAnK,EAAsK,CAAC4C,cAAc,CAACxC,GAAf,CAAmBE,CAAnB,GAAuBsC,cAAc,CAACvC,GAAf,CAAmBC,CAA3C,IAAgD,CAAhD,GAAoDsC,cAAc,CAACvC,GAAf,CAAmBC,CAA7O,CAAhB;AAEAjI,IAAAA,QAAQ,CAACQ,IAAT,CAAc8H,QAAd,CAAuBqC,GAAvB,CAA2BF,SAA3B;AACAzK,IAAAA,QAAQ,CAACW,IAAT,CAAc2H,QAAd,CAAuBqC,GAAvB,CAA2BF,SAA3B;AAEAF,IAAAA,cAAc,CAACvC,GAAf,CAAmB2C,GAAnB,CAAuBF,SAAvB;AACAF,IAAAA,cAAc,CAACxC,GAAf,CAAmB4C,GAAnB,CAAuBF,SAAvB;AAEAzK,IAAAA,QAAQ,CAACY,WAAT,GAAuB2J,cAAvB;AACD;AACF;AAED;;;;;;;;;AAOA,SAAS/G,WAAT,CAAqBR,SAArB,EAAgCnD,SAAhC,EAA2CkD,YAA3C,EAAyD;AACvD,SAAO6H,sCAAsC,CAACC,4CAA4C,CAACC,6BAA6B,CAAC9H,SAAD,EAAYnD,SAAZ,EAAuBkD,YAAvB,CAA9B,EAAoElD,SAApE,EAA+EkD,YAA/E,CAA7C,EAA2IlD,SAA3I,EAAsJkD,YAAtJ,CAA7C;AACD;AAED;;;;;;;;;AAOA,SAAS6H,sCAAT,CAAgD5H,SAAhD,EAA2DnD,SAA3D,EAAsEkD,YAAtE,EAAoF;AAElF,MAAIgI,SAAS,GAAG,KAAK,CAArB;AACA,MAAIC,CAAC,GAAG,KAAK,CAAb;;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhI,SAAS,CAACc,MAAd,IAAwB,CAACiH,SAArC,EAAgDC,CAAC,EAAjD,EAAqD;AACnD,QAAIhI,SAAS,CAACgI,CAAD,CAAT,CAAa3H,IAAb,CAAkB,CAAlB,MAAyB,eAA7B,EAA8C;AAC5C0H,MAAAA,SAAS,GAAG/H,SAAS,CAACgI,CAAD,CAArB;AACD;AACF;;AAED,MAAID,SAAJ,EAAe;AACb,QAAI,CAAClL,SAAS,CAACgE,KAAV,CAAgB,CAAC,QAAD,EAAWd,YAAY,CAAC5B,aAAxB,EAAuC,SAAvC,CAAhB,CAAL,EAAyE;AACvE,aAAO6B,SAAS,CAACS,MAAV,CAAiB,UAAUwH,KAAV,EAAiB;AACvC,YAAI7H,EAAE,GAAG6H,KAAK,CAAC7H,EAAf;AAAA,YACIC,IAAI,GAAG4H,KAAK,CAAC5H,IADjB;AAIA,eAAO,EAAEA,IAAI,CAACA,IAAI,CAACS,MAAL,GAAc,CAAf,CAAJ,KAA0B,UAA1B,IAAwCT,IAAI,CAAC,CAAD,CAAJ,KAAY,QAApD,IAAgEA,IAAI,CAAC,CAAD,CAAJ,KAAYN,YAAY,CAAC5B,aAA3F,KAA6G,EAAEiC,EAAE,KAAK,QAAP,IAAmBC,IAAI,CAAC6H,OAAL,CAAanI,YAAY,CAAC5B,aAA1B,MAA6C,CAAC,CAAnE,CAApH;AACD,OANM,CAAP;AAOD;AACF;;AAED,SAAO6B,SAAP;AACD;AAED;;;;;;;;;AAOA,SAAS6H,4CAAT,CAAsD7H,SAAtD,EAAiEnD,SAAjE,EAA4EkD,YAA5E,EAA0F;AACxF,MAAIoI,QAAQ,GAAG,EAAf;AACAnI,EAAAA,SAAS,CAAChC,OAAV,CAAkB,UAAUoK,KAAV,EAAiB;AACjC,QAAI/H,IAAI,GAAG+H,KAAK,CAAC/H,IAAjB;;AAEA,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,UAAhB,EAA4B;AAC1B8H,MAAAA,QAAQ,CAAC9H,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoBA,IAAI,CAAC,CAAD,CAAxB;AACD;AACF,GAND;AAQA,SAAOL,SAAS,CAACS,MAAV,CAAiB,UAAU4H,KAAV,EAAiB;AACvC,QAAIhI,IAAI,GAAGgI,KAAK,CAAChI,IAAjB;;AAEA,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,YAAhB,EAA8B;AAC5B,aAAO8H,QAAQ,CAAC9H,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoB,KAApB,GAA4B,IAAnC;AACD;;AACD,WAAO,IAAP;AACD,GAPM,CAAP;AAQD;AAED;;;;;;;;;AAOA,SAASyH,6BAAT,CAAuC9H,SAAvC,EAAkDnD,SAAlD,EAA6DkD,YAA7D,EAA2E;AACzE,MAAIoI,QAAQ,GAAG,EAAf;AACA,SAAOnI,SAAS,CAACS,MAAV,CAAiB,UAAU6H,KAAV,EAAiB;AACvC,QAAIjI,IAAI,GAAGiI,KAAK,CAACjI,IAAjB;;AAEA,QAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,YAAhB,EAA8B;AAC5B,aAAO8H,QAAQ,CAAC9H,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoB,KAApB,GAA4B8H,QAAQ,CAAC9H,IAAI,CAAC,CAAD,CAAL,CAAR,GAAoB,IAAvD;AACD,KAFD,MAEO,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,MAAhB,EAAwB;AAC7B;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GAVM,CAAP;AAWD","sourcesContent":["import * as Three from 'three';\nimport createGrid from './grid-creator';\nimport { disposeObject } from './three-memory-cleaner';\n\nexport function parseData(sceneData, actions, catalog) {\n\n  var planData = {};\n\n  planData.sceneGraph = {\n    unit: sceneData.unit,\n    layers: {},\n    busyResources: { layers: {} },\n    width: sceneData.width,\n    height: sceneData.height,\n    LODs: {}\n  };\n\n  planData.plan = new Three.Object3D();\n  planData.plan.name = 'plan';\n\n  // Add a grid to the plan\n  planData.grid = createGrid(sceneData);\n  planData.grid.name = 'grid';\n\n  planData.boundingBox = new Three.Box3().setFromObject(planData.grid);\n  planData.boundingBox.name = 'boundingBox';\n\n  var promises = [];\n\n  sceneData.layers.forEach(function (layer) {\n\n    if (layer.id === sceneData.selectedLayer || layer.visible) {\n      promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n    }\n  });\n\n  Promise.all(promises).then(function (value) {\n    return updateBoundingBox(planData);\n  });\n\n  return planData;\n}\n\nfunction createLayerObjects(layer, planData, sceneData, actions, catalog) {\n\n  var promises = [];\n\n  planData.sceneGraph.layers[layer.id] = {\n    id: layer.id,\n    lines: {},\n    holes: {},\n    areas: {},\n    items: {},\n    visible: layer.visible,\n    altitude: layer.altitude\n  };\n\n  planData.sceneGraph.busyResources.layers[layer.id] = {\n    id: layer.id,\n    lines: {},\n    holes: {},\n    areas: {},\n    items: {}\n  };\n\n  // Import lines\n  layer.lines.forEach(function (line) {\n    promises.push(addLine(sceneData, planData, layer, line.id, catalog, actions.linesActions));\n    line.holes.forEach(function (holeID) {\n      promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n    });\n  });\n\n  // Import areas\n  layer.areas.forEach(function (area) {\n    promises.push(addArea(sceneData, planData, layer, area.id, catalog, actions.areaActions));\n  });\n\n  // Import items\n  layer.items.forEach(function (item) {\n    promises.push(addItem(sceneData, planData, layer, item.id, catalog, actions.itemsActions));\n  });\n\n  return promises;\n}\n\nexport function updateScene(planData, sceneData, oldSceneData, diffArray, actions, catalog) {\n\n  var splitted = diffArray.map(function (el) {\n    return { op: el.op, path: el.path.split('/'), value: el.value };\n  });\n  var filteredDiffs = filterDiffs(splitted, sceneData, oldSceneData);\n\n  //***testing additional filter***\n  filteredDiffs = filteredDiffs.filter(function (_ref) {\n    var path = _ref.path;\n    return path[3] !== 'selected';\n  });\n  filteredDiffs = filteredDiffs.filter(function (_ref2) {\n    var path = _ref2.path;\n    return path[1] !== 'groups';\n  });\n  //*******************************\n\n  filteredDiffs.forEach(function (_ref3) {\n    var op = _ref3.op,\n        path = _ref3.path,\n        value = _ref3.value;\n\n    /* First of all I need to find the object I need to update */\n    if (path[1] === 'layers') {\n\n      var layer = sceneData.getIn(['layers', path[2]]);\n\n      if (path.length === 3 && op === 'remove') {\n        removeLayer(path[2], planData);\n      } else if (path.length > 3) {\n        switch (op) {\n          case 'replace':\n            replaceObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n          case 'add':\n            addObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n          case 'remove':\n            removeObject(path, layer, planData, actions, sceneData, oldSceneData, catalog);\n            break;\n        }\n      }\n    } else if (path[1] === 'selectedLayer') {\n      var layerSelectedID = value;\n      var layerSelected = sceneData.getIn(['layers', layerSelectedID]);\n      // First of all I check if the new selected layer is not visible\n      if (!layerSelected.visible) {\n        // I need to create the objects for this layer\n        var promises = createLayerObjects(layerSelected, planData, sceneData, actions, catalog);\n        Promise.all(promises).then(function () {\n          return updateBoundingBox(planData);\n        });\n      }\n\n      var layerGraph = planData.sceneGraph.layers[oldSceneData.selectedLayer];\n\n      if (layerGraph) {\n        if (!layerGraph.visible) {\n          // I need to remove the objects for this layer\n          for (var lineID in layerGraph.lines) {\n            removeLine(planData, layerGraph.id, lineID);\n          }for (var areaID in layerGraph.areas) {\n            removeArea(planData, layerGraph.id, areaID);\n          }for (var itemID in layerGraph.items) {\n            removeItem(planData, layerGraph.id, itemID);\n          }for (var holeID in layerGraph.holes) {\n            removeHole(planData, layerGraph.id, holeID);\n          }\n        }\n      }\n    }\n  });\n  return planData;\n}\n\nfunction replaceObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n\n  var promises = [];\n\n  switch (modifiedPath[3]) {\n    case 'vertices':\n      if (modifiedPath[5] !== 'selected') {\n        var vertex = layer.getIn(['vertices', modifiedPath[4]]);\n\n        if (modifiedPath[5] === 'x' || modifiedPath[5] === 'y') {\n          vertex.lines.forEach(function (lineID) {\n            var lineHoles = oldSceneData.getIn(['layers', layer.id, 'lines', lineID, 'holes']);\n            if (lineHoles) lineHoles.forEach(function (holeID) {\n              replaceObject([0, 0, 0, 'holes', holeID, 'selected'], layer, planData, actions, sceneData, oldSceneData, catalog);\n            });\n            return replaceObject([0, 0, 0, 'lines', lineID], layer, planData, actions, sceneData, oldSceneData, catalog);\n          });\n          vertex.areas.forEach(function (areaID) {\n            return replaceObject([0, 0, 0, 'areas', areaID], layer, planData, actions, sceneData, oldSceneData, catalog);\n          });\n        }\n\n        if (modifiedPath[5] === 'areas') {\n          var areaID = vertex.getIn(['areas', ~~modifiedPath[6]]);\n          replaceObject([0, 0, 0, 'areas', areaID], layer, planData, actions, sceneData, oldSceneData, catalog);\n        }\n      }\n      break;\n    case 'holes':\n      var newHoleData = layer.getIn(['holes', modifiedPath[4]]);\n\n      if (catalog.getElement(newHoleData.type).updateRender3D) {\n        promises.push(updateHole(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.holesActions, function () {\n          return removeHole(planData, layer.id, newHoleData.id);\n        }, function () {\n          return addHole(sceneData, planData, layer, newHoleData.id, catalog, actions.holesActions);\n        }));\n      } else {\n        var lineID = newHoleData.line;\n        if (modifiedPath[5] === 'selected') {\n          // I remove only the hole without removing the wall\n          removeHole(planData, layer.id, newHoleData.id);\n          promises.push(addHole(sceneData, planData, layer, newHoleData.id, catalog, actions.holesActions));\n        } else {\n          layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n            removeHole(planData, layer.id, holeID);\n          });\n          removeLine(planData, layer.id, lineID);\n          promises.push(addLine(sceneData, planData, layer, lineID, catalog, actions.linesActions));\n          layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n            promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n          });\n        }\n      }\n      break;\n    case 'lines':\n      var line = layer.getIn(['lines', modifiedPath[4]]);\n\n      if (catalog.getElement(line.type).updateRender3D) {\n        promises.push(updateLine(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.linesActions, function () {\n          return removeLine(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addLine(sceneData, planData, layer, modifiedPath[4], catalog, actions.linesActions);\n        }));\n      } else {\n        removeLine(planData, layer.id, modifiedPath[4]);\n        promises.push(addLine(sceneData, planData, layer, modifiedPath[4], catalog, actions.linesActions));\n      }\n      break;\n    case 'areas':\n      var area = layer.getIn(['areas', modifiedPath[4]]);\n\n      if (catalog.getElement(area.type).updateRender3D) {\n        promises.push(updateArea(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.areaActions, function () {\n          return removeArea(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addArea(sceneData, planData, layer, modifiedPath[4], catalog, actions.areaActions);\n        }));\n      } else {\n        if (planData.sceneGraph.layers[layer.id].areas[modifiedPath[4]]) {\n          removeArea(planData, layer.id, modifiedPath[4]);\n        }\n        promises.push(addArea(sceneData, planData, layer, modifiedPath[4], catalog, actions.areaActions));\n      }\n      break;\n    case 'items':\n      var item = layer.getIn(['items', modifiedPath[4]]);\n\n      if (catalog.getElement(item.type).updateRender3D) {\n        promises.push(updateItem(sceneData, oldSceneData, planData, layer, modifiedPath[4], modifiedPath.slice(5), catalog, actions.itemsActions, function () {\n          return removeItem(planData, layer.id, modifiedPath[4]);\n        }, function () {\n          return addItem(sceneData, planData, layer, modifiedPath[4], catalog, actions.itemsActions);\n        }));\n      } else {\n        removeItem(planData, layer.id, modifiedPath[4]);\n        promises.push(addItem(sceneData, planData, layer, modifiedPath[4], catalog, actions.itemsActions));\n      }\n      break;\n\n    case 'visible':\n      if (!layer.visible) {\n        var _layerGraph = planData.sceneGraph.layers[layer.id];\n\n        for (var _lineID in _layerGraph.lines) {\n          removeLine(planData, layer.id, _lineID);\n        }for (var _areaID in _layerGraph.areas) {\n          removeArea(planData, layer.id, _areaID);\n        }for (var itemID in _layerGraph.items) {\n          removeItem(planData, layer.id, itemID);\n        }for (var holeID in _layerGraph.holes) {\n          removeHole(planData, layer.id, holeID);\n        }\n      } else {\n        promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n      }\n\n      break;\n\n    case 'opacity':\n    case 'altitude':\n      var layerGraph = planData.sceneGraph.layers[layer.id];\n      for (var _lineID2 in layerGraph.lines) {\n        removeLine(planData, layer.id, _lineID2);\n      }for (var _areaID2 in layerGraph.areas) {\n        removeArea(planData, layer.id, _areaID2);\n      }for (var _itemID in layerGraph.items) {\n        removeItem(planData, layer.id, _itemID);\n      }for (var _holeID in layerGraph.holes) {\n        removeHole(planData, layer.id, _holeID);\n      }promises = promises.concat(createLayerObjects(layer, planData, sceneData, actions, catalog));\n\n  }\n  Promise.all(promises).then(function (values) {\n    return updateBoundingBox(planData);\n  });\n}\n\nfunction removeObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n\n  var promises = [];\n  switch (modifiedPath[3]) {\n    case 'lines':\n      // Here I remove the line with all its holes\n      var lineID = modifiedPath[4];\n      oldSceneData.getIn(['layers', layer.id, 'lines', lineID, 'holes']).forEach(function (holeID) {\n        removeHole(planData, layer.id, holeID);\n      });\n      removeLine(planData, layer.id, lineID);\n      if (modifiedPath.length > 5) {\n        // I removed an hole, so I should add the new line\n        promises.push(addLine(sceneData, planData, layer, lineID, catalog, actions.linesActions));\n        layer.getIn(['lines', lineID, 'holes']).forEach(function (holeID) {\n          promises.push(addHole(sceneData, planData, layer, holeID, catalog, actions.holesActions));\n        });\n      }\n      break;\n    case 'areas':\n      if (modifiedPath.length === 5) {\n        // I am removing an entire area\n        removeArea(planData, layer.id, modifiedPath[4]);\n      }\n      break;\n    case 'items':\n      if (modifiedPath.length === 5) {\n        // I am removing an item\n        removeItem(planData, layer.id, modifiedPath[4]);\n      }\n      break;\n  }\n\n  Promise.all(promises).then(function (values) {\n    return updateBoundingBox(planData);\n  });\n}\n\nfunction removeLayer(layerId, planData) {\n  var layerGraph = planData.sceneGraph.layers[layerId];\n\n  for (var lineID in layerGraph.lines) {\n    removeLine(planData, layerId, lineID);\n  }for (var areaID in layerGraph.areas) {\n    removeArea(planData, layerId, areaID);\n  }for (var itemID in layerGraph.items) {\n    removeItem(planData, layerId, itemID);\n  }for (var holeID in layerGraph.holes) {\n    removeHole(planData, layerId, holeID);\n  }delete planData.sceneGraph.layers[layerId];\n}\n\nfunction removeHole(planData, layerId, holeID) {\n\n  if (planData.sceneGraph.busyResources.layers[layerId].holes[holeID]) {\n    setTimeout(function () {\n      return removeHole(planData, layerId, holeID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].holes[holeID] = true;\n\n  var hole3D = planData.sceneGraph.layers[layerId].holes[holeID];\n\n  if (hole3D) {\n    planData.plan.remove(hole3D);\n    disposeObject(hole3D);\n    delete planData.sceneGraph.layers[layerId].holes[holeID];\n    delete planData.sceneGraph.LODs[holeID];\n    hole3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].holes[holeID] = false;\n}\n\nfunction removeLine(planData, layerId, lineID) {\n\n  if (planData.sceneGraph.busyResources.layers[layerId].lines[lineID]) {\n    setTimeout(function () {\n      return removeLine(planData, layerId, lineID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].lines[lineID] = true;\n\n  var line3D = planData.sceneGraph.layers[layerId].lines[lineID];\n\n  if (line3D) {\n    planData.plan.remove(line3D);\n    disposeObject(line3D);\n    delete planData.sceneGraph.layers[layerId].lines[lineID];\n    delete planData.sceneGraph.LODs[lineID];\n    line3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].lines[lineID] = false;\n}\n\nfunction removeArea(planData, layerId, areaID) {\n\n  if (planData.sceneGraph.busyResources.layers[layerId].areas[areaID]) {\n    setTimeout(function () {\n      return removeArea(planData, layerId, areaID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].areas[areaID] = true;\n\n  var area3D = planData.sceneGraph.layers[layerId].areas[areaID];\n\n  if (area3D) {\n    planData.plan.remove(area3D);\n    disposeObject(area3D);\n    delete planData.sceneGraph.layers[layerId].areas[areaID];\n    delete planData.sceneGraph.LODs[areaID];\n    area3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].areas[areaID] = false;\n}\n\nfunction removeItem(planData, layerId, itemID) {\n\n  if (planData.sceneGraph.busyResources.layers[layerId].items[itemID]) {\n    setTimeout(function () {\n      return removeItem(planData, layerId, itemID);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].items[itemID] = true;\n\n  var item3D = planData.sceneGraph.layers[layerId].items[itemID];\n\n  if (item3D) {\n    planData.plan.remove(item3D);\n    disposeObject(item3D);\n    delete planData.sceneGraph.layers[layerId].items[itemID];\n    delete planData.sceneGraph.LODs[itemID];\n    item3D = null;\n    updateBoundingBox(planData);\n  }\n\n  planData.sceneGraph.busyResources.layers[layerId].items[itemID] = false;\n}\n\n//TODO generate an area's replace if vertex has been changed\nfunction addObject(modifiedPath, layer, planData, actions, sceneData, oldSceneData, catalog) {\n  if (modifiedPath.length === 5) {\n    var addPromise = null,\n        addAction = null;\n\n    switch (modifiedPath[3]) {\n      case 'lines':\n        addPromise = addLine;addAction = actions.linesActions;break;\n      case 'areas':\n        addPromise = addArea;addAction = actions.areaActions;break;\n      case 'items':\n        addPromise = addItem;addAction = actions.itemsActions;break;\n      case 'holes':\n        addPromise = addHole;addAction = actions.holesActions;break;\n    }\n\n    if (addPromise) addPromise(sceneData, planData, layer, modifiedPath[4], catalog, addAction).then(function () {\n      return updateBoundingBox(planData);\n    });\n  }\n}\n\nfunction addHole(sceneData, planData, layer, holeID, catalog, holesActions) {\n  var holeData = layer.getIn(['holes', holeID]);\n\n  // Create the hole object\n  return catalog.getElement(holeData.type).render3D(holeData, layer, sceneData).then(function (object) {\n\n    if (object instanceof Three.LOD) {\n      planData.sceneGraph.LODs[holeID] = object;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(object);\n\n    var line = layer.getIn(['lines', holeData.line]);\n\n    // First of all I need to find the vertices of this line\n    var vertex0 = layer.vertices.get(line.vertices.get(0));\n    var vertex1 = layer.vertices.get(line.vertices.get(1));\n    var offset = holeData.offset;\n\n    if (vertex0.x > vertex1.x) {\n      var tmp = vertex0;\n      vertex0 = vertex1;\n      vertex1 = tmp;\n      offset = 1 - offset;\n    }\n\n    var distance = Math.sqrt(Math.pow(vertex0.x - vertex1.x, 2) + Math.pow(vertex0.y - vertex1.y, 2));\n    var alpha = Math.asin((vertex1.y - vertex0.y) / distance);\n\n    var boundingBox = new Three.Box3().setFromObject(pivot);\n    var center = [(boundingBox.max.x - boundingBox.min.x) / 2 + boundingBox.min.x, (boundingBox.max.y - boundingBox.min.y) / 2 + boundingBox.min.y, (boundingBox.max.z - boundingBox.min.z) / 2 + boundingBox.min.z];\n\n    var holeAltitude = holeData.properties.getIn(['altitude', 'length']);\n    var holeHeight = holeData.properties.getIn(['height', 'length']);\n\n    pivot.rotation.y = alpha;\n    pivot.position.x = vertex0.x + distance * offset * Math.cos(alpha) - center[2] * Math.sin(alpha);\n    pivot.position.y = holeAltitude + holeHeight / 2 - center[1] + layer.altitude;\n    pivot.position.z = -vertex0.y - distance * offset * Math.sin(alpha) - center[2] * Math.cos(alpha);\n\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].holes[holeData.id] = pivot;\n\n    applyInteract(pivot, function () {\n      return holesActions.selectHole(layer.id, holeData.id);\n    });\n\n    var opacity = layer.opacity;\n    if (holeData.selected) {\n      opacity = 1;\n    }\n    applyOpacity(pivot, opacity);\n  });\n}\n\nfunction updateHole(sceneData, oldSceneData, planData, layer, holeID, differences, catalog, holesActions, selfDestroy, selfBuild) {\n  var hole = layer.getIn(['holes', holeID]);\n  var oldHole = oldSceneData.getIn(['layers', layer.id, 'holes', holeID]);\n  var mesh = planData.sceneGraph.layers[layer.id].holes[holeID];\n\n  if (!mesh) return null;\n\n  return catalog.getElement(hole.type).updateRender3D(hole, layer, sceneData, mesh, oldHole, differences, selfDestroy, selfBuild);\n}\n\nfunction addLine(sceneData, planData, layer, lineID, catalog, linesActions) {\n\n  if (planData.sceneGraph.busyResources.layers[layer.id].lines[lineID]) {\n    setTimeout(function () {\n      return addLine(sceneData, planData, layer, lineID, catalog, linesActions);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layer.id].lines[lineID] = true;\n\n  var line = layer.getIn(['lines', lineID]);\n\n  // First of all I need to find the vertices of this line\n  var vertex0 = layer.vertices.get(line.vertices.get(0));\n  var vertex1 = layer.vertices.get(line.vertices.get(1));\n\n  if (vertex0.x > vertex1.x) {\n    var tmp = vertex0;\n    vertex0 = vertex1;\n    vertex1 = tmp;\n  }\n\n  return catalog.getElement(line.type).render3D(line, layer, sceneData).then(function (line3D) {\n\n    if (line3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[line.id] = line3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(line3D);\n\n    pivot.position.x = vertex0.x;\n    pivot.position.y = layer.altitude;\n    pivot.position.z = -vertex0.y;\n\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].lines[lineID] = pivot;\n\n    applyInteract(pivot, function () {\n      return linesActions.selectLine(layer.id, line.id);\n    });\n\n    var opacity = layer.opacity;\n    if (line.selected) {\n      opacity = 1;\n    }\n    applyOpacity(pivot, opacity);\n    planData.sceneGraph.busyResources.layers[layer.id].lines[lineID] = false;\n  });\n}\n\nfunction updateLine(sceneData, oldSceneData, planData, layer, lineID, differences, catalog, linesActions, selfDestroy, selfBuild) {\n  var line = layer.getIn(['lines', lineID]);\n  var oldLine = oldSceneData.getIn(['layers', layer.id, 'lines', lineID]);\n  var mesh = planData.sceneGraph.layers[layer.id].lines[lineID];\n\n  if (!mesh) return null;\n\n  return catalog.getElement(line.type).updateRender3D(line, layer, sceneData, mesh, oldLine, differences, selfDestroy, selfBuild);\n}\n\nfunction addArea(sceneData, planData, layer, areaID, catalog, areaActions) {\n\n  if (planData.sceneGraph.busyResources.layers[layer.id].areas[areaID]) {\n    setTimeout(function () {\n      return addArea(sceneData, planData, layer, areaID, catalog, areaActions);\n    }, 100);\n    return;\n  }\n\n  planData.sceneGraph.busyResources.layers[layer.id].areas[areaID] = true;\n\n  var area = layer.getIn(['areas', areaID]);\n  var interactFunction = function interactFunction() {\n    return areaActions.selectArea(layer.id, areaID);\n  };\n\n  return catalog.getElement(area.type).render3D(area, layer, sceneData).then(function (area3D) {\n\n    if (area3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[areaID] = area3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(area3D);\n    pivot.position.y = layer.altitude;\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].areas[areaID] = pivot;\n\n    applyInteract(pivot, interactFunction);\n\n    var opacity = layer.opacity;\n    if (area.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n    planData.sceneGraph.busyResources.layers[layer.id].areas[areaID] = false;\n  });\n}\n\nfunction updateArea(sceneData, oldSceneData, planData, layer, areaID, differences, catalog, areaActions, selfDestroy, selfBuild) {\n  var area = layer.getIn(['areas', areaID]);\n  var oldArea = oldSceneData.getIn(['layers', layer.id, 'areas', areaID]);\n  var mesh = planData.sceneGraph.layers[layer.id].areas[areaID];\n\n  if (!mesh) return null;\n\n  return catalog.getElement(area.type).updateRender3D(area, layer, sceneData, mesh, oldArea, differences, selfDestroy, selfBuild);\n}\n\nfunction addItem(sceneData, planData, layer, itemID, catalog, itemsActions) {\n\n  var item = layer.getIn(['items', itemID]);\n\n  return catalog.getElement(item.type).render3D(item, layer, sceneData).then(function (item3D) {\n\n    if (item3D instanceof Three.LOD) {\n      planData.sceneGraph.LODs[itemID] = item3D;\n    }\n\n    var pivot = new Three.Object3D();\n    pivot.name = 'pivot';\n    pivot.add(item3D);\n\n    pivot.rotation.y = item.rotation * Math.PI / 180;\n    pivot.position.x = item.x;\n    pivot.position.y = layer.altitude;\n    pivot.position.z = -item.y;\n\n    applyInteract(item3D, function () {\n      itemsActions.selectItem(layer.id, item.id);\n    });\n\n    var opacity = layer.opacity;\n    if (item.selected) {\n      opacity = 1;\n    }\n\n    applyOpacity(pivot, opacity);\n\n    planData.plan.add(pivot);\n    planData.sceneGraph.layers[layer.id].items[item.id] = pivot;\n  });\n}\n\nfunction updateItem(sceneData, oldSceneData, planData, layer, itemID, differences, catalog, itemsActions, selfDestroy, selfBuild) {\n  var item = layer.getIn(['items', itemID]);\n  var oldItem = oldSceneData.getIn(['layers', layer.id, 'items', itemID]);\n  var mesh = planData.sceneGraph.layers[layer.id].items[itemID];\n\n  if (!mesh) return null;\n\n  return catalog.getElement(item.type).updateRender3D(item, layer, sceneData, mesh, oldItem, differences, selfDestroy, selfBuild);\n}\n\n// Apply interact function to children of an Object3D\nfunction applyInteract(object, interactFunction) {\n  object.traverse(function (child) {\n    if (child instanceof Three.Mesh) {\n      child.interact = interactFunction;\n    }\n  });\n}\n\n// Apply opacity to children of an Object3D\nfunction applyOpacity(object, opacity) {\n  object.traverse(function (child) {\n\n    if (child instanceof Three.Mesh) {\n      if (child.material instanceof Three.MultiMaterial) {\n        child.material.materials.forEach(function (materialChild) {\n          materialChild.transparent = true;\n          if (materialChild.maxOpacity) {\n            materialChild.opacity = Math.min(materialChild.maxOpacity, opacity);\n          } else if (materialChild.opacity && materialChild.opacity > opacity) {\n            materialChild.maxOpacity = materialChild.opacity;\n            materialChild.opacity = opacity;\n          }\n        });\n      } else if (child.material instanceof Array) {\n        child.material.forEach(function (material) {\n          material.transparent = true;\n          if (material.maxOpacity) {\n            material.opacity = Math.min(material.maxOpacity, opacity);\n          } else if (material.opacity && material.opacity > opacity) {\n            material.maxOpacity = material.opacity;\n            material.opacity = opacity;\n          }\n        });\n      } else {\n        child.material.transparent = true;\n        if (child.material.maxOpacity) {\n          child.material.opacity = Math.min(child.material.maxOpacity, opacity);\n        } else if (child.material.opacity && child.material.opacity > opacity) {\n          child.material.maxOpacity = child.material.opacity;\n          child.material.opacity = opacity;\n        }\n      }\n    }\n  });\n}\n\nfunction updateBoundingBox(planData) {\n  var newBoundingBox = new Three.Box3().setFromObject(planData.plan);\n  if (isFinite(newBoundingBox.max.x) && isFinite(newBoundingBox.min.x) && isFinite(newBoundingBox.max.y) && isFinite(newBoundingBox.min.y) && isFinite(newBoundingBox.max.z) && isFinite(newBoundingBox.min.z)) {\n\n    var newCenter = new Three.Vector3((newBoundingBox.max.x - newBoundingBox.min.x) / 2 + newBoundingBox.min.x, (newBoundingBox.max.y - newBoundingBox.min.y) / 2 + newBoundingBox.min.y, (newBoundingBox.max.z - newBoundingBox.min.z) / 2 + newBoundingBox.min.z);\n\n    planData.plan.position.sub(newCenter);\n    planData.grid.position.sub(newCenter);\n\n    newBoundingBox.min.sub(newCenter);\n    newBoundingBox.max.sub(newCenter);\n\n    planData.boundingBox = newBoundingBox;\n  }\n}\n\n/**\n * Filter the array of diffs\n * @param diffArray\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\nfunction filterDiffs(diffArray, sceneData, oldSceneData) {\n  return minimizeRemoveDiffsWhenSwitchingLayers(minimizeChangePropertiesAfterSelectionsDiffs(minimizeChangePropertiesDiffs(diffArray, sceneData, oldSceneData), sceneData, oldSceneData), sceneData, oldSceneData);\n}\n\n/**\n * Reduces the number of remove diffs when switching an hidden layer\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\nfunction minimizeRemoveDiffsWhenSwitchingLayers(diffArray, sceneData, oldSceneData) {\n\n  var foundDiff = void 0;\n  var i = void 0;\n  for (i = 0; i < diffArray.length && !foundDiff; i++) {\n    if (diffArray[i].path[1] === 'selectedLayer') {\n      foundDiff = diffArray[i];\n    }\n  }\n\n  if (foundDiff) {\n    if (!sceneData.getIn(['layers', oldSceneData.selectedLayer, 'visible'])) {\n      return diffArray.filter(function (_ref4) {\n        var op = _ref4.op,\n            path = _ref4.path;\n\n\n        return !(path[path.length - 1] === 'selected' && path[1] === 'layers' && path[2] === oldSceneData.selectedLayer) && !(op === 'remove' && path.indexOf(oldSceneData.selectedLayer) !== -1);\n      });\n    }\n  }\n\n  return diffArray;\n}\n\n/**\n * Reduces the number of change properties diffs for selected elements\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\nfunction minimizeChangePropertiesAfterSelectionsDiffs(diffArray, sceneData, oldSceneData) {\n  var idsFound = {};\n  diffArray.forEach(function (_ref5) {\n    var path = _ref5.path;\n\n    if (path[5] === 'selected') {\n      idsFound[path[4]] = path[4];\n    }\n  });\n\n  return diffArray.filter(function (_ref6) {\n    var path = _ref6.path;\n\n    if (path[5] === 'properties') {\n      return idsFound[path[4]] ? false : true;\n    }\n    return true;\n  });\n}\n\n/**\n * Reduces the number of change properties diffs\n * @param diffArray the array of the diffs\n * @param sceneData\n * @param oldSceneData\n * @returns {Array}\n */\nfunction minimizeChangePropertiesDiffs(diffArray, sceneData, oldSceneData) {\n  var idsFound = {};\n  return diffArray.filter(function (_ref7) {\n    var path = _ref7.path;\n\n    if (path[5] === 'properties') {\n      return idsFound[path[4]] ? false : idsFound[path[4]] = true;\n    } else if (path[5] === 'misc') {\n      // Remove misc changes\n      return false;\n    }\n    return true;\n  });\n}"]},"metadata":{},"sourceType":"module"}