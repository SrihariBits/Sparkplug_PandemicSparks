{"ast":null,"code":"var _jsxFileName = \"/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/items/cube/planner-element.jsx\";\nimport React from 'react';\nimport { BoxGeometry, MeshBasicMaterial, Mesh, BoxHelper } from 'three';\nimport { ReactPlannerSharedStyle } from 'react-planner';\nexport default {\n  name: 'cube',\n  prototype: 'items',\n  info: {\n    title: 'cube',\n    tag: ['demo'],\n    description: 'Demo item',\n    image: require('./cube.png')\n  },\n  properties: {\n    color: {\n      label: 'Color',\n      type: 'color',\n      defaultValue: ReactPlannerSharedStyle.AREA_MESH_COLOR.unselected\n    },\n    width: {\n      label: 'Width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: 'Height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    depth: {\n      label: 'Depth',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    }\n  },\n  render2D: (element, layer, scene) => {\n    let style = {\n      stroke: !element.selected ? ReactPlannerSharedStyle.LINE_MESH_COLOR.unselected : ReactPlannerSharedStyle.MESH_SELECTED,\n      strokeWidth: 2,\n      fill: element.properties.get('color')\n    };\n    let w = element.properties.getIn(['width', 'length']);\n    let d = element.properties.getIn(['depth', 'length']);\n    let w2 = w / 2;\n    let d2 = d / 2;\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(-${w2}, -${d2})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"rect\", {\n      x: \"0\",\n      y: \"0\",\n      width: w,\n      height: d,\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  },\n  render3D: (element, layer, scene) => {\n    let w = element.properties.getIn(['width', 'length']);\n    let h = element.properties.getIn(['height', 'length']);\n    let d = element.properties.getIn(['depth', 'length']);\n    let geometry = new BoxGeometry(w, h, d);\n    let material = new MeshBasicMaterial({\n      color: element.properties.get('color')\n    });\n    let mesh = new Mesh(geometry, material);\n    let box = new BoxHelper(mesh, !element.selected ? ReactPlannerSharedStyle.LINE_MESH_COLOR.unselected : ReactPlannerSharedStyle.MESH_SELECTED);\n    box.material.linewidth = 2;\n    box.renderOrder = 1000;\n    mesh.add(box);\n    mesh.position.y = h / 2;\n    return Promise.resolve(mesh);\n  }\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/items/cube/planner-element.jsx"],"names":["React","BoxGeometry","MeshBasicMaterial","Mesh","BoxHelper","ReactPlannerSharedStyle","name","prototype","info","title","tag","description","image","require","properties","color","label","type","defaultValue","AREA_MESH_COLOR","unselected","width","length","unit","height","depth","render2D","element","layer","scene","style","stroke","selected","LINE_MESH_COLOR","MESH_SELECTED","strokeWidth","fill","get","w","getIn","d","w2","d2","render3D","h","geometry","material","mesh","box","linewidth","renderOrder","add","position","y","Promise","resolve"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BoxGeometry, MeshBasicMaterial, Mesh, BoxHelper } from 'three';\nimport { ReactPlannerSharedStyle } from 'react-planner';\n\nexport default {\n  name: 'cube',\n  prototype: 'items',\n\n  info: {\n    title: 'cube',\n    tag: ['demo'],\n    description: 'Demo item',\n    image: require('./cube.png')\n  },\n\n  properties: {\n    color: {\n      label: 'Color',\n      type: 'color',\n      defaultValue: ReactPlannerSharedStyle.AREA_MESH_COLOR.unselected\n    },\n    width: {\n      label: 'Width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: 'Height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    depth: {\n      label: 'Depth',\n      type: 'length-measure',\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n  },\n\n  render2D: (element, layer, scene) => {\n    let style = {\n      stroke: !element.selected ? ReactPlannerSharedStyle.LINE_MESH_COLOR.unselected : ReactPlannerSharedStyle.MESH_SELECTED,\n      strokeWidth: 2,\n      fill: element.properties.get('color')\n    };\n\n    let w = element.properties.getIn(['width', 'length']);\n    let d = element.properties.getIn(['depth', 'length']);\n    let w2 = w / 2;\n    let d2 = d / 2;\n\n    return (\n      <g transform={`translate(-${w2}, -${d2})`}>\n        <rect x=\"0\" y=\"0\" width={w} height={d} style={style} />\n      </g>\n    );\n  },\n\n  render3D: (element, layer, scene) => {\n    let w = element.properties.getIn(['width', 'length']);\n    let h = element.properties.getIn(['height', 'length']);\n    let d = element.properties.getIn(['depth', 'length']);\n    let geometry = new BoxGeometry(w, h, d);\n    let material = new MeshBasicMaterial({\n      color: element.properties.get('color')\n    });\n\n    let mesh = new Mesh(geometry, material);\n\n    let box = new BoxHelper(mesh, !element.selected ? ReactPlannerSharedStyle.LINE_MESH_COLOR.unselected : ReactPlannerSharedStyle.MESH_SELECTED );\n    box.material.linewidth = 2;\n    box.renderOrder = 1000;\n    mesh.add(box);\n\n    mesh.position.y = (h / 2);\n\n    return Promise.resolve(mesh);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}