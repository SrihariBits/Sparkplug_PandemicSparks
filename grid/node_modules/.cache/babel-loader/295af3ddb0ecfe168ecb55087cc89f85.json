{"ast":null,"code":"import * as Three from 'three';\nimport { List } from 'immutable';\nimport { COLORS } from '../../../shared-style';\nexport default function (width, height, grid, font) {\n  var step = grid.properties.get('step');\n  var colors = grid.properties.has('color') ? new List([grid.properties.get('color')]) : grid.properties.get('colors');\n  var streak = new Three.Object3D();\n  streak.name = 'streak';\n  var counter = 0;\n\n  for (var i = 0; i <= width; i += step) {\n    var geometry = new Three.Geometry();\n    geometry.vertices.push(new Three.Vector3(i, 0, 0));\n    geometry.vertices.push(new Three.Vector3(i, 0, -height));\n    var color = colors.get(counter % colors.size);\n    var material = new Three.LineBasicMaterial({\n      color: color\n    });\n\n    if (counter % 5 == 0) {\n      var shape = new Three.TextGeometry('' + counter * step, {\n        size: 16,\n        height: 1,\n        font: font\n      });\n      var wrapper = new Three.MeshBasicMaterial({\n        color: COLORS.black\n      });\n      var words = new Three.Mesh(shape, wrapper);\n      words.rotation.x -= Math.PI / 2;\n      words.position.set(i - 20, 0, 50);\n      streak.add(words);\n    }\n\n    streak.add(new Three.LineSegments(geometry, material));\n    counter++;\n  }\n\n  return streak;\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/components/viewer3d/grids/grid-vertical-streak.js"],"names":["Three","List","COLORS","width","height","grid","font","step","properties","get","colors","has","streak","Object3D","name","counter","i","geometry","Geometry","vertices","push","Vector3","color","size","material","LineBasicMaterial","shape","TextGeometry","wrapper","MeshBasicMaterial","black","words","Mesh","rotation","x","Math","PI","position","set","add","LineSegments"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAEA,eAAe,UAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqC;AAClD,MAAIC,IAAI,GAAGF,IAAI,CAACG,UAAL,CAAgBC,GAAhB,CAAoB,MAApB,CAAX;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACG,UAAL,CAAgBG,GAAhB,CAAoB,OAApB,IAA+B,IAAIV,IAAJ,CAAS,CAACI,IAAI,CAACG,UAAL,CAAgBC,GAAhB,CAAoB,OAApB,CAAD,CAAT,CAA/B,GAA0EJ,IAAI,CAACG,UAAL,CAAgBC,GAAhB,CAAoB,QAApB,CAAvF;AAEA,MAAIG,MAAM,GAAG,IAAIZ,KAAK,CAACa,QAAV,EAAb;AACAD,EAAAA,MAAM,CAACE,IAAP,GAAc,QAAd;AAEA,MAAIC,OAAO,GAAG,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIb,KAArB,EAA4Ba,CAAC,IAAIT,IAAjC,EAAuC;AAErC,QAAIU,QAAQ,GAAG,IAAIjB,KAAK,CAACkB,QAAV,EAAf;AACAD,IAAAA,QAAQ,CAACE,QAAT,CAAkBC,IAAlB,CAAuB,IAAIpB,KAAK,CAACqB,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAvB;AACAC,IAAAA,QAAQ,CAACE,QAAT,CAAkBC,IAAlB,CAAuB,IAAIpB,KAAK,CAACqB,OAAV,CAAkBL,CAAlB,EAAqB,CAArB,EAAwB,CAACZ,MAAzB,CAAvB;AACA,QAAIkB,KAAK,GAAGZ,MAAM,CAACD,GAAP,CAAWM,OAAO,GAAGL,MAAM,CAACa,IAA5B,CAAZ;AACA,QAAIC,QAAQ,GAAG,IAAIxB,KAAK,CAACyB,iBAAV,CAA4B;AAAEH,MAAAA,KAAK,EAAEA;AAAT,KAA5B,CAAf;;AAEA,QAAIP,OAAO,GAAG,CAAV,IAAe,CAAnB,EAAsB;AACpB,UAAIW,KAAK,GAAG,IAAI1B,KAAK,CAAC2B,YAAV,CAAuB,KAAKZ,OAAO,GAAGR,IAAtC,EAA4C;AACtDgB,QAAAA,IAAI,EAAE,EADgD;AAEtDnB,QAAAA,MAAM,EAAE,CAF8C;AAGtDE,QAAAA,IAAI,EAAEA;AAHgD,OAA5C,CAAZ;AAMA,UAAIsB,OAAO,GAAG,IAAI5B,KAAK,CAAC6B,iBAAV,CAA4B;AAAEP,QAAAA,KAAK,EAAEpB,MAAM,CAAC4B;AAAhB,OAA5B,CAAd;AACA,UAAIC,KAAK,GAAG,IAAI/B,KAAK,CAACgC,IAAV,CAAeN,KAAf,EAAsBE,OAAtB,CAAZ;AAEAG,MAAAA,KAAK,CAACE,QAAN,CAAeC,CAAf,IAAoBC,IAAI,CAACC,EAAL,GAAU,CAA9B;AACAL,MAAAA,KAAK,CAACM,QAAN,CAAeC,GAAf,CAAmBtB,CAAC,GAAG,EAAvB,EAA2B,CAA3B,EAA8B,EAA9B;AACAJ,MAAAA,MAAM,CAAC2B,GAAP,CAAWR,KAAX;AACD;;AAEDnB,IAAAA,MAAM,CAAC2B,GAAP,CAAW,IAAIvC,KAAK,CAACwC,YAAV,CAAuBvB,QAAvB,EAAiCO,QAAjC,CAAX;AACAT,IAAAA,OAAO;AACR;;AACD,SAAOH,MAAP;AACD","sourcesContent":["import * as Three from 'three';\nimport { List } from 'immutable';\nimport { COLORS } from '../../../shared-style';\n\nexport default function (width, height, grid, font) {\n  var step = grid.properties.get('step');\n  var colors = grid.properties.has('color') ? new List([grid.properties.get('color')]) : grid.properties.get('colors');\n\n  var streak = new Three.Object3D();\n  streak.name = 'streak';\n\n  var counter = 0;\n\n  for (var i = 0; i <= width; i += step) {\n\n    var geometry = new Three.Geometry();\n    geometry.vertices.push(new Three.Vector3(i, 0, 0));\n    geometry.vertices.push(new Three.Vector3(i, 0, -height));\n    var color = colors.get(counter % colors.size);\n    var material = new Three.LineBasicMaterial({ color: color });\n\n    if (counter % 5 == 0) {\n      var shape = new Three.TextGeometry('' + counter * step, {\n        size: 16,\n        height: 1,\n        font: font\n      });\n\n      var wrapper = new Three.MeshBasicMaterial({ color: COLORS.black });\n      var words = new Three.Mesh(shape, wrapper);\n\n      words.rotation.x -= Math.PI / 2;\n      words.position.set(i - 20, 0, 50);\n      streak.add(words);\n    }\n\n    streak.add(new Three.LineSegments(geometry, material));\n    counter++;\n  }\n  return streak;\n}"]},"metadata":{},"sourceType":"module"}