{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport React from 'react';\nimport { createArea, updatedArea } from './area-factory-3d';\nimport * as SharedStyle from '../../shared-style';\nimport Translator from '../../translator/translator';\nvar translator = new Translator();\nexport default function AreaFactory(name, info, textures) {\n  var areaElement = {\n    name: name,\n    prototype: 'areas',\n    info: _extends({}, info, {\n      visibility: {\n        catalog: false,\n        layerElementsVisible: false\n      }\n    }),\n    properties: {\n      patternColor: {\n        label: translator.t('color'),\n        type: 'color',\n        defaultValue: SharedStyle.AREA_MESH_COLOR.unselected\n      },\n      thickness: {\n        label: translator.t('thickness'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 0\n        }\n      }\n    },\n    render2D: function render2D(element, layer, scene) {\n      var path = ''; ///print area path\n\n      element.vertices.forEach(function (vertexID, ind) {\n        var vertex = layer.vertices.get(vertexID);\n        path += (ind ? 'L' : 'M') + vertex.x + ' ' + vertex.y + ' ';\n      }); //add holes\n\n      element.holes.forEach(function (areaID) {\n        var area = layer.areas.get(areaID);\n        area.vertices.reverse().forEach(function (vertexID, ind) {\n          var vertex = layer.vertices.get(vertexID);\n          path += (ind ? 'L' : 'M') + vertex.x + ' ' + vertex.y + ' ';\n        });\n      });\n      var fill = element.selected ? SharedStyle.AREA_MESH_COLOR.selected : element.properties.get('patternColor');\n      return React.createElement('path', {\n        d: path,\n        fill: fill\n      });\n    },\n    render3D: function render3D(element, layer, scene) {\n      return createArea(element, layer, scene, textures);\n    },\n    updateRender3D: function updateRender3D(element, layer, scene, mesh, oldElement, differences, selfDestroy, selfBuild) {\n      return updatedArea(element, layer, scene, textures, mesh, oldElement, differences, selfDestroy, selfBuild);\n    }\n  };\n\n  if (textures && textures !== {}) {\n    var textureValues = {\n      'none': 'None'\n    };\n\n    for (var textureName in textures) {\n      textureValues[textureName] = textures[textureName].name;\n    }\n\n    areaElement.properties.texture = {\n      label: translator.t('texture'),\n      type: 'enum',\n      defaultValue: 'none',\n      values: textureValues\n    };\n  }\n\n  return areaElement;\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/catalog/factories/area-factory.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","React","createArea","updatedArea","SharedStyle","Translator","translator","AreaFactory","name","info","textures","areaElement","visibility","catalog","layerElementsVisible","properties","patternColor","label","t","type","defaultValue","AREA_MESH_COLOR","unselected","thickness","render2D","element","layer","scene","path","vertices","forEach","vertexID","ind","vertex","get","x","y","holes","areaID","area","areas","reverse","fill","selected","createElement","d","render3D","updateRender3D","mesh","oldElement","differences","selfDestroy","selfBuild","textureValues","textureName","texture","values"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport React from 'react';\nimport { createArea, updatedArea } from './area-factory-3d';\nimport * as SharedStyle from '../../shared-style';\nimport Translator from '../../translator/translator';\n\nvar translator = new Translator();\n\nexport default function AreaFactory(name, info, textures) {\n\n  var areaElement = {\n    name: name,\n    prototype: 'areas',\n    info: _extends({}, info, {\n      visibility: {\n        catalog: false,\n        layerElementsVisible: false\n      }\n    }),\n    properties: {\n      patternColor: {\n        label: translator.t('color'),\n        type: 'color',\n        defaultValue: SharedStyle.AREA_MESH_COLOR.unselected\n      },\n      thickness: {\n        label: translator.t('thickness'),\n        type: 'length-measure',\n        defaultValue: {\n          length: 0\n        }\n      }\n    },\n    render2D: function render2D(element, layer, scene) {\n      var path = '';\n\n      ///print area path\n      element.vertices.forEach(function (vertexID, ind) {\n        var vertex = layer.vertices.get(vertexID);\n        path += (ind ? 'L' : 'M') + vertex.x + ' ' + vertex.y + ' ';\n      });\n\n      //add holes\n      element.holes.forEach(function (areaID) {\n        var area = layer.areas.get(areaID);\n\n        area.vertices.reverse().forEach(function (vertexID, ind) {\n          var vertex = layer.vertices.get(vertexID);\n          path += (ind ? 'L' : 'M') + vertex.x + ' ' + vertex.y + ' ';\n        });\n      });\n\n      var fill = element.selected ? SharedStyle.AREA_MESH_COLOR.selected : element.properties.get('patternColor');\n\n      return React.createElement('path', { d: path, fill: fill });\n    },\n\n    render3D: function render3D(element, layer, scene) {\n      return createArea(element, layer, scene, textures);\n    },\n\n    updateRender3D: function updateRender3D(element, layer, scene, mesh, oldElement, differences, selfDestroy, selfBuild) {\n      return updatedArea(element, layer, scene, textures, mesh, oldElement, differences, selfDestroy, selfBuild);\n    }\n\n  };\n\n  if (textures && textures !== {}) {\n\n    var textureValues = { 'none': 'None' };\n\n    for (var textureName in textures) {\n      textureValues[textureName] = textures[textureName].name;\n    }\n\n    areaElement.properties.texture = {\n      label: translator.t('texture'),\n      type: 'enum',\n      defaultValue: 'none',\n      values: textureValues\n    };\n  }\n\n  return areaElement;\n}"]},"metadata":{},"sourceType":"module"}