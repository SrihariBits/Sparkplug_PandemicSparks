{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { List } from 'immutable';\nimport { Project, Area, Line, Hole, Item, Vertex } from './export';\nimport { GraphInnerCycles, GeometryUtils, IDBroker } from '../utils/export';\nimport { Layer as LayerModel } from '../models';\n\nvar sameSet = function sameSet(set1, set2) {\n  return set1.size === set2.size && set1.isSuperset(set2) && set1.isSubset(set2);\n};\n\nvar Layer = function () {\n  function Layer() {\n    _classCallCheck(this, Layer);\n  }\n\n  _createClass(Layer, null, [{\n    key: 'create',\n    value: function create(state, name, altitude) {\n      var layerID = IDBroker.acquireID();\n      name = name || 'layer ' + layerID;\n      altitude = altitude || 0;\n      var layer = new LayerModel({\n        id: layerID,\n        name: name,\n        altitude: altitude\n      });\n      state = state.setIn(['scene', 'selectedLayer'], layerID);\n      state = state.setIn(['scene', 'layers', layerID], layer);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'select',\n    value: function select(state, layerID) {\n      if (!state.get('alterate')) state = Project.unselectAll(state).updatedState;\n      state = state.setIn(['scene', 'selectedLayer'], layerID);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'selectElement',\n    value: function selectElement(state, layerID, elementPrototype, elementID) {\n      state = state.setIn(['scene', 'layers', layerID, elementPrototype, elementID, 'selected'], true);\n      state = state.updateIn(['scene', 'layers', layerID, 'selected', elementPrototype], function (elems) {\n        return elems.push(elementID);\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'unselect',\n    value: function unselect(state, layerID, elementPrototype, elementID) {\n      state = state.setIn(['scene', 'layers', layerID, elementPrototype, elementID, 'selected'], false);\n      state = state.updateIn(['scene', 'layers', layerID, 'selected', elementPrototype], function (elems) {\n        return elems.filter(function (el) {\n          return el.id === elementID;\n        });\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'unselectAll',\n    value: function unselectAll(state, layerID) {\n      var _state$getIn = state.getIn(['scene', 'layers', layerID]),\n          lines = _state$getIn.lines,\n          holes = _state$getIn.holes,\n          items = _state$getIn.items,\n          areas = _state$getIn.areas;\n\n      if (lines) lines.forEach(function (line) {\n        state = Line.unselect(state, layerID, line.id).updatedState;\n      });\n      if (holes) holes.forEach(function (hole) {\n        state = Hole.unselect(state, layerID, hole.id).updatedState;\n      });\n      if (items) items.forEach(function (item) {\n        state = Item.unselect(state, layerID, item.id).updatedState;\n      });\n      if (areas) areas.forEach(function (area) {\n        state = Area.unselect(state, layerID, area.id).updatedState;\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setProperties',\n    value: function setProperties(state, layerID, properties) {\n      state = state.mergeIn(['scene', 'layers', layerID], properties);\n      state = state.updateIn(['scene', 'layers'], function (layers) {\n        return layers.sort(function (a, b) {\n          return a.altitude !== b.altitude ? a.altitude - b.altitude : a.order - b.order;\n        });\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'remove',\n    value: function remove(state, layerID) {\n      state = state.removeIn(['scene', 'layers', layerID]);\n      state = state.setIn(['scene', 'selectedLayer'], state.scene.selectedLayer !== layerID ? state.scene.selectedLayer : state.scene.layers.first().id);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'removeElement',\n    value: function removeElement(state, layerID, elementPrototype, elementID) {\n      state = state.deleteIn(['scene', 'layers', layerID, elementPrototype, elementID]);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'detectAndUpdateAreas',\n    value: function detectAndUpdateAreas(state, layerID) {\n      var verticesArray = []; //array with vertices coords\n\n      var linesArray = void 0; //array with edges\n\n      var vertexID_to_verticesArrayIndex = {};\n      var verticesArrayIndex_to_vertexID = {};\n      state.getIn(['scene', 'layers', layerID, 'vertices']).forEach(function (vertex) {\n        var verticesCount = verticesArray.push([vertex.x, vertex.y]);\n        var latestVertexIndex = verticesCount - 1;\n        vertexID_to_verticesArrayIndex[vertex.id] = latestVertexIndex;\n        verticesArrayIndex_to_vertexID[latestVertexIndex] = vertex.id;\n      });\n      linesArray = state.getIn(['scene', 'layers', layerID, 'lines']).map(function (line) {\n        return line.vertices.map(function (vertexID) {\n          return vertexID_to_verticesArrayIndex[vertexID];\n        }).toArray();\n      });\n      var innerCyclesByVerticesArrayIndex = GraphInnerCycles.calculateInnerCycles(verticesArray, linesArray);\n      var innerCyclesByVerticesID = new List(innerCyclesByVerticesArrayIndex).map(function (cycle) {\n        return new List(cycle.map(function (vertexIndex) {\n          return verticesArrayIndex_to_vertexID[vertexIndex];\n        }));\n      }); // All area vertices should be ordered in counterclockwise order\n\n      innerCyclesByVerticesID = innerCyclesByVerticesID.map(function (area) {\n        return GraphInnerCycles.isClockWiseOrder(area.map(function (vertexID) {\n          return state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n        })) ? area.reverse() : area;\n      });\n      var areaIDs = []; //remove areas\n\n      state.getIn(['scene', 'layers', layerID, 'areas']).forEach(function (area) {\n        var areaInUse = innerCyclesByVerticesID.some(function (vertices) {\n          return sameSet(vertices, area.vertices);\n        });\n\n        if (!areaInUse) {\n          state = Area.remove(state, layerID, area.id).updatedState;\n        }\n      }); //add new areas\n\n      innerCyclesByVerticesID.forEach(function (cycle, ind) {\n        var areaInUse = state.getIn(['scene', 'layers', layerID, 'areas']).find(function (area) {\n          return sameSet(area.vertices, cycle);\n        });\n\n        if (areaInUse) {\n          areaIDs[ind] = areaInUse.id;\n          state = state.setIn(['scene', 'layers', layerID, 'areas', areaIDs[ind], 'holes'], new List());\n        } else {\n          var areaVerticesCoords = cycle.map(function (vertexID) {\n            return state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n          });\n          var resultAdd = Area.add(state, layerID, 'area', areaVerticesCoords, state.catalog);\n          areaIDs[ind] = resultAdd.area.id;\n          state = resultAdd.updatedState;\n        }\n      }); // Build a relationship between areas and their coordinates\n\n      var verticesCoordsForArea = areaIDs.map(function (id) {\n        var vertices = state.getIn(['scene', 'layers', layerID, 'areas', id]).vertices.map(function (vertexID) {\n          var _state$getIn2 = state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]),\n              x = _state$getIn2.x,\n              y = _state$getIn2.y;\n\n          return new List([x, y]);\n        });\n        return {\n          id: id,\n          vertices: vertices\n        };\n      }); // Find all holes for an area\n\n      var i = void 0,\n          j = void 0;\n\n      for (i = 0; i < verticesCoordsForArea.length; i++) {\n        var holesList = new List(); // The holes for this area\n\n        var areaVerticesList = verticesCoordsForArea[i].vertices.flatten().toArray();\n\n        for (j = 0; j < verticesCoordsForArea.length; j++) {\n          if (i !== j) {\n            var isHole = GeometryUtils.ContainsPoint(areaVerticesList, verticesCoordsForArea[j].vertices.get(0).get(0), verticesCoordsForArea[j].vertices.get(0).get(1));\n\n            if (isHole) {\n              holesList = holesList.push(verticesCoordsForArea[j].id);\n            }\n          }\n        }\n\n        state = state.setIn(['scene', 'layers', layerID, 'areas', verticesCoordsForArea[i].id, 'holes'], holesList);\n      } // Remove holes which are already holes for other areas\n\n\n      areaIDs.forEach(function (areaID) {\n        var doubleHoles = new Set();\n        var areaHoles = state.getIn(['scene', 'layers', layerID, 'areas', areaID, 'holes']);\n        areaHoles.forEach(function (areaHoleID) {\n          var holesOfholes = state.getIn(['scene', 'layers', layerID, 'areas', areaHoleID, 'holes']);\n          holesOfholes.forEach(function (holeID) {\n            if (areaHoles.indexOf(holeID) !== -1) doubleHoles.add(holeID);\n          });\n        });\n        doubleHoles.forEach(function (doubleHoleID) {\n          areaHoles = areaHoles.remove(areaHoles.indexOf(doubleHoleID));\n        });\n        state = state.setIn(['scene', 'layers', layerID, 'areas', areaID, 'holes'], areaHoles);\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'removeZeroLengthLines',\n    value: function removeZeroLengthLines(state, layerID) {\n      var updatedState = state.getIn(['scene', 'layers', layerID, 'lines']).reduce(function (newState, line) {\n        var v_id0 = line.getIn(['vertices', 0]);\n        var v_id1 = line.getIn(['vertices', 1]);\n        var v0 = newState.getIn(['scene', 'layers', layerID, 'vertices', v_id0]);\n        var v1 = newState.getIn(['scene', 'layers', layerID, 'vertices', v_id1]);\n\n        if (GeometryUtils.verticesDistance(v0, v1) === 0) {\n          newState = Line.remove(newState, layerID, line.id).updatedState;\n        }\n\n        return newState;\n      }, state);\n      return {\n        updatedState: updatedState\n      };\n    }\n  }, {\n    key: 'mergeEqualsVertices',\n    value: function mergeEqualsVertices(state, layerID, vertexID) {\n      //1. find vertices to remove\n      var vertex = state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n      var doubleVertices = state.getIn(['scene', 'layers', layerID, 'vertices']).filter(function (v) {\n        return v.id !== vertexID && GeometryUtils.samePoints(vertex, v) // &&\n        //!v.lines.contains( vertexID ) &&\n        //!v.areas.contains( vertexID )\n        ;\n      });\n      if (doubleVertices.isEmpty()) return {\n        updatedState: state\n      };\n      doubleVertices.forEach(function (doubleVertex) {\n        var reduced = doubleVertex.lines.reduce(function (reducedState, lineID) {\n          reducedState = reducedState.updateIn(['scene', 'layers', layerID, 'lines', lineID, 'vertices'], function (vertices) {\n            if (vertices) {\n              return vertices.map(function (v) {\n                return v === doubleVertex.id ? vertexID : v;\n              });\n            }\n          });\n          reducedState = Vertex.addElement(reducedState, layerID, vertexID, 'lines', lineID).updatedState;\n          return reducedState;\n        }, state);\n        var biReduced = doubleVertex.areas.reduce(function (reducedState, areaID) {\n          reducedState = reducedState.updateIn(['scene', 'layers', layerID, 'areas', areaID, 'vertices'], function (vertices) {\n            if (vertices) return vertices.map(function (v) {\n              return v === doubleVertex.id ? vertexID : v;\n            });\n          });\n          reducedState = Vertex.addElement(reducedState, layerID, vertexID, 'areas', areaID).updatedState;\n          return reducedState;\n        }, reduced);\n        state = Vertex.remove(biReduced, layerID, doubleVertex.id, null, null, true).updatedState;\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setPropertiesOnSelected',\n    value: function setPropertiesOnSelected(state, layerID, properties) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n      selected.lines.forEach(function (lineID) {\n        return state = Line.setProperties(state, layerID, lineID, properties).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.setProperties(state, layerID, holeID, properties).updatedState;\n      });\n      selected.areas.forEach(function (areaID) {\n        return state = Area.setProperties(state, layerID, areaID, properties).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.setProperties(state, layerID, itemID, properties).updatedState;\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'updatePropertiesOnSelected',\n    value: function updatePropertiesOnSelected(state, layerID, properties) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n      selected.lines.forEach(function (lineID) {\n        return state = Line.updateProperties(state, layerID, lineID, properties).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.updateProperties(state, layerID, holeID, properties).updatedState;\n      });\n      selected.areas.forEach(function (areaID) {\n        return state = Area.updateProperties(state, layerID, areaID, properties).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.updateProperties(state, layerID, itemID, properties).updatedState;\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setAttributesOnSelected',\n    value: function setAttributesOnSelected(state, layerID, attributes) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n      selected.lines.forEach(function (lineID) {\n        return state = Line.setAttributes(state, layerID, lineID, attributes).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.setAttributes(state, layerID, holeID, attributes).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.setAttributes(state, layerID, itemID, attributes).updatedState;\n      }); //selected.areas.forEach(areaID => state = Area.setAttributes( state, layerID, areaID, attributes ).updatedState);\n\n      return {\n        updatedState: state\n      };\n    }\n  }]);\n\n  return Layer;\n}();\n\nexport { Layer as default };","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/class/layer.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","List","Project","Area","Line","Hole","Item","Vertex","GraphInnerCycles","GeometryUtils","IDBroker","Layer","LayerModel","sameSet","set1","set2","size","isSuperset","isSubset","value","create","state","name","altitude","layerID","acquireID","layer","id","setIn","updatedState","select","get","unselectAll","selectElement","elementPrototype","elementID","updateIn","elems","push","unselect","filter","el","_state$getIn","getIn","lines","holes","items","areas","forEach","line","hole","item","area","setProperties","properties","mergeIn","layers","sort","a","b","order","remove","removeIn","scene","selectedLayer","first","removeElement","deleteIn","detectAndUpdateAreas","verticesArray","linesArray","vertexID_to_verticesArrayIndex","verticesArrayIndex_to_vertexID","vertex","verticesCount","x","y","latestVertexIndex","map","vertices","vertexID","toArray","innerCyclesByVerticesArrayIndex","calculateInnerCycles","innerCyclesByVerticesID","cycle","vertexIndex","isClockWiseOrder","reverse","areaIDs","areaInUse","some","ind","find","areaVerticesCoords","resultAdd","add","catalog","verticesCoordsForArea","_state$getIn2","j","holesList","areaVerticesList","flatten","isHole","ContainsPoint","areaID","doubleHoles","Set","areaHoles","areaHoleID","holesOfholes","holeID","indexOf","doubleHoleID","removeZeroLengthLines","reduce","newState","v_id0","v_id1","v0","v1","verticesDistance","mergeEqualsVertices","doubleVertices","v","samePoints","isEmpty","doubleVertex","reduced","reducedState","lineID","addElement","biReduced","setPropertiesOnSelected","selected","itemID","updatePropertiesOnSelected","updateProperties","setAttributesOnSelected","attributes","setAttributes","default"],"mappings":"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","sourcesContent":["var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { List } from 'immutable';\nimport { Project, Area, Line, Hole, Item, Vertex } from './export';\nimport { GraphInnerCycles, GeometryUtils, IDBroker } from '../utils/export';\nimport { Layer as LayerModel } from '../models';\n\nvar sameSet = function sameSet(set1, set2) {\n  return set1.size === set2.size && set1.isSuperset(set2) && set1.isSubset(set2);\n};\n\nvar Layer = function () {\n  function Layer() {\n    _classCallCheck(this, Layer);\n  }\n\n  _createClass(Layer, null, [{\n    key: 'create',\n    value: function create(state, name, altitude) {\n      var layerID = IDBroker.acquireID();\n      name = name || 'layer ' + layerID;\n      altitude = altitude || 0;\n\n      var layer = new LayerModel({ id: layerID, name: name, altitude: altitude });\n\n      state = state.setIn(['scene', 'selectedLayer'], layerID);\n      state = state.setIn(['scene', 'layers', layerID], layer);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'select',\n    value: function select(state, layerID) {\n      if (!state.get('alterate')) state = Project.unselectAll(state).updatedState;\n      state = state.setIn(['scene', 'selectedLayer'], layerID);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'selectElement',\n    value: function selectElement(state, layerID, elementPrototype, elementID) {\n      state = state.setIn(['scene', 'layers', layerID, elementPrototype, elementID, 'selected'], true);\n      state = state.updateIn(['scene', 'layers', layerID, 'selected', elementPrototype], function (elems) {\n        return elems.push(elementID);\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'unselect',\n    value: function unselect(state, layerID, elementPrototype, elementID) {\n      state = state.setIn(['scene', 'layers', layerID, elementPrototype, elementID, 'selected'], false);\n      state = state.updateIn(['scene', 'layers', layerID, 'selected', elementPrototype], function (elems) {\n        return elems.filter(function (el) {\n          return el.id === elementID;\n        });\n      });\n      return { updatedState: state };\n    }\n  }, {\n    key: 'unselectAll',\n    value: function unselectAll(state, layerID) {\n      var _state$getIn = state.getIn(['scene', 'layers', layerID]),\n          lines = _state$getIn.lines,\n          holes = _state$getIn.holes,\n          items = _state$getIn.items,\n          areas = _state$getIn.areas;\n\n      if (lines) lines.forEach(function (line) {\n        state = Line.unselect(state, layerID, line.id).updatedState;\n      });\n      if (holes) holes.forEach(function (hole) {\n        state = Hole.unselect(state, layerID, hole.id).updatedState;\n      });\n      if (items) items.forEach(function (item) {\n        state = Item.unselect(state, layerID, item.id).updatedState;\n      });\n      if (areas) areas.forEach(function (area) {\n        state = Area.unselect(state, layerID, area.id).updatedState;\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setProperties',\n    value: function setProperties(state, layerID, properties) {\n      state = state.mergeIn(['scene', 'layers', layerID], properties);\n      state = state.updateIn(['scene', 'layers'], function (layers) {\n        return layers.sort(function (a, b) {\n          return a.altitude !== b.altitude ? a.altitude - b.altitude : a.order - b.order;\n        });\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'remove',\n    value: function remove(state, layerID) {\n      state = state.removeIn(['scene', 'layers', layerID]);\n\n      state = state.setIn(['scene', 'selectedLayer'], state.scene.selectedLayer !== layerID ? state.scene.selectedLayer : state.scene.layers.first().id);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'removeElement',\n    value: function removeElement(state, layerID, elementPrototype, elementID) {\n      state = state.deleteIn(['scene', 'layers', layerID, elementPrototype, elementID]);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'detectAndUpdateAreas',\n    value: function detectAndUpdateAreas(state, layerID) {\n\n      var verticesArray = []; //array with vertices coords\n      var linesArray = void 0; //array with edges\n\n      var vertexID_to_verticesArrayIndex = {};\n      var verticesArrayIndex_to_vertexID = {};\n\n      state.getIn(['scene', 'layers', layerID, 'vertices']).forEach(function (vertex) {\n        var verticesCount = verticesArray.push([vertex.x, vertex.y]);\n        var latestVertexIndex = verticesCount - 1;\n        vertexID_to_verticesArrayIndex[vertex.id] = latestVertexIndex;\n        verticesArrayIndex_to_vertexID[latestVertexIndex] = vertex.id;\n      });\n\n      linesArray = state.getIn(['scene', 'layers', layerID, 'lines']).map(function (line) {\n        return line.vertices.map(function (vertexID) {\n          return vertexID_to_verticesArrayIndex[vertexID];\n        }).toArray();\n      });\n\n      var innerCyclesByVerticesArrayIndex = GraphInnerCycles.calculateInnerCycles(verticesArray, linesArray);\n\n      var innerCyclesByVerticesID = new List(innerCyclesByVerticesArrayIndex).map(function (cycle) {\n        return new List(cycle.map(function (vertexIndex) {\n          return verticesArrayIndex_to_vertexID[vertexIndex];\n        }));\n      });\n\n      // All area vertices should be ordered in counterclockwise order\n      innerCyclesByVerticesID = innerCyclesByVerticesID.map(function (area) {\n        return GraphInnerCycles.isClockWiseOrder(area.map(function (vertexID) {\n          return state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n        })) ? area.reverse() : area;\n      });\n\n      var areaIDs = [];\n\n      //remove areas\n      state.getIn(['scene', 'layers', layerID, 'areas']).forEach(function (area) {\n        var areaInUse = innerCyclesByVerticesID.some(function (vertices) {\n          return sameSet(vertices, area.vertices);\n        });\n        if (!areaInUse) {\n          state = Area.remove(state, layerID, area.id).updatedState;\n        }\n      });\n\n      //add new areas\n      innerCyclesByVerticesID.forEach(function (cycle, ind) {\n        var areaInUse = state.getIn(['scene', 'layers', layerID, 'areas']).find(function (area) {\n          return sameSet(area.vertices, cycle);\n        });\n\n        if (areaInUse) {\n          areaIDs[ind] = areaInUse.id;\n          state = state.setIn(['scene', 'layers', layerID, 'areas', areaIDs[ind], 'holes'], new List());\n        } else {\n          var areaVerticesCoords = cycle.map(function (vertexID) {\n            return state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n          });\n          var resultAdd = Area.add(state, layerID, 'area', areaVerticesCoords, state.catalog);\n\n          areaIDs[ind] = resultAdd.area.id;\n          state = resultAdd.updatedState;\n        }\n      });\n\n      // Build a relationship between areas and their coordinates\n      var verticesCoordsForArea = areaIDs.map(function (id) {\n        var vertices = state.getIn(['scene', 'layers', layerID, 'areas', id]).vertices.map(function (vertexID) {\n          var _state$getIn2 = state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]),\n              x = _state$getIn2.x,\n              y = _state$getIn2.y;\n\n          return new List([x, y]);\n        });\n        return { id: id, vertices: vertices };\n      });\n\n      // Find all holes for an area\n      var i = void 0,\n          j = void 0;\n      for (i = 0; i < verticesCoordsForArea.length; i++) {\n        var holesList = new List(); // The holes for this area\n        var areaVerticesList = verticesCoordsForArea[i].vertices.flatten().toArray();\n        for (j = 0; j < verticesCoordsForArea.length; j++) {\n          if (i !== j) {\n            var isHole = GeometryUtils.ContainsPoint(areaVerticesList, verticesCoordsForArea[j].vertices.get(0).get(0), verticesCoordsForArea[j].vertices.get(0).get(1));\n            if (isHole) {\n              holesList = holesList.push(verticesCoordsForArea[j].id);\n            }\n          }\n        }\n        state = state.setIn(['scene', 'layers', layerID, 'areas', verticesCoordsForArea[i].id, 'holes'], holesList);\n      }\n\n      // Remove holes which are already holes for other areas\n      areaIDs.forEach(function (areaID) {\n        var doubleHoles = new Set();\n        var areaHoles = state.getIn(['scene', 'layers', layerID, 'areas', areaID, 'holes']);\n        areaHoles.forEach(function (areaHoleID) {\n          var holesOfholes = state.getIn(['scene', 'layers', layerID, 'areas', areaHoleID, 'holes']);\n          holesOfholes.forEach(function (holeID) {\n            if (areaHoles.indexOf(holeID) !== -1) doubleHoles.add(holeID);\n          });\n        });\n        doubleHoles.forEach(function (doubleHoleID) {\n          areaHoles = areaHoles.remove(areaHoles.indexOf(doubleHoleID));\n        });\n        state = state.setIn(['scene', 'layers', layerID, 'areas', areaID, 'holes'], areaHoles);\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'removeZeroLengthLines',\n    value: function removeZeroLengthLines(state, layerID) {\n      var updatedState = state.getIn(['scene', 'layers', layerID, 'lines']).reduce(function (newState, line) {\n        var v_id0 = line.getIn(['vertices', 0]);\n        var v_id1 = line.getIn(['vertices', 1]);\n\n        var v0 = newState.getIn(['scene', 'layers', layerID, 'vertices', v_id0]);\n        var v1 = newState.getIn(['scene', 'layers', layerID, 'vertices', v_id1]);\n\n        if (GeometryUtils.verticesDistance(v0, v1) === 0) {\n          newState = Line.remove(newState, layerID, line.id).updatedState;\n        }\n\n        return newState;\n      }, state);\n\n      return { updatedState: updatedState };\n    }\n  }, {\n    key: 'mergeEqualsVertices',\n    value: function mergeEqualsVertices(state, layerID, vertexID) {\n      //1. find vertices to remove\n      var vertex = state.getIn(['scene', 'layers', layerID, 'vertices', vertexID]);\n\n      var doubleVertices = state.getIn(['scene', 'layers', layerID, 'vertices']).filter(function (v) {\n        return v.id !== vertexID && GeometryUtils.samePoints(vertex, v) // &&\n        //!v.lines.contains( vertexID ) &&\n        //!v.areas.contains( vertexID )\n        ;\n      });\n\n      if (doubleVertices.isEmpty()) return { updatedState: state };\n\n      doubleVertices.forEach(function (doubleVertex) {\n        var reduced = doubleVertex.lines.reduce(function (reducedState, lineID) {\n\n          reducedState = reducedState.updateIn(['scene', 'layers', layerID, 'lines', lineID, 'vertices'], function (vertices) {\n            if (vertices) {\n              return vertices.map(function (v) {\n                return v === doubleVertex.id ? vertexID : v;\n              });\n            }\n          });\n          reducedState = Vertex.addElement(reducedState, layerID, vertexID, 'lines', lineID).updatedState;\n\n          return reducedState;\n        }, state);\n\n        var biReduced = doubleVertex.areas.reduce(function (reducedState, areaID) {\n\n          reducedState = reducedState.updateIn(['scene', 'layers', layerID, 'areas', areaID, 'vertices'], function (vertices) {\n            if (vertices) return vertices.map(function (v) {\n              return v === doubleVertex.id ? vertexID : v;\n            });\n          });\n          reducedState = Vertex.addElement(reducedState, layerID, vertexID, 'areas', areaID).updatedState;\n\n          return reducedState;\n        }, reduced);\n\n        state = Vertex.remove(biReduced, layerID, doubleVertex.id, null, null, true).updatedState;\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setPropertiesOnSelected',\n    value: function setPropertiesOnSelected(state, layerID, properties) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n\n      selected.lines.forEach(function (lineID) {\n        return state = Line.setProperties(state, layerID, lineID, properties).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.setProperties(state, layerID, holeID, properties).updatedState;\n      });\n      selected.areas.forEach(function (areaID) {\n        return state = Area.setProperties(state, layerID, areaID, properties).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.setProperties(state, layerID, itemID, properties).updatedState;\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'updatePropertiesOnSelected',\n    value: function updatePropertiesOnSelected(state, layerID, properties) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n\n      selected.lines.forEach(function (lineID) {\n        return state = Line.updateProperties(state, layerID, lineID, properties).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.updateProperties(state, layerID, holeID, properties).updatedState;\n      });\n      selected.areas.forEach(function (areaID) {\n        return state = Area.updateProperties(state, layerID, areaID, properties).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.updateProperties(state, layerID, itemID, properties).updatedState;\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setAttributesOnSelected',\n    value: function setAttributesOnSelected(state, layerID, attributes) {\n      var selected = state.getIn(['scene', 'layers', layerID, 'selected']);\n\n      selected.lines.forEach(function (lineID) {\n        return state = Line.setAttributes(state, layerID, lineID, attributes).updatedState;\n      });\n      selected.holes.forEach(function (holeID) {\n        return state = Hole.setAttributes(state, layerID, holeID, attributes).updatedState;\n      });\n      selected.items.forEach(function (itemID) {\n        return state = Item.setAttributes(state, layerID, itemID, attributes).updatedState;\n      });\n      //selected.areas.forEach(areaID => state = Area.setAttributes( state, layerID, areaID, attributes ).updatedState);\n\n      return { updatedState: state };\n    }\n  }]);\n\n  return Layer;\n}();\n\nexport { Layer as default };"]},"metadata":{},"sourceType":"module"}