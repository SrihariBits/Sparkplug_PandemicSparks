{"ast":null,"code":"import Graph from './graph';\nimport getEdgesOfSubgraphs from './get-edges-of-subgraphs';\nimport graphCycles from './graph-cycles';\nimport { List } from 'immutable';\nexport function calculateInnerCycles(verticesArray, edgesArray) {\n  var innerCycles = new List();\n  var graph = new Graph(verticesArray.length);\n  edgesArray.forEach(function (line) {\n    graph.addEdge(line[0], line[1]);\n    graph.addEdge(line[1], line[0]);\n  });\n  graph.BCC();\n  var subgraphs = graph.subgraphs.filter(function (subgraph) {\n    return subgraph.length >= 3;\n  });\n  var edgesOfSubgraphsArray = getEdgesOfSubgraphs(subgraphs, graph);\n  var edges = [];\n  edgesOfSubgraphsArray.forEach(function (es) {\n    es.forEach(function (edge) {\n      return edges.push(edge);\n    });\n  });\n  var cycles = graphCycles(verticesArray, edges);\n  cycles.v_cycles.forEach(function (cycle) {\n    cycle.shift();\n    innerCycles = innerCycles.push(cycle);\n  });\n  return innerCycles;\n}\nexport function isClockWiseOrder(innerCycleWithCoords) {\n  // See: https://stackoverflow.com/a/1165943 and http://blog.element84.com/polygon-winding.html\n  var i = 0;\n  var twiceEnclosedArea = 0;\n  var size = innerCycleWithCoords.size;\n\n  for (i = 0; i < size; i++) {\n    var _innerCycleWithCoords = innerCycleWithCoords.get(i),\n        x1 = _innerCycleWithCoords.x,\n        y1 = _innerCycleWithCoords.y;\n\n    var _innerCycleWithCoords2 = innerCycleWithCoords.get((i + 1) % size),\n        x2 = _innerCycleWithCoords2.x,\n        y2 = _innerCycleWithCoords2.y;\n\n    twiceEnclosedArea += (x2 - x1) * (y2 + y1);\n  }\n\n  return twiceEnclosedArea > 0;\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/utils/graph-inner-cycles.js"],"names":["Graph","getEdgesOfSubgraphs","graphCycles","List","calculateInnerCycles","verticesArray","edgesArray","innerCycles","graph","length","forEach","line","addEdge","BCC","subgraphs","filter","subgraph","edgesOfSubgraphsArray","edges","es","edge","push","cycles","v_cycles","cycle","shift","isClockWiseOrder","innerCycleWithCoords","i","twiceEnclosedArea","size","_innerCycleWithCoords","get","x1","x","y1","y","_innerCycleWithCoords2","x2","y2"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,WAArB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,aAA9B,EAA6CC,UAA7C,EAAyD;AAC9D,MAAIC,WAAW,GAAG,IAAIJ,IAAJ,EAAlB;AAEA,MAAIK,KAAK,GAAG,IAAIR,KAAJ,CAAUK,aAAa,CAACI,MAAxB,CAAZ;AACAH,EAAAA,UAAU,CAACI,OAAX,CAAmB,UAAUC,IAAV,EAAgB;AACjCH,IAAAA,KAAK,CAACI,OAAN,CAAcD,IAAI,CAAC,CAAD,CAAlB,EAAuBA,IAAI,CAAC,CAAD,CAA3B;AACAH,IAAAA,KAAK,CAACI,OAAN,CAAcD,IAAI,CAAC,CAAD,CAAlB,EAAuBA,IAAI,CAAC,CAAD,CAA3B;AACD,GAHD;AAKAH,EAAAA,KAAK,CAACK,GAAN;AAEA,MAAIC,SAAS,GAAGN,KAAK,CAACM,SAAN,CAAgBC,MAAhB,CAAuB,UAAUC,QAAV,EAAoB;AACzD,WAAOA,QAAQ,CAACP,MAAT,IAAmB,CAA1B;AACD,GAFe,CAAhB;AAGA,MAAIQ,qBAAqB,GAAGhB,mBAAmB,CAACa,SAAD,EAAYN,KAAZ,CAA/C;AAEA,MAAIU,KAAK,GAAG,EAAZ;AACAD,EAAAA,qBAAqB,CAACP,OAAtB,CAA8B,UAAUS,EAAV,EAAc;AAC1CA,IAAAA,EAAE,CAACT,OAAH,CAAW,UAAUU,IAAV,EAAgB;AACzB,aAAOF,KAAK,CAACG,IAAN,CAAWD,IAAX,CAAP;AACD,KAFD;AAGD,GAJD;AAMA,MAAIE,MAAM,GAAGpB,WAAW,CAACG,aAAD,EAAgBa,KAAhB,CAAxB;AACAI,EAAAA,MAAM,CAACC,QAAP,CAAgBb,OAAhB,CAAwB,UAAUc,KAAV,EAAiB;AACvCA,IAAAA,KAAK,CAACC,KAAN;AACAlB,IAAAA,WAAW,GAAGA,WAAW,CAACc,IAAZ,CAAiBG,KAAjB,CAAd;AACD,GAHD;AAKA,SAAOjB,WAAP;AACD;AAED,OAAO,SAASmB,gBAAT,CAA0BC,oBAA1B,EAAgD;AACrD;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,iBAAiB,GAAG,CAAxB;AACA,MAAIC,IAAI,GAAGH,oBAAoB,CAACG,IAAhC;;AAEA,OAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,IAAhB,EAAsBF,CAAC,EAAvB,EAA2B;AACzB,QAAIG,qBAAqB,GAAGJ,oBAAoB,CAACK,GAArB,CAAyBJ,CAAzB,CAA5B;AAAA,QACIK,EAAE,GAAGF,qBAAqB,CAACG,CAD/B;AAAA,QAEIC,EAAE,GAAGJ,qBAAqB,CAACK,CAF/B;;AAIA,QAAIC,sBAAsB,GAAGV,oBAAoB,CAACK,GAArB,CAAyB,CAACJ,CAAC,GAAG,CAAL,IAAUE,IAAnC,CAA7B;AAAA,QACIQ,EAAE,GAAGD,sBAAsB,CAACH,CADhC;AAAA,QAEIK,EAAE,GAAGF,sBAAsB,CAACD,CAFhC;;AAIAP,IAAAA,iBAAiB,IAAI,CAACS,EAAE,GAAGL,EAAN,KAAaM,EAAE,GAAGJ,EAAlB,CAArB;AACD;;AAED,SAAON,iBAAiB,GAAG,CAA3B;AACD","sourcesContent":["import Graph from './graph';\nimport getEdgesOfSubgraphs from './get-edges-of-subgraphs';\nimport graphCycles from './graph-cycles';\nimport { List } from 'immutable';\n\nexport function calculateInnerCycles(verticesArray, edgesArray) {\n  var innerCycles = new List();\n\n  var graph = new Graph(verticesArray.length);\n  edgesArray.forEach(function (line) {\n    graph.addEdge(line[0], line[1]);\n    graph.addEdge(line[1], line[0]);\n  });\n\n  graph.BCC();\n\n  var subgraphs = graph.subgraphs.filter(function (subgraph) {\n    return subgraph.length >= 3;\n  });\n  var edgesOfSubgraphsArray = getEdgesOfSubgraphs(subgraphs, graph);\n\n  var edges = [];\n  edgesOfSubgraphsArray.forEach(function (es) {\n    es.forEach(function (edge) {\n      return edges.push(edge);\n    });\n  });\n\n  var cycles = graphCycles(verticesArray, edges);\n  cycles.v_cycles.forEach(function (cycle) {\n    cycle.shift();\n    innerCycles = innerCycles.push(cycle);\n  });\n\n  return innerCycles;\n}\n\nexport function isClockWiseOrder(innerCycleWithCoords) {\n  // See: https://stackoverflow.com/a/1165943 and http://blog.element84.com/polygon-winding.html\n\n  var i = 0;\n  var twiceEnclosedArea = 0;\n  var size = innerCycleWithCoords.size;\n\n  for (i = 0; i < size; i++) {\n    var _innerCycleWithCoords = innerCycleWithCoords.get(i),\n        x1 = _innerCycleWithCoords.x,\n        y1 = _innerCycleWithCoords.y;\n\n    var _innerCycleWithCoords2 = innerCycleWithCoords.get((i + 1) % size),\n        x2 = _innerCycleWithCoords2.x,\n        y2 = _innerCycleWithCoords2.y;\n\n    twiceEnclosedArea += (x2 - x1) * (y2 + y1);\n  }\n\n  return twiceEnclosedArea > 0;\n}"]},"metadata":{},"sourceType":"module"}