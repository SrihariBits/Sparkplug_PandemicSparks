{"ast":null,"code":"import { MODE_IDLE, MODE_3D_FIRST_PERSON, MODE_3D_VIEW, MODE_SNAPPING, KEYBOARD_BUTTON_CODE } from '../constants';\nimport { rollback, undo, remove, toggleSnap, copyProperties, pasteProperties, setAlterateState } from '../actions/project-actions';\nexport default function keyboard() {\n  return function (store, stateExtractor) {\n    window.addEventListener('keydown', function (event) {\n      var state = stateExtractor(store.getState());\n      var mode = state.get('mode');\n\n      switch (event.keyCode) {\n        case KEYBOARD_BUTTON_CODE.BACKSPACE:\n        case KEYBOARD_BUTTON_CODE.DELETE:\n          {\n            if ([MODE_IDLE, MODE_3D_FIRST_PERSON, MODE_3D_VIEW].includes(mode)) store.dispatch(remove());\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.ESC:\n          {\n            store.dispatch(rollback());\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.Z:\n          {\n            if (event.getModifierState('Control') || event.getModifierState('Meta')) store.dispatch(undo());\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.ALT:\n          {\n            if (MODE_SNAPPING.includes(mode)) store.dispatch(toggleSnap(state.snapMask.merge({\n              SNAP_POINT: false,\n              SNAP_LINE: false,\n              SNAP_SEGMENT: false,\n              SNAP_GRID: false,\n              SNAP_GUIDE: false,\n              tempSnapConfiguartion: state.snapMask.toJS()\n            })));\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.C:\n          {\n            var selectedLayer = state.getIn(['scene', 'selectedLayer']);\n            var selected = state.getIn(['scene', 'layers', selectedLayer, 'selected']);\n\n            if ((mode === MODE_IDLE || mode === MODE_3D_VIEW) && (selected.holes.size || selected.areas.size || selected.items.size || selected.lines.size)) {\n              if (selected.holes.size) {\n                var hole = state.getIn(['scene', 'layers', selectedLayer, 'holes', selected.holes.get(0)]);\n                store.dispatch(copyProperties(hole.get('properties')));\n              } else if (selected.areas.size) {\n                var area = state.getIn(['scene', 'layers', selectedLayer, 'areas', selected.areas.get(0)]);\n                store.dispatch(copyProperties(area.properties));\n              } else if (selected.items.size) {\n                var item = state.getIn(['scene', 'layers', selectedLayer, 'items', selected.items.get(0)]);\n                store.dispatch(copyProperties(item.properties));\n              } else if (selected.lines.size) {\n                var line = state.getIn(['scene', 'layers', selectedLayer, 'lines', selected.lines.get(0)]);\n                store.dispatch(copyProperties(line.properties));\n              }\n            }\n\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.V:\n          {\n            store.dispatch(pasteProperties());\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.CTRL:\n          {\n            store.dispatch(setAlterateState());\n            break;\n          }\n      }\n    });\n    window.addEventListener('keyup', function (event) {\n      var state = stateExtractor(store.getState());\n      var mode = state.get('mode');\n\n      switch (event.keyCode) {\n        case KEYBOARD_BUTTON_CODE.ALT:\n          {\n            if (MODE_SNAPPING.includes(mode)) store.dispatch(toggleSnap(state.snapMask.merge(state.snapMask.get('tempSnapConfiguartion'))));\n            break;\n          }\n\n        case KEYBOARD_BUTTON_CODE.CTRL:\n          {\n            store.dispatch(setAlterateState());\n            break;\n          }\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/plugins/keyboard.js"],"names":["MODE_IDLE","MODE_3D_FIRST_PERSON","MODE_3D_VIEW","MODE_SNAPPING","KEYBOARD_BUTTON_CODE","rollback","undo","remove","toggleSnap","copyProperties","pasteProperties","setAlterateState","keyboard","store","stateExtractor","window","addEventListener","event","state","getState","mode","get","keyCode","BACKSPACE","DELETE","includes","dispatch","ESC","Z","getModifierState","ALT","snapMask","merge","SNAP_POINT","SNAP_LINE","SNAP_SEGMENT","SNAP_GRID","SNAP_GUIDE","tempSnapConfiguartion","toJS","C","selectedLayer","getIn","selected","holes","size","areas","items","lines","hole","area","properties","item","line","V","CTRL"],"mappings":"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","sourcesContent":["import { MODE_IDLE, MODE_3D_FIRST_PERSON, MODE_3D_VIEW, MODE_SNAPPING, KEYBOARD_BUTTON_CODE } from '../constants';\n\nimport { rollback, undo, remove, toggleSnap, copyProperties, pasteProperties, setAlterateState } from '../actions/project-actions';\n\nexport default function keyboard() {\n\n  return function (store, stateExtractor) {\n\n    window.addEventListener('keydown', function (event) {\n\n      var state = stateExtractor(store.getState());\n      var mode = state.get('mode');\n\n      switch (event.keyCode) {\n        case KEYBOARD_BUTTON_CODE.BACKSPACE:\n        case KEYBOARD_BUTTON_CODE.DELETE:\n          {\n            if ([MODE_IDLE, MODE_3D_FIRST_PERSON, MODE_3D_VIEW].includes(mode)) store.dispatch(remove());\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.ESC:\n          {\n            store.dispatch(rollback());\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.Z:\n          {\n            if (event.getModifierState('Control') || event.getModifierState('Meta')) store.dispatch(undo());\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.ALT:\n          {\n            if (MODE_SNAPPING.includes(mode)) store.dispatch(toggleSnap(state.snapMask.merge({\n              SNAP_POINT: false,\n              SNAP_LINE: false,\n              SNAP_SEGMENT: false,\n              SNAP_GRID: false,\n              SNAP_GUIDE: false,\n              tempSnapConfiguartion: state.snapMask.toJS()\n            })));\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.C:\n          {\n            var selectedLayer = state.getIn(['scene', 'selectedLayer']);\n            var selected = state.getIn(['scene', 'layers', selectedLayer, 'selected']);\n\n            if ((mode === MODE_IDLE || mode === MODE_3D_VIEW) && (selected.holes.size || selected.areas.size || selected.items.size || selected.lines.size)) {\n              if (selected.holes.size) {\n                var hole = state.getIn(['scene', 'layers', selectedLayer, 'holes', selected.holes.get(0)]);\n                store.dispatch(copyProperties(hole.get('properties')));\n              } else if (selected.areas.size) {\n                var area = state.getIn(['scene', 'layers', selectedLayer, 'areas', selected.areas.get(0)]);\n                store.dispatch(copyProperties(area.properties));\n              } else if (selected.items.size) {\n                var item = state.getIn(['scene', 'layers', selectedLayer, 'items', selected.items.get(0)]);\n                store.dispatch(copyProperties(item.properties));\n              } else if (selected.lines.size) {\n                var line = state.getIn(['scene', 'layers', selectedLayer, 'lines', selected.lines.get(0)]);\n                store.dispatch(copyProperties(line.properties));\n              }\n            }\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.V:\n          {\n            store.dispatch(pasteProperties());\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.CTRL:\n          {\n            store.dispatch(setAlterateState());\n            break;\n          }\n      }\n    });\n\n    window.addEventListener('keyup', function (event) {\n\n      var state = stateExtractor(store.getState());\n      var mode = state.get('mode');\n\n      switch (event.keyCode) {\n        case KEYBOARD_BUTTON_CODE.ALT:\n          {\n            if (MODE_SNAPPING.includes(mode)) store.dispatch(toggleSnap(state.snapMask.merge(state.snapMask.get('tempSnapConfiguartion'))));\n            break;\n          }\n        case KEYBOARD_BUTTON_CODE.CTRL:\n          {\n            store.dispatch(setAlterateState());\n            break;\n          }\n      }\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}