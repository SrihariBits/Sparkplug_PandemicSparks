{"ast":null,"code":"var _jsxFileName = \"/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/items/deskoffice/planner-element.jsx\";\nimport * as Three from 'three';\nimport React from 'react';\nconst textureLoader = new Three.TextureLoader();\nconst white = textureLoader.load(require(\"./white.jpg\"));\nconst whiteMaterial = new Three.MeshLambertMaterial({\n  color: 0x000000\n});\nconst wood = textureLoader.load(require(\"./wood.jpg\"));\nconst glassMaterial = new Three.MeshLambertMaterial({\n  color: 0xc6c6c6,\n  transparent: true,\n  opacity: .5\n});\n\nfunction makeMonitor(newDepth) {\n  let monitor = new Three.Object3D();\n  let cubeGeometryBase = new Three.BoxGeometry(0.04, 0.42, 0.06);\n  let whiteTexture = new Three.MeshLambertMaterial({\n    map: white\n  });\n  let edge1 = new Three.Mesh(cubeGeometryBase, whiteTexture);\n  edge1.position.set(0, 0.79, 0);\n  edge1.rotation.x = Math.PI / 2;\n  monitor.add(edge1);\n  let edge2 = new Three.Mesh(cubeGeometryBase, whiteTexture);\n  edge2.position.set(0, 0.43, 0);\n  edge2.rotation.x = Math.PI / 2;\n  monitor.add(edge2);\n  let cubeGeometryBase2 = new Three.BoxGeometry(0.04, 0.42, 0.04);\n  let edge3 = new Three.Mesh(cubeGeometryBase2, whiteTexture);\n  edge3.position.set(0, 0.61, 0.21);\n  monitor.add(edge3);\n  let edge4 = new Three.Mesh(cubeGeometryBase2, whiteTexture);\n  edge4.position.set(0, 0.61, -0.21);\n  monitor.add(edge4);\n  let cubeGeometryBase3 = new Three.BoxGeometry(0.4, 0.40, 0.05);\n  let screen = new Three.Mesh(cubeGeometryBase3, whiteMaterial);\n  screen.position.set(-0.02, 0.61, 0);\n  screen.rotation.y = Math.PI / 2;\n  monitor.add(screen);\n  monitor.rotation.y -= Math.PI / 2;\n  monitor.rotation.x -= Math.PI / 3;\n  let value = new Three.Box3().setFromObject(monitor);\n  let deltaX = Math.abs(value.max.x - value.min.x);\n  let deltaY = Math.abs(value.max.y - value.min.y);\n  let deltaZ = Math.abs(value.max.z - value.min.z);\n  monitor.scale.set(newDepth / 3 / deltaX, newDepth / 4 / deltaY, newDepth / 4 / deltaZ);\n  return monitor;\n}\n\nfunction makeObjectMaxLOD(newWidthA, newWidthB, newHeight, newDepth) {\n  let desk = new Three.Mesh();\n  let rectShape = new Three.Shape();\n\n  if (newWidthA < newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA / 2 - newWidthB / 2, newDepth);\n    rectShape.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2), newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  } else if (newWidthA > newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA, 0);\n    rectShape.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n  } else if (newWidthA === newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(0, newDepth);\n    rectShape.lineTo(newWidthA, newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  }\n\n  let extrudeSettings = {\n    steps: 2,\n    depth: newHeight / 40,\n    bevelEnabled: false,\n    bevelThickness: newHeight,\n    bevelSize: newHeight,\n    bevelSegments: 2\n  };\n  let geometry = new Three.ExtrudeGeometry(rectShape, extrudeSettings);\n  let woodTexture = new Three.MeshLambertMaterial({\n    map: wood\n  });\n  let mesh = new Three.Mesh(geometry, woodTexture);\n  mesh.rotation.x += Math.PI / 2;\n  mesh.position.y = newHeight / 1.8;\n  let rectShape2 = new Three.Shape();\n  let hole = new Three.Path();\n\n  if (newWidthA < newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape2.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n    hole.moveTo(newWidthB / 20, newDepth / 20);\n    hole.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB / 20, newDepth / 20);\n    rectShape2.holes.push(hole);\n  } else if (newWidthA > newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape2.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n    hole.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  } else if (newWidthA === newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA, newDepth);\n    rectShape2.lineTo(0, newDepth);\n    hole.moveTo(newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  }\n\n  let geometry2 = new Three.ExtrudeGeometry(rectShape2, extrudeSettings);\n  let mesh2 = new Three.Mesh(geometry2, woodTexture);\n  mesh2.position.y += newHeight;\n  mesh2.position.z += newDepth / 40;\n  mesh2.rotation.x += Math.PI / 2;\n  let mesh3 = new Three.Mesh(geometry, woodTexture);\n  mesh3.position.y += newHeight;\n  mesh3.rotation.x += Math.PI / 1.5;\n\n  if (newWidthA < newWidthB) {\n    mesh3.scale.set(.98, 1, 1);\n    mesh3.position.x += 3;\n  }\n\n  if (newWidthA > newWidthB || newWidthA === newWidthB) mesh3.scale.set(1, 1, 1);\n  let glass = new Three.Shape();\n\n  if (newWidthA < newWidthB) {\n    glass.moveTo(newWidthB / 20, newDepth / 20);\n    glass.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB / 20, newDepth / 20);\n  } else if (newWidthA > newWidthB) {\n    glass.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n  } else if (newWidthA === newWidthB) {\n    glass.moveTo(newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA / 20, newDepth - newDepth / 20);\n  }\n\n  let geometry4 = new Three.ExtrudeGeometry(glass, extrudeSettings);\n  let mesh4 = new Three.Mesh(geometry4, glassMaterial);\n  mesh4.position.y += newHeight;\n  mesh4.rotation.x += Math.PI / 2;\n  let geometry5 = new Three.BoxGeometry(newWidthA, newDepth / 20, 1.6 * newHeight);\n  let mesh5 = new Three.Mesh(geometry5, woodTexture);\n  mesh5.rotation.x += Math.PI / 2;\n  mesh5.position.set(newWidthA / 2, newHeight / 5, 0);\n  let c;\n  if (newWidthA < newWidthB) c = newWidthB / 2 - newWidthA / 2;else if (newWidthA > newWidthB) c = newWidthA / 2 - newWidthB / 2;\n  let value = newDepth / c;\n  let angle = Math.atan(value);\n  let edge;\n  edge = Math.sqrt(Math.pow(c, 2) + Math.pow(newDepth, 2));\n  if (newWidthA === newWidthB) edge = newDepth;\n  let geometry6 = new Three.BoxGeometry(edge, newDepth / 20, 1.6 * newHeight);\n  let mesh6 = new Three.Mesh(geometry6, woodTexture);\n  mesh6.rotation.x += Math.PI / 2;\n\n  if (newWidthA < newWidthB) {\n    mesh6.position.set(-(newWidthB / 2 - newWidthA / 2) / 2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z -= angle;\n  } else if (newWidthA > newWidthB) {\n    mesh6.position.set((newWidthA - (newWidthA / 2 + newWidthB / 2)) / 2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z += angle;\n  } else if (newWidthA === newWidthB) {\n    mesh6.position.set(0, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z += Math.PI / 2;\n  }\n\n  let mesh7 = mesh6.clone();\n\n  if (newWidthA < newWidthB) {\n    mesh7.position.set(newWidthB - 1.5 * (newWidthB / 2 - newWidthA / 2), newHeight / 5, newDepth / 2);\n    mesh7.rotation.z = -Math.PI + angle;\n  } else if (newWidthA > newWidthB) {\n    mesh7.position.set(newWidthA - (newWidthA / 2 - newWidthB / 2) / 2, newHeight / 5, newDepth / 2);\n    mesh7.rotation.z = -Math.PI - angle;\n  } else if (newWidthA === newWidthB) {\n    mesh7.position.set(newWidthB, newHeight / 5, newDepth / 2);\n  }\n\n  let index;\n  let indexMonitor;\n  let lastPosition;\n  let lastPositionMonitor;\n  let incrPosition;\n\n  if (newWidthA < newWidthB) {\n    index = 0;\n    indexMonitor = newWidthB / 2 - newWidthA / 2;\n    lastPosition = newWidthB - 2 * (newWidthB / 2 - newWidthA / 2);\n    lastPositionMonitor = newWidthB - 2 * (newWidthB / 2 - newWidthA / 2) - (newWidthB / 2 - newWidthA / 2);\n    incrPosition = newWidthB / 2 - newWidthA / 2;\n  } else if (newWidthA > newWidthB) {\n    index = newWidthA / 2 - newWidthB / 2;\n    indexMonitor = 2 * (newWidthA / 2 - newWidthB / 2);\n    lastPosition = newWidthA - (newWidthA / 2 - newWidthB / 2);\n    lastPositionMonitor = newWidthA - 2 * (newWidthA / 2 - newWidthB / 2);\n    incrPosition = newWidthA / 2 - newWidthB / 2;\n  } else if (newWidthA === newWidthB) {\n    index = 0;\n    indexMonitor = newWidthA / 8;\n    lastPosition = newWidthA;\n    lastPositionMonitor = newWidthA - newWidthA / 8;\n    incrPosition = newWidthA / 8;\n  }\n\n  for (let i = index + incrPosition; i < lastPosition; i += incrPosition) {\n    let geometry8 = new Three.BoxGeometry(newDepth, newDepth / 20, 1.55 * newHeight);\n    let mesh8 = new Three.Mesh(geometry8, woodTexture);\n    mesh8.rotation.x = Math.PI / 2;\n    mesh8.rotation.z = Math.PI / 2;\n    mesh8.position.x += i;\n    mesh8.position.y += newHeight / 5;\n    mesh8.position.z += newDepth / 2;\n    desk.add(mesh8);\n  }\n\n  desk.add(mesh);\n  desk.add(mesh2);\n  desk.add(mesh3);\n  desk.add(mesh4);\n  desk.add(mesh5);\n  desk.add(mesh6);\n  desk.add(mesh7);\n\n  for (let i = indexMonitor + incrPosition / 2; i < lastPositionMonitor; i += incrPosition) {\n    let monitor2 = makeMonitor(newDepth);\n    monitor2.position.x = i;\n    monitor2.position.z += 1.15 * newDepth;\n    monitor2.position.y += mesh3.position.y / 2.2;\n    desk.add(monitor2);\n  }\n\n  return desk;\n}\n\nfunction makeObjectMinLOD(newWidthA, newWidthB, newHeight, newDepth) {\n  let desk = new Three.Mesh();\n  let rectShape = new Three.Shape();\n\n  if (newWidthA < newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA / 2 - newWidthB / 2, newDepth);\n    rectShape.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2), newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  } else if (newWidthA > newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA, 0);\n    rectShape.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n  } else if (newWidthA === newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(0, newDepth);\n    rectShape.lineTo(newWidthA, newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  }\n\n  let extrudeSettings = {\n    steps: 2,\n    depth: newHeight / 40,\n    bevelEnabled: false,\n    bevelThickness: newHeight,\n    bevelSize: newHeight,\n    bevelSegments: 2\n  };\n  let geometry = new Three.ExtrudeGeometry(rectShape, extrudeSettings);\n  let woodTexture = new Three.MeshLambertMaterial({\n    map: wood\n  });\n  let mesh = new Three.Mesh(geometry, woodTexture);\n  mesh.rotation.x += Math.PI / 2;\n  mesh.position.y = newHeight / 1.8;\n  let rectShape2 = new Three.Shape();\n  let hole = new Three.Path();\n\n  if (newWidthA < newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape2.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n    hole.moveTo(newWidthB / 20, newDepth / 20);\n    hole.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB / 20, newDepth / 20);\n    rectShape2.holes.push(hole);\n  } else if (newWidthA > newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB / 2 - newWidthA / 2), newDepth);\n    rectShape2.lineTo(-(newWidthB / 2 - newWidthA / 2), newDepth);\n    hole.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  } else if (newWidthA === newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA, newDepth);\n    rectShape2.lineTo(0, newDepth);\n    hole.moveTo(newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  }\n\n  let geometry2 = new Three.ExtrudeGeometry(rectShape2, extrudeSettings);\n  let mesh2 = new Three.Mesh(geometry2, woodTexture);\n  mesh2.position.y += newHeight;\n  mesh2.position.z += newDepth / 40;\n  mesh2.rotation.x += Math.PI / 2;\n  let mesh3 = new Three.Mesh(geometry, woodTexture);\n  mesh3.position.y += newHeight;\n  mesh3.rotation.x += Math.PI / 1.5;\n\n  if (newWidthA < newWidthB) {\n    mesh3.scale.set(.98, 1, 1);\n    mesh3.position.x += 3;\n  }\n\n  if (newWidthA > newWidthB || newWidthA === newWidthB) mesh3.scale.set(1, 1, 1);\n  let glass = new Three.Shape();\n\n  if (newWidthA < newWidthB) {\n    glass.moveTo(newWidthB / 20, newDepth / 20);\n    glass.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB / 20, newDepth / 20);\n  } else if (newWidthA > newWidthB) {\n    glass.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n  } else if (newWidthA === newWidthB) {\n    glass.moveTo(newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA / 20, newDepth - newDepth / 20);\n  }\n\n  let geometry4 = new Three.ExtrudeGeometry(glass, extrudeSettings);\n  let glassMaterial = new Three.MeshLambertMaterial({\n    color: 0xc6c6c6,\n    transparent: true,\n    opacity: .5\n  });\n  let mesh4 = new Three.Mesh(geometry4, glassMaterial);\n  mesh4.position.y += newHeight;\n  mesh4.rotation.x += Math.PI / 2;\n  let geometry5 = new Three.BoxGeometry(newWidthA, newDepth / 20, 1.6 * newHeight);\n  let mesh5 = new Three.Mesh(geometry5, woodTexture);\n  mesh5.rotation.x += Math.PI / 2;\n  mesh5.position.set(newWidthA / 2, newHeight / 5, 0);\n  let c;\n  if (newWidthA < newWidthB) c = newWidthB / 2 - newWidthA / 2;else if (newWidthA > newWidthB) c = newWidthA / 2 - newWidthB / 2;\n  let value = newDepth / c;\n  let angle = Math.atan(value);\n  let edge;\n  edge = Math.sqrt(Math.pow(c, 2) + Math.pow(newDepth, 2));\n  if (newWidthA === newWidthB) edge = newDepth;\n  let geometry6 = new Three.BoxGeometry(edge, newDepth / 20, 1.6 * newHeight);\n  let mesh6 = new Three.Mesh(geometry6, woodTexture);\n  mesh6.rotation.x += Math.PI / 2;\n\n  if (newWidthA < newWidthB) {\n    mesh6.position.set(-(newWidthB / 2 - newWidthA / 2) / 2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z -= angle;\n  } else if (newWidthA > newWidthB) {\n    mesh6.position.set((newWidthA - (newWidthA / 2 + newWidthB / 2)) / 2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z += angle;\n  } else if (newWidthA === newWidthB) {\n    mesh6.position.set(0, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z += Math.PI / 2;\n  }\n\n  let mesh7 = mesh6.clone();\n\n  if (newWidthA < newWidthB) {\n    mesh7.position.set(newWidthB - 1.5 * (newWidthB / 2 - newWidthA / 2), newHeight / 5, newDepth / 2);\n    mesh7.rotation.z = -Math.PI + angle;\n  } else if (newWidthA > newWidthB) {\n    mesh7.position.set(newWidthA - (newWidthA / 2 - newWidthB / 2) / 2, newHeight / 5, newDepth / 2);\n    mesh7.rotation.z = -Math.PI - angle;\n  } else if (newWidthA === newWidthB) {\n    mesh7.position.set(newWidthB, newHeight / 5, newDepth / 2);\n  }\n\n  desk.add(mesh);\n  desk.add(mesh2);\n  desk.add(mesh3);\n  desk.add(mesh4);\n  desk.add(mesh5);\n  desk.add(mesh6);\n  desk.add(mesh7);\n  return desk;\n}\n\nexport default {\n  name: \"desk\",\n  prototype: \"items\",\n  info: {\n    tag: ['furnishings', 'wood'],\n    title: \"desk\",\n    description: \"desk\",\n    image: require('./desk.png')\n  },\n  properties: {\n    widthA: {\n      label: \"larghezza lato A\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 400,\n        unit: 'cm'\n      }\n    },\n    widthB: {\n      label: \"larghezza lato B\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 400,\n        unit: 'cm'\n      }\n    },\n    depth: {\n      label: \"depth\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: \"height\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    altitude: {\n      label: \"altitude\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 0,\n        unit: 'cm'\n      }\n    }\n  },\n  render2D: function (element, layer, scene) {\n    let newWidthA = element.properties.get('widthA').get('length');\n    let newWidthB = element.properties.get('widthB').get('length');\n    let newDepth = element.properties.get('depth').get('length');\n    let angle = element.rotation + 90;\n    let textRotation = 0;\n\n    if (Math.sin(angle * Math.PI / 180) < 0) {\n      textRotation = 180;\n    }\n\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${-newWidthA / 2},${-newDepth / 2})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"path\", {\n      key: \"1\",\n      d: `M ${newWidthA / 2 - newWidthB / 2} 0 l ${-newWidthA / 2 + newWidthB / 2} ${newDepth} l ${newWidthA} 0 l ${-newWidthA / 2 + newWidthB / 2}${-newDepth} l ${-newWidthB} 0`,\n      stroke: \"red\",\n      transform: `translate(0, ${newDepth}) scale(1,-1)`,\n      style: {\n        stroke: element.selected ? '#0096fd' : '#000',\n        strokeWidth: \"2px\",\n        fill: \"#84e1ce\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"text\", {\n      key: \"5\",\n      x: \"0\",\n      y: \"0\",\n      transform: `translate(${newWidthA / 2}, ${newDepth / 2}) scale(1,-1) rotate(${textRotation})`,\n      style: {\n        textAnchor: \"middle\",\n        fontSize: \"11px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 9\n      }\n    }, element.type));\n  },\n  render3D: function (element, layer, scene) {\n    let newWidthA = element.properties.get('widthA').get('length');\n    let newWidthB = element.properties.get('widthB').get('length');\n    let newDepth = element.properties.get('depth').get('length');\n    let newHeight = element.properties.get('height').get('length');\n    let newAltitude = element.properties.get('altitude').get('length');\n    /********** lod max **********/\n\n    let scrivaniaMaxLOD = new Three.Object3D();\n    scrivaniaMaxLOD.add(makeObjectMaxLOD(newWidthA, newWidthB, newHeight, newDepth).clone());\n    let aa = new Three.Box3().setFromObject(scrivaniaMaxLOD);\n    let deltaX = Math.abs(aa.max.x - aa.min.x);\n    let deltaY = Math.abs(aa.max.y - aa.min.y);\n    let deltaZ = Math.abs(aa.max.z - aa.min.z);\n    scrivaniaMaxLOD.position.y += newHeight / 2 + newAltitude;\n    scrivaniaMaxLOD.position.z += newDepth / 2;\n    if (newWidthA < newWidthB) scrivaniaMaxLOD.position.x += newWidthB / 2 - (newWidthB / 2 - newWidthA / 2);\n    if (newWidthA > newWidthB) scrivaniaMaxLOD.position.x += newWidthA / 2;\n    if (newWidthA === newWidthB) scrivaniaMaxLOD.position.x += newWidthB / 2;\n    scrivaniaMaxLOD.rotation.y += Math.PI;\n    if (newWidthA < newWidthB) scrivaniaMaxLOD.scale.set(newWidthB / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if (newWidthA > newWidthB) scrivaniaMaxLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if (newWidthA === newWidthB) scrivaniaMaxLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    /********** lod min **********/\n\n    let scrivaniaMinLOD = new Three.Object3D();\n    scrivaniaMinLOD.add(makeObjectMinLOD(newWidthA, newWidthB, newHeight, newDepth).clone());\n    scrivaniaMinLOD.position.y += newHeight / 2 + newAltitude;\n    scrivaniaMinLOD.position.z += newDepth / 2;\n    if (newWidthA < newWidthB) scrivaniaMinLOD.position.x += newWidthB / 2 - (newWidthB / 2 - newWidthA / 2);\n    if (newWidthA > newWidthB) scrivaniaMinLOD.position.x += newWidthA / 2;\n    if (newWidthA === newWidthB) scrivaniaMinLOD.position.x += newWidthB / 2;\n    scrivaniaMinLOD.rotation.y += Math.PI;\n    if (newWidthA < newWidthB) scrivaniaMinLOD.scale.set(newWidthB / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if (newWidthA > newWidthB) scrivaniaMinLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if (newWidthA === newWidthB) scrivaniaMinLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    /*** add all Level of Detail ***/\n\n    let lod = new Three.LOD();\n    lod.addLevel(scrivaniaMaxLOD, 700);\n    lod.addLevel(scrivaniaMinLOD, 1000);\n    lod.updateMatrix();\n    lod.matrixAutoUpdate = false;\n\n    if (element.selected) {\n      let bbox = new Three.BoxHelper(lod, 0x99c3fb);\n      bbox.material.linewidth = 5;\n      bbox.renderOrder = 1000;\n      bbox.material.depthTest = false;\n      lod.add(bbox);\n    }\n\n    return Promise.resolve(lod);\n  }\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/items/deskoffice/planner-element.jsx"],"names":["Three","React","textureLoader","TextureLoader","white","load","require","whiteMaterial","MeshLambertMaterial","color","wood","glassMaterial","transparent","opacity","makeMonitor","newDepth","monitor","Object3D","cubeGeometryBase","BoxGeometry","whiteTexture","map","edge1","Mesh","position","set","rotation","x","Math","PI","add","edge2","cubeGeometryBase2","edge3","edge4","cubeGeometryBase3","screen","y","value","Box3","setFromObject","deltaX","abs","max","min","deltaY","deltaZ","z","scale","makeObjectMaxLOD","newWidthA","newWidthB","newHeight","desk","rectShape","Shape","moveTo","lineTo","extrudeSettings","steps","depth","bevelEnabled","bevelThickness","bevelSize","bevelSegments","geometry","ExtrudeGeometry","woodTexture","mesh","rectShape2","hole","Path","holes","push","geometry2","mesh2","mesh3","glass","geometry4","mesh4","geometry5","mesh5","c","angle","atan","edge","sqrt","pow","geometry6","mesh6","mesh7","clone","index","indexMonitor","lastPosition","lastPositionMonitor","incrPosition","i","geometry8","mesh8","monitor2","makeObjectMinLOD","name","prototype","info","tag","title","description","image","properties","widthA","label","type","defaultValue","length","unit","widthB","height","altitude","render2D","element","layer","scene","get","textRotation","sin","stroke","selected","strokeWidth","fill","textAnchor","fontSize","render3D","newAltitude","scrivaniaMaxLOD","aa","scrivaniaMinLOD","lod","LOD","addLevel","updateMatrix","matrixAutoUpdate","bbox","BoxHelper","material","linewidth","renderOrder","depthTest","Promise","resolve"],"mappings":"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","sourcesContent":["import * as Three from 'three';\nimport React from 'react';\n\nconst textureLoader = new Three.TextureLoader();\nconst white = textureLoader.load(require(\"./white.jpg\"));\nconst whiteMaterial = new Three.MeshLambertMaterial({color:0x000000});\nconst wood = textureLoader.load(require(\"./wood.jpg\"));\nconst glassMaterial = new Three.MeshLambertMaterial({color:0xc6c6c6,transparent: true, opacity:.5});\n\nfunction makeMonitor(newDepth)\n{\n  let monitor = new Three.Object3D();\n\n  let cubeGeometryBase = new Three.BoxGeometry(0.04,0.42,0.06);\n  let whiteTexture = new Three.MeshLambertMaterial({map:white});\n  let edge1 = new Three.Mesh(cubeGeometryBase,whiteTexture);\n  edge1.position.set(0,0.79,0);\n  edge1.rotation.x=Math.PI/2;\n  monitor.add(edge1);\n\n  let edge2 = new Three.Mesh(cubeGeometryBase,whiteTexture);\n  edge2.position.set(0,0.43,0);\n  edge2.rotation.x=Math.PI/2;\n  monitor.add(edge2);\n\n  let cubeGeometryBase2 = new Three.BoxGeometry(0.04,0.42,0.04);\n  let edge3 = new Three.Mesh(cubeGeometryBase2,whiteTexture);\n  edge3.position.set(0,0.61,0.21);\n  monitor.add(edge3);\n\n  let edge4 = new Three.Mesh(cubeGeometryBase2,whiteTexture);\n  edge4.position.set(0,0.61,-0.21);\n  monitor.add(edge4);\n\n  let cubeGeometryBase3 = new Three.BoxGeometry(0.4,0.40,0.05);\n  let screen = new Three.Mesh(cubeGeometryBase3,whiteMaterial);\n  screen.position.set(-0.02,0.61,0);\n  screen.rotation.y=Math.PI/2;\n  monitor.add(screen);\n\n  monitor.rotation.y-=Math.PI/2;\n  monitor.rotation.x-=Math.PI/3;\n\n  let value = new Three.Box3().setFromObject(monitor);\n\n  let deltaX = Math.abs(value.max.x - value.min.x);\n  let deltaY = Math.abs(value.max.y - value.min.y);\n  let deltaZ = Math.abs(value.max.z - value.min.z);\n\n  monitor.scale.set(newDepth/3 / deltaX, newDepth/4 / deltaY, newDepth/4 / deltaZ);\n\n  return monitor\n}\n\nfunction makeObjectMaxLOD(newWidthA,newWidthB,newHeight,newDepth) {\n\n  let desk = new Three.Mesh();\n\n  let rectShape = new Three.Shape();\n  if(newWidthA<newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA / 2 - newWidthB / 2, newDepth);\n    rectShape.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2), newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  }\n  else if(newWidthA>newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA, 0);\n    rectShape.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n  }\n  else if(newWidthA===newWidthB){\n    rectShape.moveTo( 0,0 );\n    rectShape.lineTo( 0, newDepth );\n    rectShape.lineTo( newWidthA, newDepth );\n    rectShape.lineTo( newWidthA, 0 );\n  }\n\n  let extrudeSettings = {\n    steps: 2,\n    depth: newHeight/40,\n    bevelEnabled: false,\n    bevelThickness: newHeight,\n    bevelSize: newHeight,\n    bevelSegments: 2\n  };\n\n\n\n  let geometry = new Three.ExtrudeGeometry( rectShape, extrudeSettings );\n  let woodTexture = new Three.MeshLambertMaterial({map:wood});\n  let mesh = new Three.Mesh( geometry, woodTexture ) ;\n\n  mesh.rotation.x+=Math.PI/2;\n  mesh.position.y=newHeight/1.8;\n\n  let rectShape2 = new Three.Shape();\n  let hole = new Three.Path();\n  if(newWidthA<newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape2.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n\n    hole.moveTo(newWidthB/20, newDepth/20);\n    hole.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB/20, newDepth - newDepth/20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB/20, newDepth -newDepth/20);\n    hole.lineTo(newWidthA - newWidthB/20, newDepth/20);\n    rectShape2.holes.push(hole);\n  }\n  else if(newWidthA>newWidthB){\n\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape2.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n\n    hole.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  }\n  else if(newWidthA===newWidthB){\n\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA, newDepth);\n    rectShape2.lineTo(0, newDepth);\n\n    hole.moveTo(newWidthA/20, newDepth/20);\n    hole.lineTo(newWidthA-newWidthA/20, newDepth/20);\n    hole.lineTo(newWidthA-newWidthA/20, newDepth-newDepth/20);\n    hole.lineTo(newWidthA/20, newDepth-newDepth/20);\n    rectShape2.holes.push(hole);\n  }\n\n  let geometry2 = new Three.ExtrudeGeometry( rectShape2, extrudeSettings );\n  let mesh2 = new Three.Mesh( geometry2, woodTexture ) ;\n  mesh2.position.y+=newHeight;\n  mesh2.position.z+=newDepth/40;\n  mesh2.rotation.x+=Math.PI/2;\n\n  let mesh3 = new Three.Mesh( geometry, woodTexture ) ;\n  mesh3.position.y+=newHeight;\n  mesh3.rotation.x+=Math.PI/1.5;\n\n  if (newWidthA < newWidthB) {\n    mesh3.scale.set(.98,1,1);\n    mesh3.position.x += 3;\n  }\n  if (newWidthA > newWidthB || newWidthA === newWidthB) mesh3.scale.set(1,1,1);\n\n  let glass = new Three.Shape();\n  if(newWidthA<newWidthB) {\n    glass.moveTo(newWidthB/20, newDepth/20);\n    glass.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB/20, newDepth - newDepth/20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB/20, newDepth -newDepth/20);\n    glass.lineTo(newWidthA - newWidthB/20, newDepth/20);\n  }\n  else if (newWidthA>newWidthB){\n    glass.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n  }\n  else if (newWidthA===newWidthB){\n    glass.moveTo(newWidthA/20, newDepth/20);\n    glass.lineTo(newWidthA-newWidthA/20, newDepth/20);\n    glass.lineTo(newWidthA-newWidthA/20, newDepth-newDepth/20);\n    glass.lineTo(newWidthA/20, newDepth-newDepth/20);\n  }\n\n  let geometry4 = new Three.ExtrudeGeometry( glass, extrudeSettings );\n  let mesh4 = new Three.Mesh( geometry4, glassMaterial ) ;\n  mesh4.position.y+=newHeight;\n  mesh4.rotation.x+=Math.PI/2;\n\n  let geometry5 = new Three.BoxGeometry(newWidthA,newDepth/20,1.6*newHeight);\n  let mesh5 = new Three.Mesh(geometry5, woodTexture);\n  mesh5.rotation.x+=Math.PI/2;\n  mesh5.position.set(newWidthA/2,newHeight/5,0);\n\n  let c;\n\n  if(newWidthA<newWidthB)\n    c = (newWidthB/2 - newWidthA/2);\n  else if(newWidthA>newWidthB)\n    c = (newWidthA/2 - newWidthB/2);\n\n  let value = (newDepth)/c;\n  let angle = Math.atan(value);\n  let edge;\n\n  edge = Math.sqrt(Math.pow(c,2)+Math.pow(newDepth,2));\n\n  if (newWidthA===newWidthB) edge = newDepth;\n\n  let geometry6 = new Three.BoxGeometry(edge,newDepth/20,1.6*newHeight);\n  let mesh6 = new Three.Mesh(geometry6, woodTexture);\n  mesh6.rotation.x+=Math.PI/2;\n\n  if(newWidthA<newWidthB) {\n    mesh6.position.set(-(newWidthB/2 - newWidthA/2)/2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z-=angle;\n  }\n  else if(newWidthA>newWidthB) {\n    mesh6.position.set((newWidthA- (newWidthA/2+newWidthB/2))/2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z+=angle;\n  }\n  else if(newWidthA===newWidthB) {\n    mesh6.position.set(0, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z+=Math.PI/2;\n  }\n\n\n  let mesh7 = mesh6.clone();\n  if(newWidthA<newWidthB) {\n    mesh7.position.set(newWidthB- 1.5 * (newWidthB/2 - newWidthA/2) , newHeight / 5, newDepth / 2);\n    mesh7.rotation.z=-Math.PI + angle;\n  }\n  else if(newWidthA>newWidthB) {\n    mesh7.position.set(newWidthA - (newWidthA/2 - newWidthB/2)/2, newHeight / 5, newDepth / 2);\n    mesh7.rotation.z=-Math.PI - angle;\n  }\n  else if(newWidthA===newWidthB) {\n    mesh7.position.set(newWidthB,newHeight/5,newDepth/2);\n  }\n\n  let index;\n  let indexMonitor;\n  let lastPosition;\n  let lastPositionMonitor;\n  let incrPosition;\n\n  if (newWidthA<newWidthB){\n    index = 0;\n    indexMonitor = newWidthB/2 - newWidthA/2;\n    lastPosition = newWidthB - 2 * (newWidthB/2 - newWidthA/2);\n    lastPositionMonitor = newWidthB - 2 * (newWidthB/2 - newWidthA/2) - (newWidthB/2 - newWidthA/2);\n    incrPosition = newWidthB/2 - newWidthA/2;\n  }\n  else if (newWidthA>newWidthB){\n    index = newWidthA/2 - newWidthB/2;\n    indexMonitor = 2 * (newWidthA/2 - newWidthB/2);\n    lastPosition = newWidthA - (newWidthA/2 - newWidthB/2);\n    lastPositionMonitor = newWidthA - 2 * (newWidthA/2 - newWidthB/2);\n    incrPosition = newWidthA/2 - newWidthB/2;\n  }\n  else if (newWidthA===newWidthB){\n    index = 0;\n    indexMonitor =  newWidthA/8;\n    lastPosition = newWidthA;\n    lastPositionMonitor = newWidthA - newWidthA/8;\n    incrPosition = newWidthA/8;\n  }\n\n  for ( let i = index + incrPosition; i < lastPosition; i+=incrPosition) {\n\n    let geometry8 = new Three.BoxGeometry(newDepth,newDepth/20,1.55*newHeight);\n    let mesh8 = new Three.Mesh(geometry8, woodTexture);\n    mesh8.rotation.x=Math.PI/2;\n    mesh8.rotation.z=Math.PI/2;\n    mesh8.position.x+=i;\n    mesh8.position.y+=newHeight/5;\n    mesh8.position.z+=newDepth/2;\n    desk.add(mesh8);\n\n  }\n\n  desk.add(mesh);\n  desk.add(mesh2);\n  desk.add(mesh3);\n  desk.add(mesh4);\n  desk.add(mesh5);\n  desk.add(mesh6);\n  desk.add(mesh7);\n\n\n  for (let i = indexMonitor + incrPosition/2; i < lastPositionMonitor ; i += incrPosition) {\n    let monitor2 = makeMonitor(newDepth);\n    monitor2.position.x = i;\n    monitor2.position.z += 1.15*newDepth;\n    monitor2.position.y += mesh3.position.y/2.2;\n    desk.add(monitor2);\n  }\n\n  return desk\n}\n\nfunction makeObjectMinLOD(newWidthA,newWidthB,newHeight,newDepth) {\n\n  let desk = new Three.Mesh();\n\n  let rectShape = new Three.Shape();\n  if(newWidthA<newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA / 2 - newWidthB / 2, newDepth);\n    rectShape.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2), newDepth);\n    rectShape.lineTo(newWidthA, 0);\n  }\n  else if(newWidthA>newWidthB) {\n    rectShape.moveTo(0, 0);\n    rectShape.lineTo(newWidthA, 0);\n    rectShape.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n  }\n  else if(newWidthA===newWidthB){\n    rectShape.moveTo( 0,0 );\n    rectShape.lineTo( 0, newDepth );\n    rectShape.lineTo( newWidthA, newDepth );\n    rectShape.lineTo( newWidthA, 0 );\n  }\n\n  let extrudeSettings = {\n    steps: 2,\n    depth: newHeight/40,\n    bevelEnabled: false,\n    bevelThickness: newHeight,\n    bevelSize: newHeight,\n    bevelSegments: 2\n  };\n\n\n\n  let geometry = new Three.ExtrudeGeometry( rectShape, extrudeSettings );\n  let woodTexture = new Three.MeshLambertMaterial({map:wood});\n  let mesh = new Three.Mesh( geometry, woodTexture ) ;\n\n  mesh.rotation.x+=Math.PI/2;\n  mesh.position.y=newHeight/1.8;\n\n  let rectShape2 = new Three.Shape();\n  let hole = new Three.Path();\n  if(newWidthA<newWidthB) {\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape2.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n\n    hole.moveTo(newWidthB/20, newDepth/20);\n    hole.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB/20, newDepth - newDepth/20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB/20, newDepth -newDepth/20);\n    hole.lineTo(newWidthA - newWidthB/20, newDepth/20);\n    rectShape2.holes.push(hole);\n  }\n  else if(newWidthA>newWidthB){\n\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA + (newWidthB/2 - newWidthA/2), newDepth);\n    rectShape2.lineTo(-(newWidthB/2-newWidthA/2), newDepth);\n\n    hole.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    hole.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    hole.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n    rectShape2.holes.push(hole);\n  }\n  else if(newWidthA===newWidthB){\n\n    rectShape2.moveTo(0, 0);\n    rectShape2.lineTo(newWidthA, 0);\n    rectShape2.lineTo(newWidthA, newDepth);\n    rectShape2.lineTo(0, newDepth);\n\n    hole.moveTo(newWidthA/20, newDepth/20);\n    hole.lineTo(newWidthA-newWidthA/20, newDepth/20);\n    hole.lineTo(newWidthA-newWidthA/20, newDepth-newDepth/20);\n    hole.lineTo(newWidthA/20, newDepth-newDepth/20);\n    rectShape2.holes.push(hole);\n  }\n\n  let geometry2 = new Three.ExtrudeGeometry( rectShape2, extrudeSettings );\n  let mesh2 = new Three.Mesh( geometry2, woodTexture ) ;\n  mesh2.position.y+=newHeight;\n  mesh2.position.z+=newDepth/40;\n  mesh2.rotation.x+=Math.PI/2;\n\n  let mesh3 = new Three.Mesh( geometry, woodTexture ) ;\n  mesh3.position.y+=newHeight;\n  mesh3.rotation.x+=Math.PI/1.5;\n\n  if (newWidthA < newWidthB) {\n    mesh3.scale.set(.98,1,1);\n    mesh3.position.x += 3;\n  }\n  if (newWidthA > newWidthB || newWidthA === newWidthB) mesh3.scale.set(1,1,1);\n\n  let glass = new Three.Shape();\n  if(newWidthA<newWidthB) {\n    glass.moveTo(newWidthB/20, newDepth/20);\n    glass.lineTo(newWidthA / 2 - newWidthB / 2 + newWidthB/20, newDepth - newDepth/20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) - newWidthB/20, newDepth -newDepth/20);\n    glass.lineTo(newWidthA - newWidthB/20, newDepth/20);\n  }\n  else if (newWidthA>newWidthB){\n    glass.moveTo(newWidthA / 2 - newWidthB / 2 - newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthA - (newWidthA / 2 - newWidthB / 2) + newWidthA / 20, newDepth / 20);\n    glass.lineTo(newWidthB + newWidthA / 20, newDepth - newDepth / 20);\n    glass.lineTo(newWidthA - newWidthB - newWidthA / 20, newDepth - newDepth / 20);\n  }\n  else if (newWidthA===newWidthB){\n    glass.moveTo(newWidthA/20, newDepth/20);\n    glass.lineTo(newWidthA-newWidthA/20, newDepth/20);\n    glass.lineTo(newWidthA-newWidthA/20, newDepth-newDepth/20);\n    glass.lineTo(newWidthA/20, newDepth-newDepth/20);\n  }\n\n  let geometry4 = new Three.ExtrudeGeometry( glass, extrudeSettings );\n  let glassMaterial = new Three.MeshLambertMaterial({color:0xc6c6c6,transparent: true, opacity:.5});\n  let mesh4 = new Three.Mesh( geometry4, glassMaterial ) ;\n  mesh4.position.y+=newHeight;\n  mesh4.rotation.x+=Math.PI/2;\n\n  let geometry5 = new Three.BoxGeometry(newWidthA,newDepth/20,1.6*newHeight);\n  let mesh5 = new Three.Mesh(geometry5, woodTexture);\n  mesh5.rotation.x+=Math.PI/2;\n  mesh5.position.set(newWidthA/2,newHeight/5,0);\n\n  let c;\n\n  if(newWidthA<newWidthB)\n    c = (newWidthB/2 - newWidthA/2);\n  else if(newWidthA>newWidthB)\n    c = (newWidthA/2 - newWidthB/2);\n\n  let value = (newDepth)/c;\n  let angle = Math.atan(value);\n  let edge;\n\n  edge = Math.sqrt(Math.pow(c,2)+Math.pow(newDepth,2));\n\n  if (newWidthA===newWidthB) edge = newDepth;\n\n  let geometry6 = new Three.BoxGeometry(edge,newDepth/20,1.6*newHeight);\n  let mesh6 = new Three.Mesh(geometry6, woodTexture);\n  mesh6.rotation.x+=Math.PI/2;\n\n  if(newWidthA<newWidthB) {\n    mesh6.position.set(-(newWidthB/2 - newWidthA/2)/2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z-=angle;\n  }\n  else if(newWidthA>newWidthB) {\n    mesh6.position.set((newWidthA- (newWidthA/2+newWidthB/2))/2, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z+=angle;\n  }\n  else if(newWidthA===newWidthB) {\n    mesh6.position.set(0, newHeight / 5, newDepth / 2);\n    mesh6.rotation.z+=Math.PI/2;\n  }\n\n\n  let mesh7 = mesh6.clone();\n  if(newWidthA<newWidthB) {\n    mesh7.position.set(newWidthB- 1.5 * (newWidthB/2 - newWidthA/2) , newHeight / 5, newDepth / 2);\n    mesh7.rotation.z=-Math.PI + angle;\n  }\n  else if(newWidthA>newWidthB) {\n    mesh7.position.set(newWidthA - (newWidthA/2 - newWidthB/2)/2, newHeight / 5, newDepth / 2);\n    mesh7.rotation.z=-Math.PI - angle;\n  }\n  else if(newWidthA===newWidthB) {\n    mesh7.position.set(newWidthB,newHeight/5,newDepth/2);\n  }\n\n  desk.add(mesh);\n  desk.add(mesh2);\n  desk.add(mesh3);\n  desk.add(mesh4);\n  desk.add(mesh5);\n  desk.add(mesh6);\n  desk.add(mesh7);\n\n  return desk\n}\n\nexport default {\n  name: \"desk\",\n  prototype: \"items\",\n\n  info: {\n    tag: ['furnishings', 'wood'],\n    title: \"desk\",\n    description: \"desk\",\n    image: require('./desk.png')\n  },\n\n  properties: {\n    widthA: {\n      label: \"larghezza lato A\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 400,\n        unit: 'cm'\n      }\n    },\n    widthB: {\n      label: \"larghezza lato B\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 400,\n        unit: 'cm'\n      }\n    },\n    depth: {\n      label: \"depth\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 90,\n        unit: 'cm'\n      }\n    },\n    height: {\n      label: \"height\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 100,\n        unit: 'cm'\n      }\n    },\n    altitude: {\n      label: \"altitude\",\n      type: \"length-measure\",\n      defaultValue: {\n        length: 0,\n        unit: 'cm'\n      }\n    }\n  },\n\n  render2D: function (element, layer, scene) {\n\n    let newWidthA = element.properties.get('widthA').get('length');\n    let newWidthB = element.properties.get('widthB').get('length');\n    let newDepth = element.properties.get('depth').get('length');\n    let angle = element.rotation + 90;\n\n    let textRotation = 0;\n    if (Math.sin(angle * Math.PI / 180) < 0) {\n      textRotation = 180;\n    }\n\n    return (\n      <g transform={`translate(${-newWidthA / 2},${-newDepth / 2})`}>\n        <path key=\"1\" d={`M ${newWidthA/2-newWidthB/2} 0 l ${-newWidthA/2+newWidthB/2} ${newDepth} l ${newWidthA} 0 l ${-newWidthA/2+newWidthB/2}${-newDepth} l ${-newWidthB} 0`} stroke=\"red\"\n              transform={`translate(0, ${newDepth}) scale(1,-1)`}\n              style={{stroke: element.selected ? '#0096fd' : '#000', strokeWidth: \"2px\", fill: \"#84e1ce\"}}/>\n        <text key=\"5\" x=\"0\" y=\"0\"\n              transform={`translate(${newWidthA / 2}, ${newDepth / 2}) scale(1,-1) rotate(${textRotation})`}\n              style={{textAnchor: \"middle\", fontSize: \"11px\"}}>\n          {element.type}\n        </text>\n      </g>\n    )\n  },\n\n  render3D: function (element, layer, scene) {\n\n    let newWidthA = element.properties.get('widthA').get('length');\n    let newWidthB = element.properties.get('widthB').get('length');\n    let newDepth = element.properties.get('depth').get('length');\n    let newHeight = element.properties.get('height').get('length');\n    let newAltitude = element.properties.get('altitude').get('length');\n\n    /********** lod max **********/\n\n    let scrivaniaMaxLOD = new Three.Object3D();\n    scrivaniaMaxLOD.add(makeObjectMaxLOD(newWidthA,newWidthB,newHeight,newDepth).clone());\n\n    let aa = new Three.Box3().setFromObject(scrivaniaMaxLOD);\n\n    let deltaX = Math.abs(aa.max.x - aa.min.x);\n    let deltaY = Math.abs(aa.max.y - aa.min.y);\n    let deltaZ = Math.abs(aa.max.z - aa.min.z);\n\n    scrivaniaMaxLOD.position.y += newHeight/2 + newAltitude;\n    scrivaniaMaxLOD.position.z += newDepth/2;\n    if (newWidthA<newWidthB)\n    scrivaniaMaxLOD.position.x += newWidthB/2 - (newWidthB/2 - newWidthA/2);\n    if (newWidthA>newWidthB)\n    scrivaniaMaxLOD.position.x += newWidthA/2;\n    if (newWidthA===newWidthB)\n    scrivaniaMaxLOD.position.x += newWidthB/2;\n\n    scrivaniaMaxLOD.rotation.y += Math.PI;\n    if(newWidthA<newWidthB)\n    scrivaniaMaxLOD.scale.set(newWidthB / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if(newWidthA>newWidthB)\n    scrivaniaMaxLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if(newWidthA===newWidthB)\n    scrivaniaMaxLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n\n    /********** lod min **********/\n\n    let scrivaniaMinLOD = new Three.Object3D();\n    scrivaniaMinLOD.add(makeObjectMinLOD(newWidthA,newWidthB,newHeight,newDepth).clone());\n\n    scrivaniaMinLOD.position.y += newHeight/2 + newAltitude;\n    scrivaniaMinLOD.position.z += newDepth/2;\n    if (newWidthA<newWidthB)\n      scrivaniaMinLOD.position.x += newWidthB/2 - (newWidthB/2 - newWidthA/2);\n    if (newWidthA>newWidthB)\n      scrivaniaMinLOD.position.x += newWidthA/2;\n    if (newWidthA===newWidthB)\n      scrivaniaMinLOD.position.x += newWidthB/2;\n\n    scrivaniaMinLOD.rotation.y += Math.PI;\n    if(newWidthA<newWidthB)\n      scrivaniaMinLOD.scale.set(newWidthB / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if(newWidthA>newWidthB)\n      scrivaniaMinLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n    if(newWidthA===newWidthB)\n      scrivaniaMinLOD.scale.set(newWidthA / deltaX, newDepth / deltaY, newHeight / deltaZ);\n\n\n    /*** add all Level of Detail ***/\n\n    let lod = new Three.LOD();\n\n    lod.addLevel(scrivaniaMaxLOD, 700);\n    lod.addLevel(scrivaniaMinLOD, 1000);\n    lod.updateMatrix();\n    lod.matrixAutoUpdate = false;\n\n    if (element.selected) {\n      let bbox = new Three.BoxHelper(lod, 0x99c3fb);\n      bbox.material.linewidth = 5;\n      bbox.renderOrder = 1000;\n      bbox.material.depthTest = false;\n      lod.add(bbox);\n    }\n\n    return Promise.resolve(lod);\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}