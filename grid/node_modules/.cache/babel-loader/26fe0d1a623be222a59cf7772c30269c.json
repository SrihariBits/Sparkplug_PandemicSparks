{"ast":null,"code":"'use strict';\n\nvar slashRe = new RegExp('/', 'g');\nvar escapedSlashRe = new RegExp('~1', 'g');\nvar tildeRe = /~/g;\nvar escapedTildeRe = /~0/g;\nvar Path = {\n  escape: function (str) {\n    if (typeof str === 'number') {\n      return str.toString();\n    }\n\n    if (typeof str !== 'string') {\n      throw 'param str (' + str + ') is not a string';\n    }\n\n    return str.replace(tildeRe, '~0').replace(slashRe, '~1');\n  },\n  unescape: function (str) {\n    if (typeof str == 'string') {\n      return str.replace(escapedSlashRe, '/').replace(escapedTildeRe, '~');\n    } else {\n      return str;\n    }\n  },\n  concat: function (path, key) {\n    return path + '/' + key;\n  }\n};\nmodule.exports = Path;","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/immutablediff/src/path.js"],"names":["slashRe","RegExp","escapedSlashRe","tildeRe","escapedTildeRe","Path","escape","str","toString","replace","unescape","concat","path","key","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAG,IAAIC,MAAJ,CAAW,GAAX,EAAgB,GAAhB,CAAd;AACA,IAAIC,cAAc,GAAG,IAAID,MAAJ,CAAW,IAAX,EAAiB,GAAjB,CAArB;AACA,IAAIE,OAAO,GAAG,IAAd;AACA,IAAIC,cAAc,GAAG,KAArB;AAEA,IAAIC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE,UAAUC,GAAV,EAAe;AACrB,QAAG,OAAOA,GAAP,KAAgB,QAAnB,EAA4B;AAC1B,aAAOA,GAAG,CAACC,QAAJ,EAAP;AACD;;AACD,QAAG,OAAOD,GAAP,KAAgB,QAAnB,EAA4B;AAC1B,YAAM,gBAAgBA,GAAhB,GAAsB,mBAA5B;AACD;;AAED,WAAOA,GAAG,CAACE,OAAJ,CAAYN,OAAZ,EAAqB,IAArB,EAA2BM,OAA3B,CAAmCT,OAAnC,EAA4C,IAA5C,CAAP;AACD,GAVQ;AAYTU,EAAAA,QAAQ,EAAE,UAAUH,GAAV,EAAe;AACvB,QAAG,OAAOA,GAAP,IAAe,QAAlB,EAA4B;AAC1B,aAAOA,GAAG,CAACE,OAAJ,CAAYP,cAAZ,EAA4B,GAA5B,EAAiCO,OAAjC,CAAyCL,cAAzC,EAAyD,GAAzD,CAAP;AACD,KAFD,MAGK;AACH,aAAOG,GAAP;AACD;AACF,GAnBQ;AAoBTI,EAAAA,MAAM,EAAE,UAASC,IAAT,EAAeC,GAAf,EAAmB;AACzB,WAAOD,IAAI,GAAG,GAAP,GAAaC,GAApB;AACD;AAtBQ,CAAX;AAyBAC,MAAM,CAACC,OAAP,GAAiBV,IAAjB","sourcesContent":["'use strict';\n\nvar slashRe = new RegExp('/', 'g');\nvar escapedSlashRe = new RegExp('~1', 'g');\nvar tildeRe = /~/g;\nvar escapedTildeRe = /~0/g;\n\nvar Path = {\n  escape: function (str) {\n    if(typeof(str) === 'number'){\n      return str.toString();\n    }\n    if(typeof(str) !== 'string'){\n      throw 'param str (' + str + ') is not a string';\n    }\n\n    return str.replace(tildeRe, '~0').replace(slashRe, '~1');\n  },\n\n  unescape: function (str) {\n    if(typeof(str) == 'string') {\n      return str.replace(escapedSlashRe, '/').replace(escapedTildeRe, '~');\n    }\n    else {\n      return str;\n    }\n  },\n  concat: function(path, key){\n    return path + '/' + key;\n  }\n};\n\nmodule.exports = Path;"]},"metadata":{},"sourceType":"script"}