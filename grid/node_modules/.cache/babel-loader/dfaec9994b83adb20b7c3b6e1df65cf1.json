{"ast":null,"code":"/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\nvar THREE = window.THREE || require('three');\n\nlet MTLLoader;\n\nMTLLoader = function (manager) {\n  this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n};\n\nObject.assign(MTLLoader.prototype, THREE.EventDispatcher.prototype, {\n  /**\n   * Loads and parses a MTL asset from a URL.\n   *\n   * @param {String} url - URL to the MTL file.\n   * @param {Function} [onLoad] - Callback invoked with the loaded object.\n   * @param {Function} [onProgress] - Callback for download progress.\n   * @param {Function} [onError] - Callback for download errors.\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to load.\n   */\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var loader = new THREE.FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.load(url, function (text) {\n      onLoad(scope.parse(text));\n    }, onProgress, onError);\n  },\n\n  /**\n   * Set base path for resolving references.\n   * If set this path will be prepended to each loaded and found reference.\n   *\n   * @see setTexturePath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setPath: function (path) {\n    this.path = path;\n  },\n\n  /**\n   * Set base path for resolving texture references.\n   * If set this path will be prepended found texture reference.\n   * If not set and setPath is, it will be used as texture base path.\n   *\n   * @see setPath\n   * @param {String} path\n   *\n   * @example\n   *     mtlLoader.setPath( 'assets/obj/' );\n   *     mtlLoader.setTexturePath( 'assets/textures/' );\n   *     mtlLoader.load( 'my.mtl', ... );\n   */\n  setTexturePath: function (path) {\n    this.texturePath = path;\n  },\n  setBaseUrl: function (path) {\n    console.warn('THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.');\n    this.setTexturePath(path);\n  },\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n  },\n  setMaterialOptions: function (value) {\n    this.materialOptions = value;\n  },\n\n  /**\n   * Parses a MTL file.\n   *\n   * @param {String} text - Content of MTL file\n   * @return {THREE.MTLLoader.MaterialCreator}\n   *\n   * @see setPath setTexturePath\n   *\n   * @note In order for relative texture references to resolve correctly\n   * you must call setPath and/or setTexturePath explicitly prior to parse.\n   */\n  parse: function (text) {\n    var lines = text.split('\\n');\n    var info = {};\n    var delimiter_pattern = /\\s+/;\n    var materialsInfo = {};\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i];\n      line = line.trim();\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        // Blank line or comment ignore\n        continue;\n      }\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase();\n      var value = pos >= 0 ? line.substring(pos + 1) : '';\n      value = value.trim();\n\n      if (key === 'newmtl') {\n        // New material\n        info = {\n          name: value\n        };\n        materialsInfo[value] = info;\n      } else if (info) {\n        if (key === 'ka' || key === 'kd' || key === 'ks') {\n          var ss = value.split(delimiter_pattern, 3);\n          info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n        } else {\n          info[key] = value;\n        }\n      }\n    }\n\n    var materialCreator = new MTLLoader.MaterialCreator(this.texturePath || this.path, this.materialOptions);\n    materialCreator.setCrossOrigin(this.crossOrigin);\n    materialCreator.setManager(this.manager);\n    materialCreator.setMaterials(materialsInfo);\n    return materialCreator;\n  }\n});\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nMTLLoader.MaterialCreator = function (baseUrl, options) {\n  this.baseUrl = baseUrl || '';\n  this.options = options;\n  this.materialsInfo = {};\n  this.materials = {};\n  this.materialsArray = [];\n  this.nameLookup = {};\n  this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n  this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n};\n\nMTLLoader.MaterialCreator.prototype = {\n  constructor: MTLLoader.MaterialCreator,\n  setCrossOrigin: function (value) {\n    this.crossOrigin = value;\n  },\n  setManager: function (value) {\n    this.manager = value;\n  },\n  setMaterials: function (materialsInfo) {\n    this.materialsInfo = this.convert(materialsInfo);\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n  },\n  convert: function (materialsInfo) {\n    if (!this.options) return materialsInfo;\n    var converted = {};\n\n    for (var mn in materialsInfo) {\n      // Convert materials info into normalized form based on options\n      var mat = materialsInfo[mn];\n      var covmat = {};\n      converted[mn] = covmat;\n\n      for (var prop in mat) {\n        var save = true;\n        var value = mat[prop];\n        var lprop = prop.toLowerCase();\n\n        switch (lprop) {\n          case 'kd':\n          case 'ka':\n          case 'ks':\n            // Diffuse color (color under white light) using RGB values\n            if (this.options && this.options.normalizeRGB) {\n              value = [value[0] / 255, value[1] / 255, value[2] / 255];\n            }\n\n            if (this.options && this.options.ignoreZeroRGBs) {\n              if (value[0] === 0 && value[1] === 0 && value[2] === 0) {\n                // ignore\n                save = false;\n              }\n            }\n\n            break;\n\n          default:\n            break;\n        }\n\n        if (save) {\n          covmat[lprop] = value;\n        }\n      }\n    }\n\n    return converted;\n  },\n  preload: function () {\n    for (var mn in this.materialsInfo) {\n      this.create(mn);\n    }\n  },\n  getIndex: function (materialName) {\n    return this.nameLookup[materialName];\n  },\n  getAsArray: function () {\n    var index = 0;\n\n    for (var mn in this.materialsInfo) {\n      this.materialsArray[index] = this.create(mn);\n      this.nameLookup[mn] = index;\n      index++;\n    }\n\n    return this.materialsArray;\n  },\n  create: function (materialName) {\n    if (this.materials[materialName] === undefined) {\n      this.createMaterial_(materialName);\n    }\n\n    return this.materials[materialName];\n  },\n  createMaterial_: function (materialName) {\n    // Create material\n    var mat = this.materialsInfo[materialName];\n    var params = {\n      name: materialName,\n      side: this.side\n    };\n\n    var resolveURL = function (baseUrl, url) {\n      if (typeof url !== 'string' || url === '') return ''; // Absolute URL\n\n      if (/^https?:\\/\\//i.test(url)) {\n        return url;\n      }\n\n      return baseUrl + url;\n    };\n\n    for (var prop in mat) {\n      var value = mat[prop];\n      if (value === '') continue;\n\n      switch (prop.toLowerCase()) {\n        // Ns is material specular exponent\n        case 'kd':\n          // Diffuse color (color under white light) using RGB values\n          params.color = new THREE.Color().fromArray(value);\n          break;\n\n        case 'ks':\n          // Specular color (color when light is reflected from shiny surface) using RGB values\n          params.specular = new THREE.Color().fromArray(value);\n          break;\n\n        case 'map_kd':\n          // Diffuse texture map\n          if (params.map) break; // Keep the first encountered texture\n\n          var texParams = this.getTextureParams(value, params);\n          params.map = this.loadTexture(resolveURL(this.baseUrl, texParams.url));\n          params.map.repeat.copy(texParams.scale);\n          params.map.offset.copy(texParams.offset);\n          params.map.wrapS = this.wrap;\n          params.map.wrapT = this.wrap;\n          break;\n\n        case 'map_ks':\n          // Specular map\n          if (params.specularMap) break; // Keep the first encountered texture\n\n          params.specularMap = this.loadTexture(resolveURL(this.baseUrl, value));\n          params.specularMap.wrapS = this.wrap;\n          params.specularMap.wrapT = this.wrap;\n          break;\n\n        case 'ns':\n          // The specular exponent (defines the focus of the specular highlight)\n          // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n          params.shininess = parseFloat(value);\n          break;\n\n        case 'd':\n          if (value < 1) {\n            params.opacity = value;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'Tr':\n          if (value > 0) {\n            params.opacity = 1 - value;\n            params.transparent = true;\n          }\n\n          break;\n\n        case 'map_bump':\n        case 'bump':\n          // Bump texture map\n          if (params.bumpMap) break; // Keep the first encountered texture\n\n          var texParams = this.getTextureParams(value, params);\n          params.bumpMap = this.loadTexture(resolveURL(this.baseUrl, texParams.url));\n          params.bumpMap.repeat.copy(texParams.scale);\n          params.bumpMap.offset.copy(texParams.offset);\n          params.bumpMap.wrapS = this.wrap;\n          params.bumpMap.wrapT = this.wrap;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n    return this.materials[materialName];\n  },\n  getTextureParams: function (value, matParams) {\n    var texParams = {\n      scale: new THREE.Vector2(1, 1),\n      offset: new THREE.Vector2(0, 0)\n    };\n    var items = value.split(/\\s+/);\n    var pos;\n    pos = items.indexOf('-bm');\n\n    if (pos >= 0) {\n      matParams.bumpScale = parseFloat(items[pos + 1]);\n      items.splice(pos, 2);\n    }\n\n    pos = items.indexOf('-s');\n\n    if (pos >= 0) {\n      texParams.scale.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    pos = items.indexOf('-o');\n\n    if (pos >= 0) {\n      texParams.offset.set(parseFloat(items[pos + 1]), parseFloat(items[pos + 2]));\n      items.splice(pos, 4); // we expect 3 parameters here!\n    }\n\n    texParams.url = items.join(' ').trim();\n    return texParams;\n  },\n  loadTexture: function (url, mapping, onLoad, onProgress, onError) {\n    var texture;\n    var loader = THREE.Loader.Handlers.get(url);\n    var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n    if (loader === null) {\n      loader = new THREE.TextureLoader(manager);\n    }\n\n    if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n    texture = loader.load(url, onLoad, onProgress, onError);\n    if (mapping !== undefined) texture.mapping = mapping;\n    return texture;\n  }\n};\nmodule.exports = MTLLoader;","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/utils/mtl-loader.js"],"names":["THREE","window","require","MTLLoader","manager","undefined","DefaultLoadingManager","Object","assign","prototype","EventDispatcher","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","text","parse","setTexturePath","texturePath","setBaseUrl","console","warn","setCrossOrigin","value","crossOrigin","setMaterialOptions","materialOptions","lines","split","info","delimiter_pattern","materialsInfo","i","length","line","trim","charAt","pos","indexOf","key","substring","toLowerCase","name","ss","parseFloat","materialCreator","MaterialCreator","setManager","setMaterials","baseUrl","options","materials","materialsArray","nameLookup","side","FrontSide","wrap","RepeatWrapping","constructor","convert","converted","mn","mat","covmat","prop","save","lprop","normalizeRGB","ignoreZeroRGBs","preload","create","getIndex","materialName","getAsArray","index","createMaterial_","params","resolveURL","test","color","Color","fromArray","specular","map","texParams","getTextureParams","loadTexture","repeat","copy","scale","offset","wrapS","wrapT","specularMap","shininess","opacity","transparent","bumpMap","MeshPhongMaterial","matParams","Vector2","items","bumpScale","splice","set","join","mapping","texture","Loader","Handlers","get","TextureLoader","module","exports"],"mappings":"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","sourcesContent":["/**\n * Loads a Wavefront .mtl file specifying materials\n *\n * @author angelxuanchang\n */\n\nvar THREE = window.THREE || require('three');\nlet MTLLoader;\n\nMTLLoader = function( manager ) {\n\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nObject.assign( MTLLoader.prototype, THREE.EventDispatcher.prototype, {\n\n\t/**\n\t * Loads and parses a MTL asset from a URL.\n\t *\n\t * @param {String} url - URL to the MTL file.\n\t * @param {Function} [onLoad] - Callback invoked with the loaded object.\n\t * @param {Function} [onProgress] - Callback for download progress.\n\t * @param {Function} [onError] - Callback for download errors.\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to load.\n\t */\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tonLoad( scope.parse( text ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * Set base path for resolving references.\n\t * If set this path will be prepended to each loaded and found reference.\n\t *\n\t * @see setTexturePath\n\t * @param {String} path\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetPath: function ( path ) {\n\n\t\tthis.path = path;\n\n\t},\n\n\t/**\n\t * Set base path for resolving texture references.\n\t * If set this path will be prepended found texture reference.\n\t * If not set and setPath is, it will be used as texture base path.\n\t *\n\t * @see setPath\n\t * @param {String} path\n\t *\n\t * @example\n\t *     mtlLoader.setPath( 'assets/obj/' );\n\t *     mtlLoader.setTexturePath( 'assets/textures/' );\n\t *     mtlLoader.load( 'my.mtl', ... );\n\t */\n\tsetTexturePath: function( path ) {\n\n\t\tthis.texturePath = path;\n\n\t},\n\n\tsetBaseUrl: function( path ) {\n\n\t\tconsole.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );\n\n\t\tthis.setTexturePath( path );\n\n\t},\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetMaterialOptions: function ( value ) {\n\n\t\tthis.materialOptions = value;\n\n\t},\n\n\t/**\n\t * Parses a MTL file.\n\t *\n\t * @param {String} text - Content of MTL file\n\t * @return {THREE.MTLLoader.MaterialCreator}\n\t *\n\t * @see setPath setTexturePath\n\t *\n\t * @note In order for relative texture references to resolve correctly\n\t * you must call setPath and/or setTexturePath explicitly prior to parse.\n\t */\n\tparse: function ( text ) {\n\n\t\tvar lines = text.split( '\\n' );\n\t\tvar info = {};\n\t\tvar delimiter_pattern = /\\s+/;\n\t\tvar materialsInfo = {};\n\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\n\n\t\t\tvar line = lines[ i ];\n\t\t\tline = line.trim();\n\n\t\t\tif ( line.length === 0 || line.charAt( 0 ) === '#' ) {\n\n\t\t\t\t// Blank line or comment ignore\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar pos = line.indexOf( ' ' );\n\n\t\t\tvar key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;\n\t\t\tkey = key.toLowerCase();\n\n\t\t\tvar value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';\n\t\t\tvalue = value.trim();\n\n\t\t\tif ( key === 'newmtl' ) {\n\n\t\t\t\t// New material\n\n\t\t\t\tinfo = { name: value };\n\t\t\t\tmaterialsInfo[ value ] = info;\n\n\t\t\t} else if ( info ) {\n\n\t\t\t\tif ( key === 'ka' || key === 'kd' || key === 'ks' ) {\n\n\t\t\t\t\tvar ss = value.split( delimiter_pattern, 3 );\n\t\t\t\t\tinfo[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinfo[ key ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar materialCreator = new MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );\n\t\tmaterialCreator.setCrossOrigin( this.crossOrigin );\n\t\tmaterialCreator.setManager( this.manager );\n\t\tmaterialCreator.setMaterials( materialsInfo );\n\t\treturn materialCreator;\n\n\t}\n\n} );\n\n/**\n * Create a new THREE-MTLLoader.MaterialCreator\n * @param baseUrl - Url relative to which textures are loaded\n * @param options - Set of options on how to construct the materials\n *                  side: Which side to apply the material\n *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n *                  wrap: What type of wrapping to apply for textures\n *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n *                                Default: false, assumed to be already normalized\n *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n *                                  Default: false\n * @constructor\n */\n\nMTLLoader.MaterialCreator = function( baseUrl, options ) {\n\n\tthis.baseUrl = baseUrl || '';\n\tthis.options = options;\n\tthis.materialsInfo = {};\n\tthis.materials = {};\n\tthis.materialsArray = [];\n\tthis.nameLookup = {};\n\n\tthis.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;\n\tthis.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;\n\n};\n\nMTLLoader.MaterialCreator.prototype = {\n\n\tconstructor: MTLLoader.MaterialCreator,\n\n\tsetCrossOrigin: function ( value ) {\n\n\t\tthis.crossOrigin = value;\n\n\t},\n\n\tsetManager: function ( value ) {\n\n\t\tthis.manager = value;\n\n\t},\n\n\tsetMaterials: function( materialsInfo ) {\n\n\t\tthis.materialsInfo = this.convert( materialsInfo );\n\t\tthis.materials = {};\n\t\tthis.materialsArray = [];\n\t\tthis.nameLookup = {};\n\n\t},\n\n\tconvert: function( materialsInfo ) {\n\n\t\tif ( ! this.options ) return materialsInfo;\n\n\t\tvar converted = {};\n\n\t\tfor ( var mn in materialsInfo ) {\n\n\t\t\t// Convert materials info into normalized form based on options\n\n\t\t\tvar mat = materialsInfo[ mn ];\n\n\t\t\tvar covmat = {};\n\n\t\t\tconverted[ mn ] = covmat;\n\n\t\t\tfor ( var prop in mat ) {\n\n\t\t\t\tvar save = true;\n\t\t\t\tvar value = mat[ prop ];\n\t\t\t\tvar lprop = prop.toLowerCase();\n\n\t\t\t\tswitch ( lprop ) {\n\n\t\t\t\t\tcase 'kd':\n\t\t\t\t\tcase 'ka':\n\t\t\t\t\tcase 'ks':\n\n\t\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\t\tif ( this.options && this.options.normalizeRGB ) {\n\n\t\t\t\t\t\t\tvalue = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.options && this.options.ignoreZeroRGBs ) {\n\n\t\t\t\t\t\t\tif ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {\n\n\t\t\t\t\t\t\t\t// ignore\n\n\t\t\t\t\t\t\t\tsave = false;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( save ) {\n\n\t\t\t\t\tcovmat[ lprop ] = value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn converted;\n\n\t},\n\n\tpreload: function () {\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.create( mn );\n\n\t\t}\n\n\t},\n\n\tgetIndex: function( materialName ) {\n\n\t\treturn this.nameLookup[ materialName ];\n\n\t},\n\n\tgetAsArray: function() {\n\n\t\tvar index = 0;\n\n\t\tfor ( var mn in this.materialsInfo ) {\n\n\t\t\tthis.materialsArray[ index ] = this.create( mn );\n\t\t\tthis.nameLookup[ mn ] = index;\n\t\t\tindex ++;\n\n\t\t}\n\n\t\treturn this.materialsArray;\n\n\t},\n\n\tcreate: function ( materialName ) {\n\n\t\tif ( this.materials[ materialName ] === undefined ) {\n\n\t\t\tthis.createMaterial_( materialName );\n\n\t\t}\n\n\t\treturn this.materials[ materialName ];\n\n\t},\n\n\tcreateMaterial_: function ( materialName ) {\n\n\t\t// Create material\n\n\t\tvar mat = this.materialsInfo[ materialName ];\n\t\tvar params = {\n\n\t\t\tname: materialName,\n\t\t\tside: this.side\n\n\t\t};\n\n\t\tvar resolveURL = function ( baseUrl, url ) {\n\n\t\t\tif ( typeof url !== 'string' || url === '' )\n\t\t\t\treturn '';\n\n\t\t\t// Absolute URL\n\t\t\tif ( /^https?:\\/\\//i.test( url ) ) {\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\treturn baseUrl + url;\n\t\t};\n\n\t\tfor ( var prop in mat ) {\n\n\t\t\tvar value = mat[ prop ];\n\n\t\t\tif ( value === '' ) continue;\n\n\t\t\tswitch ( prop.toLowerCase() ) {\n\n\t\t\t\t// Ns is material specular exponent\n\n\t\t\t\tcase 'kd':\n\n\t\t\t\t\t// Diffuse color (color under white light) using RGB values\n\n\t\t\t\t\tparams.color = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ks':\n\n\t\t\t\t\t// Specular color (color when light is reflected from shiny surface) using RGB values\n\t\t\t\t\tparams.specular = new THREE.Color().fromArray( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_kd':\n\n\t\t\t\t\t// Diffuse texture map\n\n\t\t\t\t\tif ( params.map ) break; // Keep the first encountered texture\n\n\t\t\t\t\tvar texParams = this.getTextureParams( value, params );\n\n\t\t\t\t\tparams.map = this.loadTexture( resolveURL( this.baseUrl, texParams.url ) );\n\t\t\t\t\tparams.map.repeat.copy( texParams.scale );\n\t\t\t\t\tparams.map.offset.copy( texParams.offset );\n\n\t\t\t\t\tparams.map.wrapS = this.wrap;\n\t\t\t\t\tparams.map.wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_ks':\n\n\t\t\t\t\t// Specular map\n\n\t\t\t\t\tif ( params.specularMap ) break; // Keep the first encountered texture\n\n\t\t\t\t\tparams.specularMap = this.loadTexture( resolveURL( this.baseUrl, value ) );\n\t\t\t\t\tparams.specularMap.wrapS = this.wrap;\n\t\t\t\t\tparams.specularMap.wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ns':\n\n\t\t\t\t\t// The specular exponent (defines the focus of the specular highlight)\n\t\t\t\t\t// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n\n\t\t\t\t\tparams.shininess = parseFloat( value );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'd':\n\n\t\t\t\t\tif ( value < 1 ) {\n\n\t\t\t\t\t\tparams.opacity = value;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Tr':\n\n\t\t\t\t\tif ( value > 0 ) {\n\n\t\t\t\t\t\tparams.opacity = 1 - value;\n\t\t\t\t\t\tparams.transparent = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map_bump':\n\t\t\t\tcase 'bump':\n\n\t\t\t\t\t// Bump texture map\n\n\t\t\t\t\tif ( params.bumpMap ) break; // Keep the first encountered texture\n\n\t\t\t\t\tvar texParams = this.getTextureParams( value, params );\n\n\t\t\t\t\tparams.bumpMap = this.loadTexture( resolveURL( this.baseUrl, texParams.url ) );\n\t\t\t\t\tparams.bumpMap.repeat.copy( texParams.scale );\n\t\t\t\t\tparams.bumpMap.offset.copy( texParams.offset );\n\n\t\t\t\t\tparams.bumpMap.wrapS = this.wrap;\n\t\t\t\t\tparams.bumpMap.wrapT = this.wrap;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.materials[ materialName ] = new THREE.MeshPhongMaterial( params );\n\t\treturn this.materials[ materialName ];\n\t},\n\n\tgetTextureParams: function( value, matParams ) {\n\n\t\tvar texParams = {\n\n\t\t\tscale: new THREE.Vector2( 1, 1 ),\n\t\t\toffset: new THREE.Vector2( 0, 0 ),\n\n\t\t };\n\n\t\tvar items = value.split(/\\s+/);\n\t\tvar pos;\n\n\t\tpos = items.indexOf('-bm');\n\t\tif (pos >= 0) {\n\n\t\t\tmatParams.bumpScale = parseFloat( items[pos+1] );\n\t\t\titems.splice( pos, 2 );\n\n\t\t}\n\n\t\tpos = items.indexOf('-s');\n\t\tif (pos >= 0) {\n\n\t\t\ttexParams.scale.set( parseFloat( items[pos+1] ), parseFloat( items[pos+2] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\tpos = items.indexOf('-o');\n\t\tif (pos >= 0) {\n\n\t\t\ttexParams.offset.set( parseFloat( items[pos+1] ), parseFloat( items[pos+2] ) );\n\t\t\titems.splice( pos, 4 ); // we expect 3 parameters here!\n\n\t\t}\n\n\t\ttexParams.url = items.join(' ').trim();\n\t\treturn texParams;\n\n\t},\n\n\tloadTexture: function ( url, mapping, onLoad, onProgress, onError ) {\n\n\t\tvar texture;\n\t\tvar loader = THREE.Loader.Handlers.get( url );\n\t\tvar manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;\n\n\t\tif ( loader === null ) {\n\n\t\t\tloader = new THREE.TextureLoader( manager );\n\n\t\t}\n\n\t\tif ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );\n\t\ttexture = loader.load( url, onLoad, onProgress, onError );\n\n\t\tif ( mapping !== undefined ) texture.mapping = mapping;\n\n\t\treturn texture;\n\n\t}\n\n};\n\nmodule.exports = MTLLoader;\n"]},"metadata":{},"sourceType":"module"}