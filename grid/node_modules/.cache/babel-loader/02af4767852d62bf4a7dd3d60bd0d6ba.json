{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport GridHorizontalStreak from './grid-horizontal-streak';\nimport GridVerticalStreak from './grid-vertical-streak';\nexport default function Grids(_ref) {\n  var scene = _ref.scene;\n  var width = scene.width,\n      height = scene.height,\n      grids = scene.grids;\n  var renderedGrids = grids.entrySeq().map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        gridID = _ref3[0],\n        grid = _ref3[1];\n\n    switch (grid.type) {\n      case 'horizontal-streak':\n        return React.createElement(GridHorizontalStreak, {\n          key: gridID,\n          width: width,\n          height: height,\n          grid: grid\n        });\n\n      case 'vertical-streak':\n        return React.createElement(GridVerticalStreak, {\n          key: gridID,\n          width: width,\n          height: height,\n          grid: grid\n        });\n\n      default:\n        console.warn('grid ' + grid.type + ' not allowed');\n    }\n  }).toList();\n  return React.createElement('g', null, renderedGrids);\n}\nGrids.propTypes = {\n  scene: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/components/viewer2d/grids/grids.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","React","PropTypes","GridHorizontalStreak","GridVerticalStreak","Grids","_ref","scene","width","height","grids","renderedGrids","entrySeq","map","_ref2","_ref3","gridID","grid","type","createElement","key","console","warn","toList","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport GridHorizontalStreak from './grid-horizontal-streak';\nimport GridVerticalStreak from './grid-vertical-streak';\n\nexport default function Grids(_ref) {\n  var scene = _ref.scene;\n  var width = scene.width,\n      height = scene.height,\n      grids = scene.grids;\n\n\n  var renderedGrids = grids.entrySeq().map(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        gridID = _ref3[0],\n        grid = _ref3[1];\n\n    switch (grid.type) {\n      case 'horizontal-streak':\n        return React.createElement(GridHorizontalStreak, { key: gridID, width: width, height: height, grid: grid });\n\n      case 'vertical-streak':\n        return React.createElement(GridVerticalStreak, { key: gridID, width: width, height: height, grid: grid });\n\n      default:\n        console.warn('grid ' + grid.type + ' not allowed');\n    }\n  }).toList();\n\n  return React.createElement(\n    'g',\n    null,\n    renderedGrids\n  );\n}\n\nGrids.propTypes = {\n  scene: PropTypes.object.isRequired\n};"]},"metadata":{},"sourceType":"module"}