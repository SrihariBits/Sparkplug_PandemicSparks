{"ast":null,"code":"var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport { Project, Line, Hole, Item, Area, Layer, Vertex } from './export';\nimport { Map, List } from 'immutable';\nimport { Group as GroupModel } from '../models';\nimport { IDBroker, MathUtils, GeometryUtils } from '../utils/export';\n\nvar Group = function () {\n  function Group() {\n    _classCallCheck(this, Group);\n  }\n\n  _createClass(Group, null, [{\n    key: 'select',\n    value: function select(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      state = Project.setAlterate(state).updatedState;\n      layerList.entrySeq().forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            groupLayerID = _ref2[0],\n            groupLayerElements = _ref2[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n        if (lines) lines.forEach(function (lineID) {\n          state = Line.select(state, groupLayerID, lineID).updatedState;\n        });\n        if (holes) holes.forEach(function (holeID) {\n          state = Hole.select(state, groupLayerID, holeID).updatedState;\n        });\n        if (items) items.forEach(function (itemID) {\n          state = Item.select(state, groupLayerID, itemID).updatedState;\n        });\n        if (areas) areas.forEach(function (areaID) {\n          state = Area.select(state, groupLayerID, areaID).updatedState;\n        });\n      });\n      state = Project.setAlterate(state).updatedState;\n      var groups = state.getIn(['scene', 'groups']).map(function (g) {\n        return g.set('selected', false);\n      });\n      state = state.setIn(['scene', 'groups'], groups).setIn(['scene', 'groups', groupID, 'selected'], true);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'unselect',\n    value: function unselect(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      var reduced = layerList.reduce(function (newState, layer, layerID) {\n        return Layer.unselectAll(newState, layerID).updatedState;\n      }, state);\n      state = reduced.setIn(['scene', 'groups', groupID, 'selected'], false);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'create',\n    value: function create(state) {\n      var groupID = IDBroker.acquireID();\n      state = state.setIn(['scene', 'groups', groupID], new GroupModel({\n        id: groupID,\n        name: groupID\n      }));\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'createFromSelectedElements',\n    value: function createFromSelectedElements(state) {\n      var _this = this;\n\n      var groupID = IDBroker.acquireID();\n      state = state.setIn(['scene', 'groups', groupID], new GroupModel({\n        id: groupID,\n        name: groupID\n      }));\n      state.getIn(['scene', 'layers']).forEach(function (layer) {\n        var layerID = layer.get('id');\n        var layerElements = {\n          'lines': layer.get('lines').filter(function (el) {\n            return el.get('selected');\n          }),\n          'items': layer.get('items').filter(function (el) {\n            return el.get('selected');\n          }),\n          'holes': layer.get('holes').filter(function (el) {\n            return el.get('selected');\n          }),\n          'areas': layer.get('areas').filter(function (el) {\n            return el.get('selected');\n          })\n        };\n\n        var _loop = function _loop(elementPrototype) {\n          layerElements[elementPrototype].forEach(function (el) {\n            return state = _this.addElement(state, groupID, layerID, elementPrototype, el.get('id')).updatedState;\n          });\n        };\n\n        for (var elementPrototype in layerElements) {\n          _loop(elementPrototype);\n        }\n      });\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'addElement',\n    value: function addElement(state, groupID, layerID, elementPrototype, elementID) {\n      var actualList = state.getIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype]) || new List();\n\n      if (!actualList.contains(elementID)) {\n        state = state.setIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype], actualList.push(elementID));\n        state = this.reloadBaricenter(state, groupID).updatedState;\n      }\n\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setBarycenter',\n    value: function setBarycenter(state, groupID, x, y) {\n      if (typeof x !== 'undefined') state = state.setIn(['scene', 'groups', groupID, 'x'], x);\n      if (typeof y !== 'undefined') state = state.setIn(['scene', 'groups', groupID, 'y'], y);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'reloadBaricenter',\n    value: function reloadBaricenter(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      var _state$get$toJS = state.get('viewer2D').toJS(),\n          a = _state$get$toJS.a,\n          b = _state$get$toJS.b,\n          c = _state$get$toJS.c,\n          d = _state$get$toJS.d,\n          e = _state$get$toJS.e,\n          f = _state$get$toJS.f,\n          SVGHeight = _state$get$toJS.SVGHeight;\n\n      var m1 = [[a, b, c], [d, e, f], [0, 0, 1]];\n      var xBar = 0;\n      var yBar = 0;\n      var elementCount = 0;\n      layerList.entrySeq().forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            groupLayerID = _ref4[0],\n            groupLayerElements = _ref4[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n        if (lines) lines.forEach(function (lineID) {\n          var vertices = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          });\n\n          var _vertices$get = vertices.get(0),\n              x1 = _vertices$get.x,\n              y1 = _vertices$get.y;\n\n          var _vertices$get2 = vertices.get(1),\n              x2 = _vertices$get2.x,\n              y2 = _vertices$get2.y;\n\n          var _GeometryUtils$midPoi = GeometryUtils.midPoint(x1, y1, x2, y2),\n              xM = _GeometryUtils$midPoi.x,\n              yM = _GeometryUtils$midPoi.y;\n\n          xBar += xM;\n          yBar += yM;\n          elementCount++;\n        });\n        if (holes) holes.forEach(function (holeID) {\n          var hole = state.getIn(['scene', 'layers', groupLayerID, 'holes', holeID]);\n          var lineVertices = state.getIn(['scene', 'layers', groupLayerID, 'lines', hole.line, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          });\n\n          var _lineVertices$get = lineVertices.get(0),\n              x1 = _lineVertices$get.x,\n              y1 = _lineVertices$get.y;\n\n          var _lineVertices$get2 = lineVertices.get(1),\n              x2 = _lineVertices$get2.x,\n              y2 = _lineVertices$get2.y;\n\n          var _GeometryUtils$extend = GeometryUtils.extendLine(x1, y1, x2, y2, hole.offset * GeometryUtils.pointsDistance(x1, y1, x2, y2)),\n              x = _GeometryUtils$extend.x,\n              y = _GeometryUtils$extend.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n        if (items) items.forEach(function (itemID) {\n          var _state$getIn = state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]),\n              x = _state$getIn.x,\n              y = _state$getIn.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n        if (areas) areas.forEach(function (areaID) {\n          var areaVertices = state.getIn(['scene', 'layers', groupLayerID, 'areas', areaID, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          }).toJS();\n\n          var _GeometryUtils$vertic = GeometryUtils.verticesMidPoint(areaVertices),\n              x = _GeometryUtils$vertic.x,\n              y = _GeometryUtils$vertic.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n      });\n\n      if (elementCount) {\n        state = this.setBarycenter(state, groupID, xBar / elementCount, yBar / elementCount).updatedState;\n      }\n\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'removeElement',\n    value: function removeElement(state, groupID, layerID, elementPrototype, elementID) {\n      var actualList = state.getIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype]);\n\n      if (!actualList || !actualList.contains(elementID)) {\n        return {\n          updatedState: state\n        };\n      }\n\n      state = state.setIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype], actualList.filterNot(function (el) {\n        return el === elementID;\n      }));\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setAttributes',\n    value: function setAttributes(state, groupID, attributes) {\n      state = state.mergeIn(['scene', 'groups', groupID], attributes);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'setProperties',\n    value: function setProperties(state, groupID, properties) {\n      state = state.mergeIn(['scene', 'groups', groupID, 'properties'], properties);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'remove',\n    value: function remove(state, groupID) {\n      state = state.removeIn(['scene', 'groups', groupID]);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'removeAndDeleteElements',\n    value: function removeAndDeleteElements(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      layerList.entrySeq().forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            groupLayerID = _ref6[0],\n            groupLayerElements = _ref6[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n\n        if (lines) {\n          lines.forEach(function (lineID) {\n            state = Line.remove(state, groupLayerID, lineID).updatedState;\n            state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n          });\n        }\n\n        if (holes) holes.forEach(function (holeID) {\n          state = Hole.remove(state, groupLayerID, holeID).updatedState;\n        });\n        if (items) items.forEach(function (itemID) {\n          state = Item.remove(state, groupLayerID, itemID).updatedState;\n        }); //( actually ) no effect by area's destruction\n\n        if (false && areas) areas.forEach(function (areaID) {\n          state = Area.remove(state, groupLayerID, areaID).updatedState;\n        });\n      });\n      state = state.deleteIn(['scene', 'groups', groupID]);\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'translate',\n    value: function translate(state, groupID, x, y) {\n      var deltaX = x - state.getIn(['scene', 'groups', groupID, 'x']);\n      var deltaY = y - state.getIn(['scene', 'groups', groupID, 'y']);\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      layerList.entrySeq().forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            groupLayerID = _ref8[0],\n            groupLayerElements = _ref8[1];\n\n        var lines = groupLayerElements.get('lines'); //let holes = groupLayerElements.get('holes');\n\n        var items = groupLayerElements.get('items'); //let areas = groupLayerElements.get('areas');\n        //move vertices instead lines avoiding multiple vertex translation\n\n        if (lines) {\n          var vertices = {};\n          lines.forEach(function (lineID) {\n            var line = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID]);\n            if (!vertices[line.vertices.get(0)]) vertices[line.vertices.get(0)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(0)]);\n            if (!vertices[line.vertices.get(1)]) vertices[line.vertices.get(1)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(1)]);\n          });\n\n          for (var vertexID in vertices) {\n            var _vertices$vertexID = vertices[vertexID],\n                xV = _vertices$vertexID.x,\n                yV = _vertices$vertexID.y;\n            state = Vertex.setAttributes(state, groupLayerID, vertexID, new Map({\n              x: xV + deltaX,\n              y: yV + deltaY\n            })).updatedState;\n          } //need to be separated from setAttributes cycle\n\n\n          for (var _vertexID in vertices) {\n            state = Vertex.beginDraggingVertex(state, groupLayerID, _vertexID).updatedState;\n            state = Vertex.endDraggingVertex(state).updatedState;\n          }\n        }\n\n        if (items) state = items.map(function (itemID) {\n          return state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]);\n        }).reduce(function (newState, item) {\n          var xI = item.x,\n              yI = item.y;\n          return Item.setAttributes(newState, groupLayerID, item.id, new Map({\n            x: xI + deltaX,\n            y: yI + deltaY\n          })).updatedState;\n        }, state); //translation of holes and areas should not take any effect\n        //if( holes ) holes.forEach( holeID => { state = Hole.select( state, groupLayerID, holeID ).updatedState; });\n        //if( areas ) areas.forEach( areaID => { state = Area.select( state, groupLayerID, areaID ).updatedState; });\n\n        state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n      });\n      state = this.setBarycenter(state, groupID, x, y).updatedState;\n      state = Group.select(state, groupID).updatedState;\n      return {\n        updatedState: state\n      };\n    }\n  }, {\n    key: 'rotate',\n    value: function rotate(state, groupID, newAlpha) {\n      var _state$getIn2 = state.getIn(['scene', 'groups', groupID]),\n          barX = _state$getIn2.x,\n          barY = _state$getIn2.y,\n          rotation = _state$getIn2.rotation;\n\n      var alpha = newAlpha - rotation;\n      state = Group.setAttributes(state, groupID, new Map({\n        rotation: newAlpha\n      })).updatedState;\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      layerList.entrySeq().forEach(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            groupLayerID = _ref10[0],\n            groupLayerElements = _ref10[1];\n\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas'); //move vertices instead lines avoiding multiple vertex translation\n\n        if (lines) {\n          var vertices = {};\n          lines.forEach(function (lineID) {\n            var line = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID]);\n            if (!vertices[line.vertices.get(0)]) vertices[line.vertices.get(0)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(0)]);\n            if (!vertices[line.vertices.get(1)]) vertices[line.vertices.get(1)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(1)]);\n          });\n\n          for (var vertexID in vertices) {\n            var _vertices$vertexID2 = vertices[vertexID],\n                xV = _vertices$vertexID2.x,\n                yV = _vertices$vertexID2.y;\n\n            var _GeometryUtils$rotate = GeometryUtils.rotatePointAroundPoint(xV, yV, barX, barY, alpha),\n                newX = _GeometryUtils$rotate.x,\n                newY = _GeometryUtils$rotate.y;\n\n            state = Vertex.setAttributes(state, groupLayerID, vertexID, new Map({\n              x: newX,\n              y: newY\n            })).updatedState;\n          } //need to be separated from setAttributes cycle\n\n\n          for (var _vertexID2 in vertices) {\n            state = Vertex.beginDraggingVertex(state, groupLayerID, _vertexID2).updatedState;\n            state = Vertex.endDraggingVertex(state).updatedState;\n          }\n        }\n\n        if (items) state = items.map(function (itemID) {\n          return state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]);\n        }).reduce(function (newState, item) {\n          var xI = item.x,\n              yI = item.y,\n              rI = item.rotation;\n\n          var _GeometryUtils$rotate2 = GeometryUtils.rotatePointAroundPoint(xI, yI, barX, barY, alpha),\n              newX = _GeometryUtils$rotate2.x,\n              newY = _GeometryUtils$rotate2.y;\n\n          return Item.setAttributes(newState, groupLayerID, item.id, new Map({\n            x: newX,\n            y: newY,\n            rotation: rI + alpha\n          })).updatedState;\n        }, state); //rotation of holes and areas should not take any effect\n        //if( holes ) holes.forEach( holeID => { state = Hole.select( state, groupLayerID, holeID ).updatedState; });\n        //if( areas ) areas.forEach( areaID => { state = Area.select( state, groupLayerID, areaID ).updatedState; });\n\n        state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n      });\n      state = Group.select(state, groupID).updatedState;\n      return {\n        updatedState: state\n      };\n    }\n  }]);\n\n  return Group;\n}();\n\nexport { Group as default };","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/react-planner/es/class/group.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","Project","Line","Hole","Item","Area","Layer","Vertex","Map","List","Group","GroupModel","IDBroker","MathUtils","GeometryUtils","select","state","groupID","layerList","getIn","setAlterate","updatedState","entrySeq","forEach","_ref","_ref2","groupLayerID","groupLayerElements","unselectAll","lines","get","holes","items","areas","lineID","holeID","itemID","areaID","groups","map","g","set","setIn","unselect","reduced","reduce","newState","layer","layerID","create","acquireID","id","name","createFromSelectedElements","_this","layerElements","filter","el","_loop","elementPrototype","addElement","elementID","actualList","contains","reloadBaricenter","setBarycenter","x","y","_state$get$toJS","toJS","a","b","c","d","e","f","SVGHeight","m1","xBar","yBar","elementCount","_ref3","_ref4","vertices","vID","_vertices$get","x1","y1","_vertices$get2","x2","y2","_GeometryUtils$midPoi","midPoint","xM","yM","hole","lineVertices","line","_lineVertices$get","_lineVertices$get2","_GeometryUtils$extend","extendLine","offset","pointsDistance","_state$getIn","areaVertices","_GeometryUtils$vertic","verticesMidPoint","removeElement","filterNot","setAttributes","attributes","mergeIn","setProperties","properties","remove","removeIn","removeAndDeleteElements","_ref5","_ref6","detectAndUpdateAreas","deleteIn","translate","deltaX","deltaY","_ref7","_ref8","vertexID","_vertices$vertexID","xV","yV","_vertexID","beginDraggingVertex","endDraggingVertex","item","xI","yI","rotate","newAlpha","_state$getIn2","barX","barY","rotation","alpha","_ref9","_ref10","_vertices$vertexID2","_GeometryUtils$rotate","rotatePointAroundPoint","newX","newY","_vertexID2","rI","_GeometryUtils$rotate2","default"],"mappings":"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","sourcesContent":["var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport { Project, Line, Hole, Item, Area, Layer, Vertex } from './export';\nimport { Map, List } from 'immutable';\nimport { Group as GroupModel } from '../models';\nimport { IDBroker, MathUtils, GeometryUtils } from '../utils/export';\n\nvar Group = function () {\n  function Group() {\n    _classCallCheck(this, Group);\n  }\n\n  _createClass(Group, null, [{\n    key: 'select',\n    value: function select(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      state = Project.setAlterate(state).updatedState;\n\n      layerList.entrySeq().forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            groupLayerID = _ref2[0],\n            groupLayerElements = _ref2[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n\n        if (lines) lines.forEach(function (lineID) {\n          state = Line.select(state, groupLayerID, lineID).updatedState;\n        });\n        if (holes) holes.forEach(function (holeID) {\n          state = Hole.select(state, groupLayerID, holeID).updatedState;\n        });\n        if (items) items.forEach(function (itemID) {\n          state = Item.select(state, groupLayerID, itemID).updatedState;\n        });\n        if (areas) areas.forEach(function (areaID) {\n          state = Area.select(state, groupLayerID, areaID).updatedState;\n        });\n      });\n\n      state = Project.setAlterate(state).updatedState;\n\n      var groups = state.getIn(['scene', 'groups']).map(function (g) {\n        return g.set('selected', false);\n      });\n\n      state = state.setIn(['scene', 'groups'], groups).setIn(['scene', 'groups', groupID, 'selected'], true);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'unselect',\n    value: function unselect(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n      var reduced = layerList.reduce(function (newState, layer, layerID) {\n        return Layer.unselectAll(newState, layerID).updatedState;\n      }, state);\n      state = reduced.setIn(['scene', 'groups', groupID, 'selected'], false);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'create',\n    value: function create(state) {\n      var groupID = IDBroker.acquireID();\n\n      state = state.setIn(['scene', 'groups', groupID], new GroupModel({ id: groupID, name: groupID }));\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'createFromSelectedElements',\n    value: function createFromSelectedElements(state) {\n      var _this = this;\n\n      var groupID = IDBroker.acquireID();\n\n      state = state.setIn(['scene', 'groups', groupID], new GroupModel({ id: groupID, name: groupID }));\n\n      state.getIn(['scene', 'layers']).forEach(function (layer) {\n\n        var layerID = layer.get('id');\n        var layerElements = {\n          'lines': layer.get('lines').filter(function (el) {\n            return el.get('selected');\n          }),\n          'items': layer.get('items').filter(function (el) {\n            return el.get('selected');\n          }),\n          'holes': layer.get('holes').filter(function (el) {\n            return el.get('selected');\n          }),\n          'areas': layer.get('areas').filter(function (el) {\n            return el.get('selected');\n          })\n        };\n\n        var _loop = function _loop(elementPrototype) {\n          layerElements[elementPrototype].forEach(function (el) {\n            return state = _this.addElement(state, groupID, layerID, elementPrototype, el.get('id')).updatedState;\n          });\n        };\n\n        for (var elementPrototype in layerElements) {\n          _loop(elementPrototype);\n        }\n      });\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'addElement',\n    value: function addElement(state, groupID, layerID, elementPrototype, elementID) {\n      var actualList = state.getIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype]) || new List();\n\n      if (!actualList.contains(elementID)) {\n        state = state.setIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype], actualList.push(elementID));\n\n        state = this.reloadBaricenter(state, groupID).updatedState;\n      }\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setBarycenter',\n    value: function setBarycenter(state, groupID, x, y) {\n      if (typeof x !== 'undefined') state = state.setIn(['scene', 'groups', groupID, 'x'], x);\n      if (typeof y !== 'undefined') state = state.setIn(['scene', 'groups', groupID, 'y'], y);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'reloadBaricenter',\n    value: function reloadBaricenter(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      var _state$get$toJS = state.get('viewer2D').toJS(),\n          a = _state$get$toJS.a,\n          b = _state$get$toJS.b,\n          c = _state$get$toJS.c,\n          d = _state$get$toJS.d,\n          e = _state$get$toJS.e,\n          f = _state$get$toJS.f,\n          SVGHeight = _state$get$toJS.SVGHeight;\n\n      var m1 = [[a, b, c], [d, e, f], [0, 0, 1]];\n\n      var xBar = 0;\n      var yBar = 0;\n      var elementCount = 0;\n\n      layerList.entrySeq().forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            groupLayerID = _ref4[0],\n            groupLayerElements = _ref4[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n\n        if (lines) lines.forEach(function (lineID) {\n          var vertices = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          });\n\n          var _vertices$get = vertices.get(0),\n              x1 = _vertices$get.x,\n              y1 = _vertices$get.y;\n\n          var _vertices$get2 = vertices.get(1),\n              x2 = _vertices$get2.x,\n              y2 = _vertices$get2.y;\n\n          var _GeometryUtils$midPoi = GeometryUtils.midPoint(x1, y1, x2, y2),\n              xM = _GeometryUtils$midPoi.x,\n              yM = _GeometryUtils$midPoi.y;\n\n          xBar += xM;\n          yBar += yM;\n          elementCount++;\n        });\n\n        if (holes) holes.forEach(function (holeID) {\n          var hole = state.getIn(['scene', 'layers', groupLayerID, 'holes', holeID]);\n          var lineVertices = state.getIn(['scene', 'layers', groupLayerID, 'lines', hole.line, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          });\n\n          var _lineVertices$get = lineVertices.get(0),\n              x1 = _lineVertices$get.x,\n              y1 = _lineVertices$get.y;\n\n          var _lineVertices$get2 = lineVertices.get(1),\n              x2 = _lineVertices$get2.x,\n              y2 = _lineVertices$get2.y;\n\n          var _GeometryUtils$extend = GeometryUtils.extendLine(x1, y1, x2, y2, hole.offset * GeometryUtils.pointsDistance(x1, y1, x2, y2)),\n              x = _GeometryUtils$extend.x,\n              y = _GeometryUtils$extend.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n\n        if (items) items.forEach(function (itemID) {\n          var _state$getIn = state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]),\n              x = _state$getIn.x,\n              y = _state$getIn.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n\n        if (areas) areas.forEach(function (areaID) {\n          var areaVertices = state.getIn(['scene', 'layers', groupLayerID, 'areas', areaID, 'vertices']).map(function (vID) {\n            return state.getIn(['scene', 'layers', groupLayerID, 'vertices', vID]);\n          }).toJS();\n\n          var _GeometryUtils$vertic = GeometryUtils.verticesMidPoint(areaVertices),\n              x = _GeometryUtils$vertic.x,\n              y = _GeometryUtils$vertic.y;\n\n          xBar += x;\n          yBar += y;\n          elementCount++;\n        });\n      });\n\n      if (elementCount) {\n        state = this.setBarycenter(state, groupID, xBar / elementCount, yBar / elementCount).updatedState;\n      }\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'removeElement',\n    value: function removeElement(state, groupID, layerID, elementPrototype, elementID) {\n      var actualList = state.getIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype]);\n\n      if (!actualList || !actualList.contains(elementID)) {\n        return { updatedState: state };\n      }\n\n      state = state.setIn(['scene', 'groups', groupID, 'elements', layerID, elementPrototype], actualList.filterNot(function (el) {\n        return el === elementID;\n      }));\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setAttributes',\n    value: function setAttributes(state, groupID, attributes) {\n      state = state.mergeIn(['scene', 'groups', groupID], attributes);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'setProperties',\n    value: function setProperties(state, groupID, properties) {\n      state = state.mergeIn(['scene', 'groups', groupID, 'properties'], properties);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'remove',\n    value: function remove(state, groupID) {\n      state = state.removeIn(['scene', 'groups', groupID]);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'removeAndDeleteElements',\n    value: function removeAndDeleteElements(state, groupID) {\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      layerList.entrySeq().forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            groupLayerID = _ref6[0],\n            groupLayerElements = _ref6[1];\n\n        state = Layer.unselectAll(state, groupLayerID).updatedState;\n\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n\n        if (lines) {\n          lines.forEach(function (lineID) {\n            state = Line.remove(state, groupLayerID, lineID).updatedState;\n            state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n          });\n        }\n\n        if (holes) holes.forEach(function (holeID) {\n          state = Hole.remove(state, groupLayerID, holeID).updatedState;\n        });\n        if (items) items.forEach(function (itemID) {\n          state = Item.remove(state, groupLayerID, itemID).updatedState;\n        });\n        //( actually ) no effect by area's destruction\n        if (false && areas) areas.forEach(function (areaID) {\n          state = Area.remove(state, groupLayerID, areaID).updatedState;\n        });\n      });\n\n      state = state.deleteIn(['scene', 'groups', groupID]);\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'translate',\n    value: function translate(state, groupID, x, y) {\n      var deltaX = x - state.getIn(['scene', 'groups', groupID, 'x']);\n      var deltaY = y - state.getIn(['scene', 'groups', groupID, 'y']);\n\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      layerList.entrySeq().forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            groupLayerID = _ref8[0],\n            groupLayerElements = _ref8[1];\n\n        var lines = groupLayerElements.get('lines');\n        //let holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        //let areas = groupLayerElements.get('areas');\n\n        //move vertices instead lines avoiding multiple vertex translation\n        if (lines) {\n          var vertices = {};\n          lines.forEach(function (lineID) {\n            var line = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID]);\n            if (!vertices[line.vertices.get(0)]) vertices[line.vertices.get(0)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(0)]);\n            if (!vertices[line.vertices.get(1)]) vertices[line.vertices.get(1)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(1)]);\n          });\n\n          for (var vertexID in vertices) {\n            var _vertices$vertexID = vertices[vertexID],\n                xV = _vertices$vertexID.x,\n                yV = _vertices$vertexID.y;\n\n            state = Vertex.setAttributes(state, groupLayerID, vertexID, new Map({ x: xV + deltaX, y: yV + deltaY })).updatedState;\n          }\n\n          //need to be separated from setAttributes cycle\n          for (var _vertexID in vertices) {\n            state = Vertex.beginDraggingVertex(state, groupLayerID, _vertexID).updatedState;\n            state = Vertex.endDraggingVertex(state).updatedState;\n          }\n        }\n\n        if (items) state = items.map(function (itemID) {\n          return state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]);\n        }).reduce(function (newState, item) {\n          var xI = item.x,\n              yI = item.y;\n\n          return Item.setAttributes(newState, groupLayerID, item.id, new Map({ x: xI + deltaX, y: yI + deltaY })).updatedState;\n        }, state);\n\n        //translation of holes and areas should not take any effect\n        //if( holes ) holes.forEach( holeID => { state = Hole.select( state, groupLayerID, holeID ).updatedState; });\n        //if( areas ) areas.forEach( areaID => { state = Area.select( state, groupLayerID, areaID ).updatedState; });\n\n        state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n      });\n\n      state = this.setBarycenter(state, groupID, x, y).updatedState;\n\n      state = Group.select(state, groupID).updatedState;\n\n      return { updatedState: state };\n    }\n  }, {\n    key: 'rotate',\n    value: function rotate(state, groupID, newAlpha) {\n      var _state$getIn2 = state.getIn(['scene', 'groups', groupID]),\n          barX = _state$getIn2.x,\n          barY = _state$getIn2.y,\n          rotation = _state$getIn2.rotation;\n\n      var alpha = newAlpha - rotation;\n\n      state = Group.setAttributes(state, groupID, new Map({ rotation: newAlpha })).updatedState;\n\n      var layerList = state.getIn(['scene', 'groups', groupID, 'elements']);\n\n      layerList.entrySeq().forEach(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            groupLayerID = _ref10[0],\n            groupLayerElements = _ref10[1];\n\n        var lines = groupLayerElements.get('lines');\n        var holes = groupLayerElements.get('holes');\n        var items = groupLayerElements.get('items');\n        var areas = groupLayerElements.get('areas');\n\n        //move vertices instead lines avoiding multiple vertex translation\n        if (lines) {\n          var vertices = {};\n          lines.forEach(function (lineID) {\n            var line = state.getIn(['scene', 'layers', groupLayerID, 'lines', lineID]);\n            if (!vertices[line.vertices.get(0)]) vertices[line.vertices.get(0)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(0)]);\n            if (!vertices[line.vertices.get(1)]) vertices[line.vertices.get(1)] = state.getIn(['scene', 'layers', groupLayerID, 'vertices', line.vertices.get(1)]);\n          });\n\n          for (var vertexID in vertices) {\n            var _vertices$vertexID2 = vertices[vertexID],\n                xV = _vertices$vertexID2.x,\n                yV = _vertices$vertexID2.y;\n\n            var _GeometryUtils$rotate = GeometryUtils.rotatePointAroundPoint(xV, yV, barX, barY, alpha),\n                newX = _GeometryUtils$rotate.x,\n                newY = _GeometryUtils$rotate.y;\n\n            state = Vertex.setAttributes(state, groupLayerID, vertexID, new Map({ x: newX, y: newY })).updatedState;\n          }\n          //need to be separated from setAttributes cycle\n          for (var _vertexID2 in vertices) {\n            state = Vertex.beginDraggingVertex(state, groupLayerID, _vertexID2).updatedState;\n            state = Vertex.endDraggingVertex(state).updatedState;\n          }\n        }\n\n        if (items) state = items.map(function (itemID) {\n          return state.getIn(['scene', 'layers', groupLayerID, 'items', itemID]);\n        }).reduce(function (newState, item) {\n          var xI = item.x,\n              yI = item.y,\n              rI = item.rotation;\n\n          var _GeometryUtils$rotate2 = GeometryUtils.rotatePointAroundPoint(xI, yI, barX, barY, alpha),\n              newX = _GeometryUtils$rotate2.x,\n              newY = _GeometryUtils$rotate2.y;\n\n          return Item.setAttributes(newState, groupLayerID, item.id, new Map({ x: newX, y: newY, rotation: rI + alpha })).updatedState;\n        }, state);\n\n        //rotation of holes and areas should not take any effect\n        //if( holes ) holes.forEach( holeID => { state = Hole.select( state, groupLayerID, holeID ).updatedState; });\n        //if( areas ) areas.forEach( areaID => { state = Area.select( state, groupLayerID, areaID ).updatedState; });\n\n        state = Layer.detectAndUpdateAreas(state, groupLayerID).updatedState;\n      });\n\n      state = Group.select(state, groupID).updatedState;\n\n      return { updatedState: state };\n    }\n  }]);\n\n  return Group;\n}();\n\nexport { Group as default };"]},"metadata":{},"sourceType":"module"}