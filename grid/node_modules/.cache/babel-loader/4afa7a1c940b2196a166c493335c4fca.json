{"ast":null,"code":"'use strict';\n\nvar Immutable = require('immutable');\n\nvar utils = require('./utils');\n\nvar lcs = require('./lcs');\n\nvar path = require('./path');\n\nvar concatPath = path.concat,\n    escape = path.escape,\n    op = utils.op,\n    isMap = utils.isMap,\n    isIndexed = utils.isIndexed;\n\nvar mapDiff = function (a, b, p) {\n  var ops = [];\n  var path = p || '';\n\n  if (Immutable.is(a, b) || a == b == null) {\n    return ops;\n  }\n\n  var areLists = isIndexed(a) && isIndexed(b);\n  var lastKey = null;\n  var removeKey = null;\n\n  if (a.forEach) {\n    a.forEach(function (aValue, aKey) {\n      if (b.has(aKey)) {\n        if (isMap(aValue) && isMap(b.get(aKey))) {\n          ops = ops.concat(mapDiff(aValue, b.get(aKey), concatPath(path, escape(aKey))));\n        } else if (isIndexed(b.get(aKey)) && isIndexed(aValue)) {\n          ops = ops.concat(sequenceDiff(aValue, b.get(aKey), concatPath(path, escape(aKey))));\n        } else {\n          var bValue = b.get ? b.get(aKey) : b;\n          var areDifferentValues = aValue !== bValue;\n\n          if (areDifferentValues) {\n            ops.push(op('replace', concatPath(path, escape(aKey)), bValue));\n          }\n        }\n      } else {\n        if (areLists) {\n          removeKey = lastKey != null && lastKey + 1 === aKey ? removeKey : aKey;\n          ops.push(op('remove', concatPath(path, escape(removeKey))));\n          lastKey = aKey;\n        } else {\n          ops.push(op('remove', concatPath(path, escape(aKey))));\n        }\n      }\n    });\n  }\n\n  b.forEach(function (bValue, bKey) {\n    if (a.has && !a.has(bKey)) {\n      ops.push(op('add', concatPath(path, escape(bKey)), bValue));\n    }\n  });\n  return ops;\n};\n\nvar sequenceDiff = function (a, b, p) {\n  var ops = [];\n  var path = p || '';\n\n  if (Immutable.is(a, b) || a == b == null) {\n    return ops;\n  }\n\n  if ((a.count() + 1) * (b.count() + 1) >= 10000) {\n    return mapDiff(a, b, p);\n  }\n\n  var lcsDiff = lcs.diff(a, b);\n  var pathIndex = 0;\n  lcsDiff.forEach(function (diff) {\n    if (diff.op === '=') {\n      pathIndex++;\n    } else if (diff.op === '!=') {\n      if (isMap(diff.val) && isMap(diff.newVal)) {\n        var mapDiffs = mapDiff(diff.val, diff.newVal, concatPath(path, pathIndex));\n        ops = ops.concat(mapDiffs);\n      } else {\n        ops.push(op('replace', concatPath(path, pathIndex), diff.newVal));\n      }\n\n      pathIndex++;\n    } else if (diff.op === '+') {\n      ops.push(op('add', concatPath(path, pathIndex), diff.val));\n      pathIndex++;\n    } else if (diff.op === '-') {\n      ops.push(op('remove', concatPath(path, pathIndex)));\n    }\n  });\n  return ops;\n};\n\nvar primitiveTypeDiff = function (a, b, p) {\n  var path = p || '';\n\n  if (a === b) {\n    return [];\n  } else {\n    return [op('replace', concatPath(path, ''), b)];\n  }\n};\n\nvar diff = function (a, b, p) {\n  if (Immutable.is(a, b)) {\n    return Immutable.List();\n  }\n\n  if (a != b && (a == null || b == null)) {\n    return Immutable.fromJS([op('replace', '/', b)]);\n  }\n\n  if (isIndexed(a) && isIndexed(b)) {\n    return Immutable.fromJS(sequenceDiff(a, b));\n  } else if (isMap(a) && isMap(b)) {\n    return Immutable.fromJS(mapDiff(a, b));\n  } else {\n    return Immutable.fromJS(primitiveTypeDiff(a, b, p));\n  }\n};\n\nmodule.exports = diff;","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/immutablediff/src/diff.js"],"names":["Immutable","require","utils","lcs","path","concatPath","concat","escape","op","isMap","isIndexed","mapDiff","a","b","p","ops","is","areLists","lastKey","removeKey","forEach","aValue","aKey","has","get","sequenceDiff","bValue","areDifferentValues","push","bKey","count","lcsDiff","diff","pathIndex","val","newVal","mapDiffs","primitiveTypeDiff","List","fromJS","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Immutable = require('immutable');\nvar utils = require('./utils');\nvar lcs = require('./lcs');\nvar path = require('./path');\nvar concatPath = path.concat,\n                  escape = path.escape,\n                  op = utils.op,\n                  isMap = utils.isMap,\n                  isIndexed = utils.isIndexed;\n\nvar mapDiff = function(a, b, p){\n  var ops = [];\n  var path = p || '';\n\n  if(Immutable.is(a, b) || (a == b == null)){ return ops; }\n\n  var areLists = isIndexed(a) && isIndexed(b);\n  var lastKey = null;\n  var removeKey = null\n\n  if(a.forEach){\n    a.forEach(function(aValue, aKey){\n      if(b.has(aKey)){\n        if(isMap(aValue) && isMap(b.get(aKey))){\n          ops = ops.concat(mapDiff(aValue, b.get(aKey), concatPath(path, escape(aKey))));\n        }\n        else if(isIndexed(b.get(aKey)) && isIndexed(aValue)){\n          ops = ops.concat(sequenceDiff(aValue, b.get(aKey), concatPath(path, escape(aKey))));\n        }\n        else {\n          var bValue = b.get ? b.get(aKey) : b;\n          var areDifferentValues = (aValue !== bValue);\n          if (areDifferentValues) {\n            ops.push(op('replace', concatPath(path, escape(aKey)), bValue));\n          }\n        }\n      }\n      else {\n        if(areLists){\n          removeKey = (lastKey != null && (lastKey+1) === aKey) ? removeKey : aKey;\n          ops.push( op('remove', concatPath(path, escape(removeKey))) );\n          lastKey = aKey;\n        }\n        else{\n          ops.push( op('remove', concatPath(path, escape(aKey))) );\n        }\n\n      }\n    });\n  }\n\n  b.forEach(function(bValue, bKey){\n    if(a.has && !a.has(bKey)){\n      ops.push( op('add', concatPath(path, escape(bKey)), bValue) );\n    }\n  });\n\n  return ops;\n};\n\nvar sequenceDiff = function (a, b, p) {\n  var ops = [];\n  var path = p || '';\n  if(Immutable.is(a, b) || (a == b == null)){ return ops; }\n  if((a.count() + 1) * (b.count() + 1) >= 10000 ) { return mapDiff(a, b, p); }\n\n  var lcsDiff = lcs.diff(a, b);\n\n  var pathIndex = 0;\n\n  lcsDiff.forEach(function (diff) {\n    if(diff.op === '='){ pathIndex++; }\n    else if(diff.op === '!='){\n      if(isMap(diff.val) && isMap(diff.newVal)){\n        var mapDiffs = mapDiff(diff.val, diff.newVal, concatPath(path, pathIndex));\n        ops = ops.concat(mapDiffs);\n      }\n      else{\n        ops.push(op('replace', concatPath(path, pathIndex), diff.newVal));\n      }\n      pathIndex++;\n    }\n    else if(diff.op === '+'){\n      ops.push(op('add', concatPath(path, pathIndex), diff.val));\n      pathIndex++;\n    }\n    else if(diff.op === '-'){ ops.push(op('remove', concatPath(path, pathIndex))); }\n  });\n\n  return ops;\n};\n\nvar primitiveTypeDiff = function (a, b, p) {\n  var path = p || '';\n  if(a === b){ return []; }\n  else{\n    return [ op('replace', concatPath(path, ''), b) ];\n  }\n};\n\nvar diff = function(a, b, p){\n  if(Immutable.is(a, b)){ return Immutable.List(); }\n  if(a != b && (a == null || b == null)){ return Immutable.fromJS([op('replace', '/', b)]); }\n  if(isIndexed(a) && isIndexed(b)){\n    return Immutable.fromJS(sequenceDiff(a, b));\n  }\n  else if(isMap(a) && isMap(b)){\n    return Immutable.fromJS(mapDiff(a, b));\n  }\n  else{\n    return Immutable.fromJS(primitiveTypeDiff(a, b, p));\n  }\n};\n\nmodule.exports = diff;\n"]},"metadata":{},"sourceType":"script"}