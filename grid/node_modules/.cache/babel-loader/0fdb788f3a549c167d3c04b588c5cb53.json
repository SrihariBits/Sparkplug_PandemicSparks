{"ast":null,"code":"var _jsxFileName = \"/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/door/planner-element.jsx\";\nimport React from 'react';\nimport * as Three from 'three';\nimport { loadObjWithMaterial } from '../../utils/load-obj';\nimport path from 'path';\nlet cached3DDoor = null;\nconst STYLE_HOLE_BASE = {\n  stroke: '#000',\n  strokeWidth: '3px',\n  fill: '#000'\n};\nconst STYLE_HOLE_SELECTED = {\n  stroke: '#0096fd',\n  strokeWidth: '4px',\n  fill: '#0096fd',\n  cursor: 'move'\n};\nconst STYLE_ARC_BASE = {\n  stroke: '#000',\n  strokeWidth: '3px',\n  strokeDasharray: '5,5',\n  fill: 'none'\n};\nconst STYLE_ARC_SELECTED = {\n  stroke: '#0096fd',\n  strokeWidth: '4px',\n  strokeDasharray: '5,5',\n  fill: 'none',\n  cursor: 'move'\n};\nconst EPSILON = 3;\nexport default {\n  name: 'door',\n  prototype: 'holes',\n  info: {\n    title: 'door',\n    tag: ['door'],\n    description: 'Wooden door',\n    image: require('./door.png')\n  },\n  properties: {\n    width: {\n      label: 'Width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 80\n      }\n    },\n    height: {\n      label: 'Height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 215\n      }\n    },\n    altitude: {\n      label: 'Altitude',\n      type: 'length-measure',\n      defaultValue: {\n        length: 0\n      }\n    },\n    thickness: {\n      label: 'Thickness',\n      type: 'length-measure',\n      defaultValue: {\n        length: 30\n      }\n    },\n    flip_orizzontal: {\n      label: 'flip orizzontale',\n      type: 'checkbox',\n      defaultValue: false,\n      values: {\n        'none': false,\n        'yes': true\n      }\n    }\n  },\n  render2D: function (element, layer, scene) {\n    let flip = element.properties.get('flip_orizzontal');\n    let holeWidth = element.properties.get('width').get('length');\n    let holePath = `M${0} ${-EPSILON}  L${holeWidth} ${-EPSILON}  L${holeWidth} ${EPSILON}  L${0} ${EPSILON}  z`;\n    let arcPath = `M${0},${0}  A${holeWidth},${holeWidth} 0 0,1 ${holeWidth},${holeWidth}`;\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let arcStyle = element.selected ? STYLE_ARC_SELECTED : STYLE_ARC_BASE;\n    let length = element.properties.get('width').get('length');\n\n    if (flip == false) {\n      return /*#__PURE__*/React.createElement(\"g\", {\n        transform: `translate(${-length / 2}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: arcPath,\n        style: arcStyle,\n        transform: `translate(${0},${holeWidth}) scale(${1},${-1}) rotate(${0})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"line\", {\n        x1: 0,\n        y1: holeWidth - EPSILON,\n        x2: 0,\n        y2: 0 - EPSILON,\n        style: holeStyle,\n        transform: `scale(${-1},${1})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        d: holePath,\n        style: holeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"g\", {\n        transform: `translate(${-length / 2}, 0)`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: arcPath,\n        style: arcStyle,\n        transform: `translate(${0},${-holeWidth}) scale(${1},${1}) rotate(${0})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"line\", {\n        x1: 0,\n        y1: -holeWidth - EPSILON,\n        x2: 0,\n        y2: 0 - EPSILON,\n        style: holeStyle,\n        transform: `scale(${-1},${1})`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"path\", {\n        d: holePath,\n        style: holeStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }));\n    }\n  },\n  render3D: function (element, layer, scene) {\n    let onLoadItem = object => {\n      let boundingBox = new Three.Box3().setFromObject(object);\n      let initialWidth = boundingBox.max.x - boundingBox.min.x;\n      let initialHeight = boundingBox.max.y - boundingBox.min.y;\n      let initialThickness = boundingBox.max.z - boundingBox.min.z;\n\n      if (element.selected) {\n        let box = new Three.BoxHelper(object, 0x99c3fb);\n        box.material.linewidth = 2;\n        box.material.depthTest = false;\n        box.renderOrder = 1000;\n        object.add(box);\n      }\n\n      let width = element.properties.get('width').get('length');\n      let height = element.properties.get('height').get('length');\n      let thickness = element.properties.get('thickness').get('length');\n      object.scale.set(width / initialWidth, height / initialHeight, thickness / initialThickness);\n      return object;\n    };\n\n    if (cached3DDoor) {\n      return Promise.resolve(onLoadItem(cached3DDoor.clone()));\n    }\n\n    let mtl = require('./door.mtl');\n\n    let obj = require('./door.obj');\n\n    let img = require('./texture.jpg');\n\n    return loadObjWithMaterial(mtl, obj, path.dirname(img) + '/').then(object => {\n      cached3DDoor = object;\n      return onLoadItem(cached3DDoor.clone());\n    });\n  }\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/src/components/catalog/holes/door/planner-element.jsx"],"names":["React","Three","loadObjWithMaterial","path","cached3DDoor","STYLE_HOLE_BASE","stroke","strokeWidth","fill","STYLE_HOLE_SELECTED","cursor","STYLE_ARC_BASE","strokeDasharray","STYLE_ARC_SELECTED","EPSILON","name","prototype","info","title","tag","description","image","require","properties","width","label","type","defaultValue","length","height","altitude","thickness","flip_orizzontal","values","render2D","element","layer","scene","flip","get","holeWidth","holePath","arcPath","holeStyle","selected","arcStyle","render3D","onLoadItem","object","boundingBox","Box3","setFromObject","initialWidth","max","x","min","initialHeight","y","initialThickness","z","box","BoxHelper","material","linewidth","depthTest","renderOrder","add","scale","set","Promise","resolve","clone","mtl","obj","img","dirname","then"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as Three from 'three';\nimport {loadObjWithMaterial} from '../../utils/load-obj';\nimport path from 'path';\n\nlet cached3DDoor = null;\n\nconst STYLE_HOLE_BASE = {stroke: '#000', strokeWidth: '3px', fill: '#000'};\nconst STYLE_HOLE_SELECTED = {stroke: '#0096fd', strokeWidth: '4px', fill: '#0096fd', cursor: 'move'};\nconst STYLE_ARC_BASE = {stroke: '#000', strokeWidth: '3px', strokeDasharray: '5,5', fill: 'none'};\nconst STYLE_ARC_SELECTED = {stroke: '#0096fd', strokeWidth: '4px', strokeDasharray: '5,5', fill: 'none', cursor: 'move'};\nconst EPSILON = 3;\n\nexport default {\n  name: 'door',\n  prototype: 'holes',\n\n  info: {\n    title: 'door',\n    tag: ['door'],\n    description: 'Wooden door',\n    image: require('./door.png')\n  },\n\n  properties: {\n    width: {\n      label: 'Width',\n      type: 'length-measure',\n      defaultValue: {\n        length: 80\n      }\n    },\n    height: {\n      label: 'Height',\n      type: 'length-measure',\n      defaultValue: {\n        length: 215\n      }\n    },\n    altitude: {\n      label: 'Altitude',\n      type: 'length-measure',\n      defaultValue: {\n        length: 0\n      }\n    },\n    thickness: {\n      label: 'Thickness',\n      type: 'length-measure',\n      defaultValue: {\n        length: 30\n      }\n    },\n    flip_orizzontal: {\n      label: 'flip orizzontale',\n      type: 'checkbox',\n      defaultValue: false,\n      values: {\n        'none': false,\n        'yes':  true\n      }\n    }\n  },\n\n  render2D: function (element, layer, scene) {\n    let flip = element.properties.get('flip_orizzontal');\n    let holeWidth = element.properties.get('width').get('length');\n    let holePath = `M${0} ${ -EPSILON}  L${holeWidth} ${-EPSILON}  L${holeWidth} ${EPSILON}  L${0} ${EPSILON}  z`;\n    let arcPath = `M${0},${0}  A${holeWidth},${holeWidth} 0 0,1 ${holeWidth},${holeWidth}`;\n    let holeStyle = element.selected ? STYLE_HOLE_SELECTED : STYLE_HOLE_BASE;\n    let arcStyle = element.selected ? STYLE_ARC_SELECTED : STYLE_ARC_BASE;\n    let length = element.properties.get('width').get('length');\n\n    if(flip == false) {\n      return (\n        <g transform={`translate(${-length / 2}, 0)`}>\n          <path d={arcPath} style={arcStyle} transform={`translate(${0},${holeWidth}) scale(${1},${-1}) rotate(${0})`}/>\n          <line x1={0} y1={holeWidth - EPSILON} x2={0} y2={0 - EPSILON} style={holeStyle} transform={`scale(${-1},${1})`}/>\n          <path d={holePath} style={holeStyle}/>\n        </g>\n      )\n    }\n    else{\n      return (\n        <g transform={`translate(${-length / 2}, 0)`}>\n          <path d={arcPath} style={arcStyle} transform={`translate(${0},${-holeWidth}) scale(${1},${1}) rotate(${0})`}/>\n          <line x1={0} y1={-holeWidth - EPSILON} x2={0} y2={0 - EPSILON} style={holeStyle} transform={`scale(${-1},${1})`}/>\n          <path d={holePath} style={holeStyle}/>\n        </g>\n      )\n    }\n  },\n\n  render3D: function (element, layer, scene) {\n    let onLoadItem = (object) => {\n      let boundingBox = new Three.Box3().setFromObject(object);\n\n      let initialWidth = boundingBox.max.x - boundingBox.min.x;\n      let initialHeight = boundingBox.max.y - boundingBox.min.y;\n      let initialThickness = boundingBox.max.z - boundingBox.min.z;\n\n      if (element.selected) {\n        let box = new Three.BoxHelper(object, 0x99c3fb);\n        box.material.linewidth = 2;\n        box.material.depthTest = false;\n        box.renderOrder = 1000;\n        object.add(box);\n      }\n\n      let width = element.properties.get('width').get('length');\n      let height = element.properties.get('height').get('length');\n      let thickness = element.properties.get('thickness').get('length');\n\n      object.scale.set(width / initialWidth, height / initialHeight,\n        thickness / initialThickness);\n\n      return object;\n    };\n\n    if(cached3DDoor) {\n      return Promise.resolve(onLoadItem(cached3DDoor.clone()));\n    }\n\n    let mtl = require('./door.mtl');\n    let obj = require('./door.obj');\n    let img = require('./texture.jpg');\n\n    return loadObjWithMaterial(mtl, obj, path.dirname(img) + '/')\n      .then(object => {\n        cached3DDoor = object;\n        return onLoadItem(cached3DDoor.clone())\n      })\n\n  }\n};\n"]},"metadata":{},"sourceType":"module"}