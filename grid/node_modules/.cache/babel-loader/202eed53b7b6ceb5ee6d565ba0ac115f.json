{"ast":null,"code":"'use strict';\n\nvar Immutable = require('immutable');\n/**\n * Returns a two-dimensional array (an array of arrays) with dimensions n by m.\n * All the elements of this new matrix are initially equal to x\n * @param n number of rows\n * @param m number of columns\n * @param x initial element for every item in matrix\n */\n\n\nvar makeMatrix = function (n, m, x) {\n  var matrix = [];\n\n  for (var i = 0; i < n; i++) {\n    matrix[i] = new Array(m);\n\n    if (x != null) {\n      for (var j = 0; j < m; j++) {\n        matrix[i][j] = x;\n      }\n    }\n  }\n\n  return matrix;\n};\n/**\n * Computes Longest Common Subsequence between two Immutable.JS Indexed Iterables\n * Based on Dynamic Programming http://rosettacode.org/wiki/Longest_common_subsequence#Java\n * @param xs ImmutableJS Indexed Sequence 1\n * @param ys ImmutableJS Indexed Sequence 2\n */\n\n\nvar lcs = function (xs, ys) {\n  var matrix = computeLcsMatrix(xs, ys);\n  return backtrackLcs(xs, ys, matrix);\n};\n\nvar DiffResult = Immutable.Record({\n  op: '=',\n  val: null\n});\nvar ReplaceResult = Immutable.Record({\n  op: '!=',\n  val: null,\n  newVal: null\n});\n/**\n * Returns the resulting diff operations of LCS between two sequences\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @returns Array of DiffResult {op:'=' | '+' | '-', val:any}\n */\n\nvar diff = function (xs, ys) {\n  var matrix = computeLcsMatrix(xs, ys);\n  return printDiff(matrix, xs, ys, xs.size || 0, ys.size || 0);\n};\n\nvar printDiff = function (matrix, xs, ys, xSize, ySize) {\n  var diffArray = [];\n  var i = xSize - 1;\n  var j = ySize - 1;\n\n  while (i >= 0 || j >= 0) {\n    if (i >= 0 && j >= 0 && Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new DiffResult({\n        op: '=',\n        val: xs.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    } else if (i >= 0 && j >= 0 && i === j && !Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new ReplaceResult({\n        val: xs.get(i),\n        newVal: ys.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    } else {\n      if (j >= 0 && (i === -1 || matrix[i + 1][j] >= matrix[i][j + 1])) {\n        diffArray.push(new DiffResult({\n          op: '+',\n          val: ys.get(j)\n        }));\n        j -= 1;\n      } else if (i >= 0 && (j === -1 || matrix[i + 1][j] < matrix[i][j + 1])) {\n        diffArray.push(new DiffResult({\n          op: '-',\n          val: xs.get(i)\n        }));\n        i -= 1;\n      }\n    }\n  }\n\n  return diffArray.reverse();\n};\n/**\n * Computes the Longest Common Subsequence table\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n */\n\n\nfunction computeLcsMatrix(xs, ys) {\n  var n = xs.size || 0;\n  var m = ys.size || 0;\n  var a = makeMatrix(n + 1, m + 1, 0);\n\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (Immutable.is(xs.get(i), ys.get(j))) {\n        a[i + 1][j + 1] = a[i][j] + 1;\n      } else {\n        a[i + 1][j + 1] = Math.max(a[i + 1][j], a[i][j + 1]);\n      }\n    }\n  }\n\n  return a;\n}\n/**\n * Extracts a LCS from matrix M\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @param matrix LCS Matrix\n * @returns {Array.<T>} Longest Common Subsequence\n */\n\n\nvar backtrackLcs = function (xs, ys, matrix) {\n  var lcs = [];\n\n  for (var i = xs.size, j = ys.size; i !== 0 && j !== 0;) {\n    if (matrix[i][j] === matrix[i - 1][j]) {\n      i--;\n    } else if (matrix[i][j] === matrix[i][j - 1]) {\n      j--;\n    } else {\n      if (Immutable.is(xs.get(i - 1), ys.get(j - 1))) {\n        lcs.push(xs.get(i - 1));\n        i--;\n        j--;\n      }\n    }\n  }\n\n  return lcs.reverse();\n};\n\nmodule.exports = {\n  lcs: lcs,\n  computeLcsMatrix: computeLcsMatrix,\n  diff: diff\n};","map":{"version":3,"sources":["/home/srihari/Desktop/Sparkplug_PandemicSparks/grid/node_modules/immutablediff/src/lcs.js"],"names":["Immutable","require","makeMatrix","n","m","x","matrix","i","Array","j","lcs","xs","ys","computeLcsMatrix","backtrackLcs","DiffResult","Record","op","val","ReplaceResult","newVal","diff","printDiff","size","xSize","ySize","diffArray","is","get","push","reverse","a","Math","max","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Immutable = require('immutable');\n\n/**\n * Returns a two-dimensional array (an array of arrays) with dimensions n by m.\n * All the elements of this new matrix are initially equal to x\n * @param n number of rows\n * @param m number of columns\n * @param x initial element for every item in matrix\n */\nvar makeMatrix = function(n, m, x){\n  var matrix = [];\n  for(var i = 0; i < n; i++) {\n    matrix[i] = new Array(m);\n\n    if(x != null){\n      for(var j = 0; j < m; j++){\n        matrix[i][j] = x;\n      }\n    }\n  }\n\n  return matrix;\n};\n\n/**\n * Computes Longest Common Subsequence between two Immutable.JS Indexed Iterables\n * Based on Dynamic Programming http://rosettacode.org/wiki/Longest_common_subsequence#Java\n * @param xs ImmutableJS Indexed Sequence 1\n * @param ys ImmutableJS Indexed Sequence 2\n */\nvar lcs = function(xs, ys){\n  var matrix = computeLcsMatrix(xs, ys);\n\n  return backtrackLcs(xs, ys, matrix);\n};\n\nvar DiffResult = Immutable.Record({op: '=', val: null});\nvar ReplaceResult = Immutable.Record({op: '!=', val: null, newVal: null});\n\n/**\n * Returns the resulting diff operations of LCS between two sequences\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @returns Array of DiffResult {op:'=' | '+' | '-', val:any}\n */\nvar diff = function(xs, ys){\n  var matrix = computeLcsMatrix(xs, ys);\n\n  return printDiff(matrix, xs, ys, xs.size||0, ys.size||0);\n};\n\nvar printDiff = function(matrix, xs, ys, xSize, ySize) {\n  var diffArray = [];\n  var i = xSize - 1;\n  var j = ySize - 1;\n  while (i >= 0 || j >= 0) {\n    if (i >= 0 && j >= 0 && Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new DiffResult({\n        op: '=',\n        val: xs.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    }\n    else if (i >= 0 && j >= 0 && i === j && !Immutable.is(xs.get(i), ys.get(j))) {\n      diffArray.push(new ReplaceResult({\n      val: xs.get(i),\n      newVal: ys.get(i)\n      }));\n      i -= 1;\n      j -= 1;\n    }\n    else {\n      if (j >= 0 && (i === -1 || matrix[i+1][j] >= matrix[i][j+1])) {\n        diffArray.push(new DiffResult({\n          op: '+',\n          val: ys.get(j)\n        }));\n        j -= 1;\n      }\n      else if (i >= 0 && (j === -1 || matrix[i+1][j] < matrix[i][j+1])){\n        diffArray.push(new DiffResult({\n          op: '-',\n          val: xs.get(i)\n        }));\n        i -= 1;\n      }\n    }\n  }\n  return diffArray.reverse();\n};\n\n/**\n * Computes the Longest Common Subsequence table\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n */\nfunction computeLcsMatrix(xs, ys) {\n  var n = xs.size||0;\n  var m = ys.size||0;\n  var a = makeMatrix(n + 1, m + 1, 0);\n\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      if (Immutable.is(xs.get(i), ys.get(j))) {\n        a[i + 1][j + 1] = a[i][j] + 1;\n      }\n      else {\n        a[i + 1][j + 1] = Math.max(a[i + 1][j], a[i][j + 1]);\n      }\n    }\n  }\n\n  return a;\n}\n\n/**\n * Extracts a LCS from matrix M\n * @param xs Indexed Sequence 1\n * @param ys Indexed Sequence 2\n * @param matrix LCS Matrix\n * @returns {Array.<T>} Longest Common Subsequence\n */\nvar backtrackLcs = function(xs, ys, matrix){\n  var lcs = [];\n  for(var i = xs.size, j = ys.size; i !== 0 && j !== 0;){\n    if (matrix[i][j] === matrix[i-1][j]){ i--; }\n    else if (matrix[i][j] === matrix[i][j-1]){ j--; }\n    else{\n      if(Immutable.is(xs.get(i-1), ys.get(j-1))){\n        lcs.push(xs.get(i-1));\n        i--;\n        j--;\n      }\n    }\n  }\n  return lcs.reverse();\n};\n\nmodule.exports = {\n  lcs: lcs,\n  computeLcsMatrix: computeLcsMatrix,\n  diff: diff\n};\n"]},"metadata":{},"sourceType":"script"}